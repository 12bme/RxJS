
> rx.modular@4.0.0 test /Users/matthewp/GitHub/rx/RxJS/src/modular
> tape test/**/*.js | tap-spec


  Observable.amb never 2

    ✔ Expected: [] Actual: []

  Observable.amb never 3

    ✔ Expected: [] Actual: []

  Observable.amb never empty

    ✔ Expected: [OnCompleted()@225] Actual: [OnCompleted()@225]

  Observable.amb empty never

    ✔ Expected: [OnCompleted()@225] Actual: [OnCompleted()@225]

  Observable.amb regular should dispose loser

    ✔ Expected: [OnNext(2)@210,OnCompleted()@240] Actual: [OnNext(2)@210,OnCompleted()@240]
    ✔ (unnamed assert)

  Observable.amb WinnerThrows

    ✔ Expected: [OnNext(2)@210,OnError(Error)@220] Actual: [OnNext(2)@210,OnError(Error)@220]
    ✔ (unnamed assert)

  Observable.amb loser throws

    ✔ Expected: [OnNext(3)@210,OnCompleted()@250] Actual: [OnNext(3)@210,OnCompleted()@250]
    ✔ (unnamed assert)

  Observable.amb throws before election

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ (unnamed assert)

  AsyncSubject Infinite

    ✔ Expected: [] Actual: []
    ✔ Expected: [] Actual: []
    ✔ Expected: [] Actual: []

  AsyncSubject Finite

    ✔ Expected: [] Actual: []
    ✔ Expected: [OnNext(7)@630,OnCompleted()@630] Actual: [OnNext(7)@630,OnCompleted()@630]
    ✔ Expected: [OnNext(7)@900,OnCompleted()@900] Actual: [OnNext(7)@900,OnCompleted()@900]

  AsyncSubject Error

    ✔ Expected: [] Actual: []
    ✔ Expected: [OnError(Error)@630] Actual: [OnError(Error)@630]
    ✔ Expected: [OnError(Error)@900] Actual: [OnError(Error)@900]

  AsyncSubject cancelled

    ✔ Expected: [] Actual: []
    ✔ Expected: [OnCompleted()@630] Actual: [OnCompleted()@630]
    ✔ Expected: [OnCompleted()@900] Actual: [OnCompleted()@900]

  AsyncSubject disposed

    ✔ should throw
    ✔ should throw
    ✔ should throw
    ✔ should throw
    ✔ Expected: [] Actual: []
    ✔ Expected: [] Actual: []
    ✔ Expected: [] Actual: []

  Observable#average number Empty

    ✔ Expected: [[object Object]@250] Actual: [OnError(EmptyError: Sequence contains no elements.)@250]

  Observable#average number return

    ✔ Expected: [OnNext(2)@250,OnCompleted()@250] Actual: [OnNext(2)@250,OnCompleted()@250]

  Observable#average number some

    ✔ Expected: [OnNext(3)@250,OnCompleted()@250] Actual: [OnNext(3)@250,OnCompleted()@250]

  Observable#average number throw

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#average number never

    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  Observable#average selector regular number

    ✔ Expected: [OnNext(2)@240,OnCompleted()@240] Actual: [OnNext(2)@240,OnCompleted()@240]
    ✔ Expected: [(200, 240)] Actual: [(200, 240)]

  Observable#average selector throws

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [(200, 210)] Actual: [(200, 210)]

  BehaviorSubject Infinite

    ✔ Expected: [OnNext(4)@300,OnNext(5)@340,OnNext(6)@410,OnNext(7)@520] Actual: [OnNext(4)@300,OnNext(5)@340,OnNext(6)@410,OnNext(7)@520]
    ✔ Expected: [OnNext(5)@400,OnNext(6)@410,OnNext(7)@520,OnNext(8)@630] Actual: [OnNext(5)@400,OnNext(6)@410,OnNext(7)@520,OnNext(8)@630]
    ✔ Expected: [OnNext(10)@900,OnNext(11)@940] Actual: [OnNext(10)@900,OnNext(11)@940]

  BehaviorSubject Finite

    ✔ Expected: [OnNext(4)@300,OnNext(5)@340,OnNext(6)@410,OnNext(7)@520] Actual: [OnNext(4)@300,OnNext(5)@340,OnNext(6)@410,OnNext(7)@520]
    ✔ Expected: [OnNext(5)@400,OnNext(6)@410,OnNext(7)@520,OnCompleted()@630] Actual: [OnNext(5)@400,OnNext(6)@410,OnNext(7)@520,OnCompleted()@630]
    ✔ Expected: [OnCompleted()@900] Actual: [OnCompleted()@900]

  BehaviorSubject Error

    ✔ Expected: [OnNext(4)@300,OnNext(5)@340,OnNext(6)@410,OnNext(7)@520] Actual: [OnNext(4)@300,OnNext(5)@340,OnNext(6)@410,OnNext(7)@520]
    ✔ Expected: [OnNext(5)@400,OnNext(6)@410,OnNext(7)@520,OnError(Error)@630] Actual: [OnNext(5)@400,OnNext(6)@410,OnNext(7)@520,OnError(Error)@630]
    ✔ Expected: [OnError(Error)@900] Actual: [OnError(Error)@900]

  BehaviorSubject Canceled

    ✔ Expected: [OnNext(100)@300] Actual: [OnNext(100)@300]
    ✔ Expected: [OnNext(100)@400,OnCompleted()@630] Actual: [OnNext(100)@400,OnCompleted()@630]
    ✔ Expected: [OnCompleted()@900] Actual: [OnCompleted()@900]

  BehaviorSubject subject disposed

    ✔ should throw
    ✔ should throw
    ✔ should throw
    ✔ should throw
    ✔ Expected: [OnNext(1)@200,OnNext(2)@250,OnNext(3)@350,OnNext(4)@450] Actual: [OnNext(1)@200,OnNext(2)@250,OnNext(3)@350,OnNext(4)@450]
    ✔ Expected: [OnNext(2)@300,OnNext(3)@350,OnNext(4)@450,OnNext(5)@550] Actual: [OnNext(2)@300,OnNext(3)@350,OnNext(4)@450,OnNext(5)@550]
    ✔ Expected: [OnNext(3)@400,OnNext(4)@450,OnNext(5)@550] Actual: [OnNext(3)@400,OnNext(4)@450,OnNext(5)@550]

  BehaviorSubject value vs getValue()

    ✔ should throw
    ✔ should throw
    ✔ Expected: [OnNext(1)@200,OnNext(2)@300,OnNext(3)@400,OnNext(4)@500] Actual: [OnNext(1)@200,OnNext(2)@300,OnNext(3)@400,OnNext(4)@500]
    ✔ Expected: [OnNext(1)@200,OnNext(2)@300,OnNext(3)@400,OnNext(4)@500,OnNext(4)@600,OnNext(null)@700] Actual: [OnNext(1)@200,OnNext(2)@300,OnNext(3)@400,OnNext(4)@500,OnNext(4)@600,OnNext(null)@700]

  BinaryDisposable#constructor

    ✔ should not be disposed
    ✔ first should not be disposed
    ✔ second should not be disposed

  BinaryDisposable#dispose

    ✔ should not be disposed
    ✔ first should not be disposed
    ✔ second should not be disposed
    ✔ should be disposed
    ✔ first should be disposed
    ✔ second should be disposed
    ✔ should be idempotent
    ✔ first should be idempotent
    ✔ second should be idempotent

  Observable#bufferCount partial window

    ✔ Expected: [OnNext(2,3,4,5)@250,OnCompleted()@250] Actual: [OnNext(2,3,4,5)@250,OnCompleted()@250]

  Observable#bufferCount full windows

    ✔ Expected: [OnNext(2,3)@220,OnNext(4,5)@240,OnCompleted()@250] Actual: [OnNext(2,3)@220,OnNext(4,5)@240,OnCompleted()@250]

  Observable#bufferCount full and partial windows

    ✔ Expected: [OnNext(2,3,4)@230,OnNext(5)@250,OnCompleted()@250] Actual: [OnNext(2,3,4)@230,OnNext(5)@250,OnCompleted()@250]

  Observable#bufferCount Error

    ✔ Expected: [OnError(Error)@250] Actual: [OnError(Error)@250]

  Observable#bufferCount skip less

    ✔ Expected: [OnNext(2,3,4)@230,OnNext(3,4,5)@240,OnNext(4,5)@250,OnNext(5)@250,OnCompleted()@250] Actual: [OnNext(2,3,4)@230,OnNext(3,4,5)@240,OnNext(4,5)@250,OnNext(5)@250,OnCompleted()@250]

  Observable#bufferCount skip more

    ✔ Expected: [OnNext(2,3)@220,OnNext(5)@250,OnCompleted()@250] Actual: [OnNext(2,3)@220,OnNext(5)@250,OnCompleted()@250]

  Observable#bufferCount basic

    ✔ Expected: [OnNext(2,3,4)@280,OnNext(4,5,6)@350,OnNext(6,7,8)@420,OnNext(8,9)@600,OnCompleted()@600] Actual: [OnNext(2,3,4)@280,OnNext(4,5,6)@350,OnNext(6,7,8)@420,OnNext(8,9)@600,OnCompleted()@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]

  Observable#bufferCount disposed

    ✔ Expected: [OnNext(2,3,4)@280,OnNext(4,5,6)@350] Actual: [OnNext(2,3,4)@280,OnNext(4,5,6)@350]
    ✔ Expected: [(200, 370)] Actual: [(200, 370)]

  Observable.case one

    ✔ Expected: [OnNext(1)@210,OnNext(2)@240,OnNext(3)@270,OnCompleted()@300] Actual: [OnNext(1)@210,OnNext(2)@240,OnNext(3)@270,OnCompleted()@300]
    ✔ Expected: [(200, 300)] Actual: [(200, 300)]
    ✔ Expected: [] Actual: []
    ✔ Expected: [] Actual: []

  Observable.case two

    ✔ Expected: [OnNext(11)@220,OnNext(12)@250,OnNext(13)@280,OnCompleted()@310] Actual: [OnNext(11)@220,OnNext(12)@250,OnNext(13)@280,OnCompleted()@310]
    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 310)] Actual: [(200, 310)]
    ✔ Expected: [] Actual: []

  Observable.case three

    ✔ Expected: [OnNext(21)@230,OnNext(22)@240,OnNext(23)@290,OnCompleted()@320] Actual: [OnNext(21)@230,OnNext(22)@240,OnNext(23)@290,OnCompleted()@320]
    ✔ Expected: [] Actual: []
    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 320)] Actual: [(200, 320)]

  Observable.case Throw

    ✔ Expected: [OnError(Error)@200] Actual: [OnError(Error)@200]
    ✔ Expected: [] Actual: []
    ✔ Expected: [] Actual: []
    ✔ Expected: [] Actual: []

  Observable.case with default one

    ✔ Expected: [OnNext(1)@210,OnNext(2)@240,OnNext(3)@270,OnCompleted()@300] Actual: [OnNext(1)@210,OnNext(2)@240,OnNext(3)@270,OnCompleted()@300]
    ✔ Expected: [(200, 300)] Actual: [(200, 300)]
    ✔ Expected: [] Actual: []

  Observable.case with default two

    ✔ Expected: [OnNext(11)@220,OnNext(12)@250,OnNext(13)@280,OnCompleted()@310] Actual: [OnNext(11)@220,OnNext(12)@250,OnNext(13)@280,OnCompleted()@310]
    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 310)] Actual: [(200, 310)]

  case with default three

    ✔ Expected: [OnCompleted()@201] Actual: [OnCompleted()@201]
    ✔ Expected: [] Actual: []
    ✔ Expected: [] Actual: []

  Observable.case with default throw

    ✔ Expected: [OnError(Error)@200] Actual: [OnError(Error)@200]
    ✔ Expected: [] Actual: []
    ✔ Expected: [] Actual: []

  Observable.catch NoErrors

    ✔ Expected: [OnNext(2)@210,OnNext(3)@220,OnCompleted()@230] Actual: [OnNext(2)@210,OnNext(3)@220,OnCompleted()@230]

  Observable.catch never

    ✔ Expected: [] Actual: []

  Observable.catch empty

    ✔ Expected: [OnCompleted()@230] Actual: [OnCompleted()@230]

  Observable.catch return

    ✔ Expected: [OnNext(2)@210,OnCompleted()@230] Actual: [OnNext(2)@210,OnCompleted()@230]

  Observable.catch error

    ✔ Expected: [OnNext(2)@210,OnNext(3)@220,OnNext(5)@240,OnCompleted()@250] Actual: [OnNext(2)@210,OnNext(3)@220,OnNext(5)@240,OnCompleted()@250]

  Observable.catch error never

    ✔ Expected: [OnNext(2)@210,OnNext(3)@220] Actual: [OnNext(2)@210,OnNext(3)@220]

  Observable.catch error error

    ✔ Expected: [OnNext(2)@210,OnNext(3)@220,OnNext(4)@240,OnError(Error)@250] Actual: [OnNext(2)@210,OnNext(3)@220,OnNext(4)@240,OnError(Error)@250]

  Observable.catch multiple

    ✔ Expected: [OnNext(2)@210,OnNext(3)@220,OnNext(4)@230,OnCompleted()@235] Actual: [OnNext(2)@210,OnNext(3)@220,OnNext(4)@230,OnCompleted()@235]

  Observable.catch does not lose subscription to underlying observable

    ✔ 1 subscribes
    ✔ 0 unsubscribes
    ✔ After dispose: 1 subscribes
    ✔ After dispose: 1 unsubscribes
    ✔ catchError(Observable): 1 subscribes
    ✔ catchError(Observable): 0 unsubscribes
    ✔ catchError(Observable): After dispose: 1 subscribes
    ✔ catchError(Observable): After dispose: 1 unsubscribes
    ✔ catchError(function): 1 subscribes
    ✔ catchError(function): 0 unsubscribes
    ✔ catchError(function): After dispose: 1 subscribes
    ✔ catchError(function): After dispose: 1 unsubscribes

  Observable#catchHandler specific error caught

    ✔ Expected: [OnNext(2)@210,OnNext(3)@220,OnNext(4)@240,OnCompleted()@250] Actual: [OnNext(2)@210,OnNext(3)@220,OnNext(4)@240,OnCompleted()@250]
    ✔ (unnamed assert)

  Observable#catchHandler specific error caughtImmediate

    ✔ Expected: [OnNext(4)@240,OnCompleted()@250] Actual: [OnNext(4)@240,OnCompleted()@250]
    ✔ (unnamed assert)

  Observable#catchHandler HandlerThrows

    ✔ Expected: [OnNext(2)@210,OnNext(3)@220,OnError(Error)@230] Actual: [OnNext(2)@210,OnNext(3)@220,OnError(Error)@230]
    ✔ (unnamed assert)

  Observable#catchHandler Nested OuterCatches

    ✔ Expected: [OnNext(2)@210,OnNext(3)@220,OnCompleted()@225] Actual: [OnNext(2)@210,OnNext(3)@220,OnCompleted()@225]
    ✔ (unnamed assert)
    ✔ (unnamed assert)

  Observable#catchHandler throw from nested catch

    ✔ should be equal
    ✔ should be equal
    ✔ Expected: [OnNext(2)@210,OnNext(3)@220,OnNext(4)@230,OnCompleted()@235] Actual: [OnNext(2)@210,OnNext(3)@220,OnNext(4)@230,OnCompleted()@235]
    ✔ (unnamed assert)
    ✔ (unnamed assert)

  combineLatest never never

    ✔ Expected: [] Actual: []

  combineLatest never empty

    ✔ Expected: [] Actual: []

  combineLatest empty never

    ✔ Expected: [] Actual: []

  combineLatest empty empty

    ✔ Expected: [OnCompleted()@210] Actual: [OnCompleted()@210]

  combineLatest empty return

    ✔ Expected: [OnCompleted()@215] Actual: [OnCompleted()@215]

  combineLatest return empty

    ✔ Expected: [OnCompleted()@215] Actual: [OnCompleted()@215]

  combineLatest never return

    ✔ Expected: [] Actual: []

  combineLatest return never

    ✔ Expected: [] Actual: []

  combineLatest return return

    ✔ Expected: [OnNext(5)@220,OnCompleted()@240] Actual: [OnNext(5)@220,OnCompleted()@240]

  combineLatest return return no selector

    ✔ Expected: [OnNext(2,3)@220,OnCompleted()@240] Actual: [OnNext(2,3)@220,OnCompleted()@240]

  combineLatest empty error

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  combineLatest error empty

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  combineLatest return throw

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  combineLatest throw return

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  combineLatest throw throw

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  combineLatest ErrorThrow

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  combineLatest throw error

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  combineLatest never throw

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  combineLatest throw never

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  combineLatest some throw

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  combineLatest throw some

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  combineLatest throw after complete left

    ✔ Expected: [OnError(Error)@230] Actual: [OnError(Error)@230]

  combineLatest throw after complete right

    ✔ Expected: [OnError(Error)@230] Actual: [OnError(Error)@230]

  combineLatest interleaved with tail

    ✔ Expected: [OnNext(5)@220,OnNext(7)@225,OnNext(9)@230,OnNext(10)@235,OnNext(11)@240,OnCompleted()@250] Actual: [OnNext(5)@220,OnNext(7)@225,OnNext(9)@230,OnNext(10)@235,OnNext(11)@240,OnCompleted()@250]

  combineLatest consecutive

    ✔ Expected: [OnNext(10)@235,OnNext(11)@240,OnCompleted()@250] Actual: [OnNext(10)@235,OnNext(11)@240,OnCompleted()@250]

  combineLatest consecutive end with error left

    ✔ Expected: [OnError(Error)@230] Actual: [OnError(Error)@230]

  combineLatest consecutive end with error right

    ✔ Expected: [OnNext(10)@235,OnNext(11)@240,OnError(Error)@245] Actual: [OnNext(10)@235,OnNext(11)@240,OnError(Error)@245]

  combineLatest selector throws

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  CompositeDisposable#add

    ✔ should have a length of one
    ✔ should have a length of two after add

  CompositeDisposable#add after dispose

    ✔ should have a length of 1
    ✔ should be disposed
    ✔ should have a length of 0
    ✔ should be disposed
    ✔ should have a length of 0

  CompositeDisposable#remove

    ✔ should have a length of two
    ✔ remove() should return true for first disposable
    ✔ should have a length of one
    ✔ first should be disposed
    ✔ remove() should return true for second disposable
    ✔ second should be disposed
    ✔ remove() should return false for third disposable
    ✔ third should not have been disposed

  Observable.concat empty empty

    ✔ Expected: [OnCompleted()@250] Actual: [OnCompleted()@250]

  Observable.concat empty never

    ✔ Expected: [] Actual: []

  Observable.concat never empty

    ✔ Expected: [] Actual: []

  Observable.concat never never

    ✔ Expected: [] Actual: []

  Observable.concat empty throw

    ✔ Expected: [OnError(Error)@250] Actual: [OnError(Error)@250]

  Observable.concat throw empty

    ✔ Expected: [OnError(Error)@230] Actual: [OnError(Error)@230]

  Observable.concat throw throw

    ✔ Expected: [OnError(Error)@230] Actual: [OnError(Error)@230]

  Observable.concat return empty

    ✔ Expected: [OnNext(2)@210,OnCompleted()@250] Actual: [OnNext(2)@210,OnCompleted()@250]

  Observable.concat empty return

    ✔ Expected: [OnNext(2)@240,OnCompleted()@250] Actual: [OnNext(2)@240,OnCompleted()@250]

  Observable.concat return never

    ✔ Expected: [OnNext(2)@210] Actual: [OnNext(2)@210]

  Observable.concat never return

    ✔ Expected: [] Actual: []

  Observable.concat return return

    ✔ Expected: [OnNext(2)@220,OnNext(3)@240,OnCompleted()@250] Actual: [OnNext(2)@220,OnNext(3)@240,OnCompleted()@250]

  Observable.concat throw return

    ✔ Expected: [OnError(Error)@230] Actual: [OnError(Error)@230]

  Observable.concat return throw

    ✔ Expected: [OnNext(2)@220,OnError(Error)@250] Actual: [OnNext(2)@220,OnError(Error)@250]

  Observable.concat some data on both sides

    ✔ Expected: [OnNext(2)@210,OnNext(3)@220,OnNext(4)@230,OnNext(5)@240,OnCompleted()@250] Actual: [OnNext(2)@210,OnNext(3)@220,OnNext(4)@230,OnNext(5)@240,OnCompleted()@250]

  Observable.concat as arguments

    ✔ Expected: [OnNext(1)@210,OnNext(2)@220,OnNext(3)@230,OnNext(4)@250,OnNext(5)@260,OnNext(6)@280,OnNext(7)@290,OnNext(8)@300,OnNext(9)@310,OnCompleted()@320] Actual: [OnNext(1)@210,OnNext(2)@220,OnNext(3)@230,OnNext(4)@250,OnNext(5)@260,OnNext(6)@280,OnNext(7)@290,OnNext(8)@300,OnNext(9)@310,OnCompleted()@320]
    ✔ Expected: [(200, 240)] Actual: [(200, 240)]
    ✔ Expected: [(240, 270)] Actual: [(240, 270)]
    ✔ Expected: [(270, 320)] Actual: [(270, 320)]

  ConnectableObservable creation

    ✔ should not be equal
    ✔ should be equal

  ConnectableObservable connected

    ✔ Expected: [OnNext(1)@210,OnNext(2)@220,OnNext(3)@230,OnNext(4)@240,OnCompleted()@250] Actual: [OnNext(1)@210,OnNext(2)@220,OnNext(3)@230,OnNext(4)@240,OnCompleted()@250]

  ConnectableObservable not connected

    ✔ Expected: [] Actual: []

  ConnectableObservable disconnected

    ✔ Expected: [] Actual: []

  ConnectableObservable disconnect future

    ✔ Expected: [OnNext(1)@210,OnNext(2)@220,OnNext(3)@230] Actual: [OnNext(1)@210,OnNext(2)@220,OnNext(3)@230]

  ConnectableObservable multiple non-overlapped connections

    ✔ Expected: [OnNext(3)@230,OnNext(4)@240,OnNext(5)@250,OnNext(8)@280,OnNext(9)@290] Actual: [OnNext(3)@230,OnNext(4)@240,OnNext(5)@250,OnNext(8)@280,OnNext(9)@290]
    ✔ Expected: [(225, 241),(249, 255),(275, 295)] Actual: [(225, 241),(249, 255),(275, 295)]

  Observable#count empty

    ✔ Expected: [OnNext(0)@250,OnCompleted()@250] Actual: [OnNext(0)@250,OnCompleted()@250]

  Observable#count some

    ✔ Expected: [OnNext(3)@250,OnCompleted()@250] Actual: [OnNext(3)@250,OnCompleted()@250]

  Observable#count throw

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#count never

    ✔ Expected: [] Actual: []

  Observable#count predicate empty true

    ✔ Expected: [OnNext(0)@250,OnCompleted()@250] Actual: [OnNext(0)@250,OnCompleted()@250]
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]

  Observable#count predicate empty false

    ✔ Expected: [OnNext(0)@250,OnCompleted()@250] Actual: [OnNext(0)@250,OnCompleted()@250]
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]

  Observable#count predicate return true

    ✔ Expected: [OnNext(1)@250,OnCompleted()@250] Actual: [OnNext(1)@250,OnCompleted()@250]
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]

  Observable#count predicate return false

    ✔ Expected: [OnNext(0)@250,OnCompleted()@250] Actual: [OnNext(0)@250,OnCompleted()@250]
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]

  Observable#count predicate all matched

    ✔ Expected: [OnNext(3)@250,OnCompleted()@250] Actual: [OnNext(3)@250,OnCompleted()@250]
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]

  Observable#count predicate none matched

    ✔ Expected: [OnNext(0)@250,OnCompleted()@250] Actual: [OnNext(0)@250,OnCompleted()@250]
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]

  Observable#count predicate some even

    ✔ Expected: [OnNext(2)@250,OnCompleted()@250] Actual: [OnNext(2)@250,OnCompleted()@250]
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]

  Observable#count predicate throw true

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [(200, 210)] Actual: [(200, 210)]

  Observable#count predicate throw false

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [(200, 210)] Actual: [(200, 210)]

  Observable#count predicate never

    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  Observable#count predicate throws error

    ✔ Expected: [OnError(Error)@230] Actual: [OnError(Error)@230]
    ✔ Expected: [(200, 230)] Actual: [(200, 230)]

  Observable#count after range

    ✔ Expected: [OnNext(10)@211,OnCompleted()@211] Actual: [OnNext(10)@211,OnCompleted()@211]

  Observable#count After Skip

    ✔ Expected: [OnNext(9)@211,OnCompleted()@211] Actual: [OnNext(9)@211,OnCompleted()@211]

  Observable#count after take

    ✔ Expected: [OnNext(1)@201,OnCompleted()@201] Actual: [OnNext(1)@201,OnCompleted()@201]

  Observable.create next

    ✔ Expected: [OnNext(1)@200,OnNext(2)@200] Actual: [OnNext(1)@200,OnNext(2)@200]

  Observable.create completed

    ✔ Expected: [OnCompleted()@200] Actual: [OnCompleted()@200]

  Observable.create Error

    ✔ Expected: [OnError(Error)@200] Actual: [OnError(Error)@200]

  Observable.create noop next

    ✔ Expected: [OnNext(1)@200,OnNext(2)@200] Actual: [OnNext(1)@200,OnNext(2)@200]

  Observable.create no op completed

    ✔ Expected: [OnCompleted()@200] Actual: [OnCompleted()@200]

  Observable.create no op Error

    ✔ Expected: [OnError(Error)@200] Actual: [OnError(Error)@200]

  Observable.create throws errors

    ✔ should throw

  Observable.create dispose

    ✔ Expected: [OnNext(1)@200,OnNext(2)@200,OnNext(3)@800,OnNext(4)@900] Actual: [OnNext(1)@200,OnNext(2)@200,OnNext(3)@800,OnNext(4)@900]

  Observable.create observer does not catch

    ✔ should throw
    ✔ should throw
    ✔ should throw

  current thread now

    ✔ (unnamed assert)

  current thread schedule action

    ✔ (unnamed assert)

  current thread schedule action error

    ✔ should be equal

  current thread schedule nested

    ✔ (unnamed assert)

  current thread ensure trampoline

    ✔ (unnamed assert)
    ✔ (unnamed assert)

  current thread ensure trampoline nested

    ✔ (unnamed assert)
    ✔ (unnamed assert)

  current thread ensure trampoline and cancel

    ✔ (unnamed assert)
    ✔ (unnamed assert)

  Observable#debounce empty

    ✔ Expected: [OnCompleted()@300] Actual: [OnCompleted()@300]
    ✔ Expected: [(200, 300)] Actual: [(200, 300)]

  Observable#debounce error

    ✔ Expected: [OnError(Error)@300] Actual: [OnError(Error)@300]
    ✔ Expected: [(200, 300)] Actual: [(200, 300)]

  Observable#debounce Never

    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  Observable#debounce all pass

    ✔ Expected: [OnNext(1)@260,OnNext(2)@350,OnNext(3)@400,OnCompleted()@400] Actual: [OnNext(1)@260,OnNext(2)@350,OnNext(3)@400,OnCompleted()@400]

  Observable#debounce relative time all pass

    ✔ Expected: [OnNext(1)@230,OnNext(2)@260,OnNext(3)@290,OnNext(4)@320,OnCompleted()@400] Actual: [OnNext(1)@230,OnNext(2)@260,OnNext(3)@290,OnNext(4)@320,OnCompleted()@400]
    ✔ Expected: [(200, 400)] Actual: [(200, 400)]

  Observable#debounce relative time all pass error on end

    ✔ Expected: [OnNext(1)@230,OnNext(2)@260,OnNext(3)@290,OnNext(4)@320,OnError(Error)@400] Actual: [OnNext(1)@230,OnNext(2)@260,OnNext(3)@290,OnNext(4)@320,OnError(Error)@400]
    ✔ Expected: [(200, 400)] Actual: [(200, 400)]

  Observable#debounce relative time all drop

    ✔ Expected: [OnNext(7)@400,OnCompleted()@400] Actual: [OnNext(7)@400,OnCompleted()@400]
    ✔ Expected: [(200, 400)] Actual: [(200, 400)]

  Observable#debounce relative time all drop error on end

    ✔ Expected: [OnError(Error)@400] Actual: [OnError(Error)@400]
    ✔ Expected: [(200, 400)] Actual: [(200, 400)]

  Observable#debounce duration DelayBehavior

    ✔ Expected: [OnNext(0)@270,OnNext(1)@300,OnNext(2)@330,OnNext(3)@370,OnNext(4)@420,OnCompleted()@550] Actual: [OnNext(0)@270,OnNext(1)@300,OnNext(2)@330,OnNext(3)@370,OnNext(4)@420,OnCompleted()@550]
    ✔ Expected: [(200, 550)] Actual: [(200, 550)]
    ✔ Expected: [(250, 270)] Actual: [(250, 270)]
    ✔ Expected: [(280, 300)] Actual: [(280, 300)]
    ✔ Expected: [(310, 330)] Actual: [(310, 330)]
    ✔ Expected: [(350, 370)] Actual: [(350, 370)]
    ✔ Expected: [(400, 420)] Actual: [(400, 420)]

  Observable#debounce duration debounce behavior

    ✔ Expected: [OnNext(0)@270,OnNext(2)@330,OnNext(4)@420,OnCompleted()@550] Actual: [OnNext(0)@270,OnNext(2)@330,OnNext(4)@420,OnCompleted()@550]
    ✔ Expected: [(200, 550)] Actual: [(200, 550)]
    ✔ Expected: [(250, 270)] Actual: [(250, 270)]
    ✔ Expected: [(280, 310)] Actual: [(280, 310)]
    ✔ Expected: [(310, 330)] Actual: [(310, 330)]
    ✔ Expected: [(350, 400)] Actual: [(350, 400)]
    ✔ Expected: [(400, 420)] Actual: [(400, 420)]

  Observable#debounce duration early completion

    ✔ Expected: [OnNext(0)@270,OnNext(2)@330,OnNext(4)@410,OnCompleted()@410] Actual: [OnNext(0)@270,OnNext(2)@330,OnNext(4)@410,OnCompleted()@410]
    ✔ Expected: [(200, 410)] Actual: [(200, 410)]
    ✔ Expected: [(250, 270)] Actual: [(250, 270)]
    ✔ Expected: [(280, 310)] Actual: [(280, 310)]
    ✔ Expected: [(310, 330)] Actual: [(310, 330)]
    ✔ Expected: [(350, 400)] Actual: [(350, 400)]
    ✔ Expected: [(400, 410)] Actual: [(400, 410)]

  Observable#debounce duration inner error

    ✔ Expected: [OnNext(2)@270,OnNext(3)@380,OnError(Error)@490] Actual: [OnNext(2)@270,OnNext(3)@380,OnError(Error)@490]
    ✔ Expected: [(200, 490)] Actual: [(200, 490)]

  Observable#debounce duration outer error

    ✔ Expected: [OnNext(2)@270,OnNext(3)@380,OnError(Error)@460] Actual: [OnNext(2)@270,OnNext(3)@380,OnError(Error)@460]
    ✔ Expected: [(200, 460)] Actual: [(200, 460)]

  Observable#debounce duration selector throws

    ✔ Expected: [OnNext(2)@270,OnNext(3)@380,OnError(Error)@450] Actual: [OnNext(2)@270,OnNext(3)@380,OnError(Error)@450]
    ✔ Expected: [(200, 450)] Actual: [(200, 450)]

  Observable#debounce duration inner done delay behavior

    ✔ Expected: [OnNext(2)@270,OnNext(3)@380,OnNext(4)@490,OnCompleted()@550] Actual: [OnNext(2)@270,OnNext(3)@380,OnNext(4)@490,OnCompleted()@550]
    ✔ Expected: [(200, 550)] Actual: [(200, 550)]

  Observable#debounce duration inner done debounce behavior

    ✔ Expected: [OnNext(2)@270,OnNext(4)@340,OnNext(6)@470,OnCompleted()@550] Actual: [OnNext(2)@270,OnNext(4)@340,OnNext(6)@470,OnCompleted()@550]
    ✔ Expected: [(200, 550)] Actual: [(200, 550)]

  Observable#defaultIfEmpty never

    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  Observable#defaultIfEmpty error

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [(200, 210)] Actual: [(200, 210)]

  Observable#defaultIfEmpty non-empty 1

    ✔ Expected: [OnNext(42)@280,OnNext(43)@360,OnCompleted()@420] Actual: [OnNext(42)@280,OnNext(43)@360,OnCompleted()@420]
    ✔ Expected: [(200, 420)] Actual: [(200, 420)]

  Observable#defaultIfEmpty non-empty 2

    ✔ Expected: [OnNext(42)@280,OnNext(43)@360,OnCompleted()@420] Actual: [OnNext(42)@280,OnNext(43)@360,OnCompleted()@420]
    ✔ Expected: [(200, 420)] Actual: [(200, 420)]

  Observable#defaultIfEmpty empty 1

    ✔ Expected: [OnNext(null)@420,OnCompleted()@420] Actual: [OnNext(null)@420,OnCompleted()@420]
    ✔ Expected: [(200, 420)] Actual: [(200, 420)]

  Observable#defaultIfEmpty empty 2

    ✔ Expected: [OnNext(-1)@420,OnCompleted()@420] Actual: [OnNext(-1)@420,OnCompleted()@420]
    ✔ Expected: [(200, 420)] Actual: [(200, 420)]

  default now

    ✔ Should be near zero

  default schedule action

    ✔ should schedule action

  default schedule relative

    ✔ 205

  default schedule action cancel

    ✔ after cancel should not be set

  Observable.defer complete

    ✔ Expected: [OnNext(200)@300,OnCompleted()@400] Actual: [OnNext(200)@300,OnCompleted()@400]
    ✔ should be equal
    ✔ Expected: [(200, 400)] Actual: [(200, 400)]

  Observable.defer Error

    ✔ Expected: [OnNext(200)@300,OnError(Error)@400] Actual: [OnNext(200)@300,OnError(Error)@400]
    ✔ should be equal
    ✔ Expected: [(200, 400)] Actual: [(200, 400)]

  Observable.defer dispose

    ✔ Expected: [OnNext(200)@300,OnNext(1)@400] Actual: [OnNext(200)@300,OnNext(1)@400]
    ✔ should be equal
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  Observable.defer throw

    ✔ Expected: [OnError(Error)@200] Actual: [OnError(Error)@200]
    ✔ should be equal

  Observable#delaySubscription relative

    ✔ Expected: [OnNext(42)@280,OnNext(43)@290,OnCompleted()@300] Actual: [OnNext(42)@280,OnNext(43)@290,OnCompleted()@300]
    ✔ Expected: [(230, 300)] Actual: [(230, 300)]

  Observable#delaySubscription relative hot

    ✔ Expected: [OnNext(4)@230,OnNext(5)@240,OnCompleted()@250] Actual: [OnNext(4)@230,OnNext(5)@240,OnCompleted()@250]
    ✔ Expected: [(220, 250)] Actual: [(220, 250)]

  Observable#delaySubscription relative hot misses all

    ✔ Expected: [] Actual: []
    ✔ Expected: [(400, 1000)] Actual: [(400, 1000)]

  Observable#delaySubscription relative hot cancel

    ✔ Expected: [] Actual: []
    ✔ Expected: [] Actual: []

  Observable#delaySubscription relative error

    ✔ Expected: [OnNext(42)@280,OnNext(43)@290,OnError(Error)@300] Actual: [OnNext(42)@280,OnNext(43)@290,OnError(Error)@300]
    ✔ Expected: [(230, 300)] Actual: [(230, 300)]

  Observable#delaySubscription absolute

    ✔ Expected: [OnNext(42)@280,OnNext(43)@290,OnCompleted()@300] Actual: [OnNext(42)@280,OnNext(43)@290,OnCompleted()@300]
    ✔ Expected: [(230, 300)] Actual: [(230, 300)]

  Observable#delaySubscription absolute hot

    ✔ Expected: [OnNext(4)@230,OnNext(5)@240,OnCompleted()@250] Actual: [OnNext(4)@230,OnNext(5)@240,OnCompleted()@250]
    ✔ Expected: [(220, 250)] Actual: [(220, 250)]

  Observable#delaySubscription relative hot misses all

    ✔ Expected: [] Actual: []
    ✔ Expected: [(400, 1000)] Actual: [(400, 1000)]

  Observable#delaySubscription relative hot cancel

    ✔ Expected: [] Actual: []
    ✔ Expected: [] Actual: []

  Observable#delaySubscription absolute error

    ✔ Expected: [OnNext(42)@280,OnNext(43)@290,OnError(Error)@300] Actual: [OnNext(42)@280,OnNext(43)@290,OnError(Error)@300]
    ✔ Expected: [(230, 300)] Actual: [(230, 300)]

  Disposable#create

    ✔ disposable should not be undefined

  Disposable#dispose

    ✔ should not be disposed
    ✔ should be disposed

  Disposable#empty

    ✔ should not be null

  Observable#distinct default comparer all distinct

    ✔ Expected: [OnNext(4)@280,OnNext(2)@300,OnNext(1)@350,OnNext(3)@380,OnNext(5)@400,OnCompleted()@420] Actual: [OnNext(4)@280,OnNext(2)@300,OnNext(1)@350,OnNext(3)@380,OnNext(5)@400,OnCompleted()@420]
    ✔ Expected: [(200, 420)] Actual: [(200, 420)]

  Observable#distinct default comparer some duplicates

    ✔ Expected: [OnNext(4)@280,OnNext(2)@300,OnNext(3)@380,OnCompleted()@420] Actual: [OnNext(4)@280,OnNext(2)@300,OnNext(3)@380,OnCompleted()@420]
    ✔ Expected: [(200, 420)] Actual: [(200, 420)]

  Observable#distinct CustomComparer all distinct

    ✔ Expected: [OnNext(4)@280,OnNext(2)@300,OnNext(1)@350,OnNext(3)@380,OnNext(5)@400,OnCompleted()@420] Actual: [OnNext(4)@280,OnNext(2)@300,OnNext(1)@350,OnNext(3)@380,OnNext(5)@400,OnCompleted()@420]
    ✔ Expected: [(200, 420)] Actual: [(200, 420)]

  Observable#distinct custom comparer some duplicates

    ✔ Expected: [OnNext(4)@280,OnNext(2)@300,OnNext(3)@380,OnCompleted()@420] Actual: [OnNext(4)@280,OnNext(2)@300,OnNext(3)@380,OnCompleted()@420]
    ✔ Expected: [(200, 420)] Actual: [(200, 420)]

  Observable#distinctUntilChanged never

    ✔ Expected: [] Actual: []

  Observable#distinctUntilChanged empty

    ✔ Expected: [OnCompleted()@250] Actual: [OnCompleted()@250]

  Observable#distinctUntilChanged return

    ✔ Expected: [OnNext(2)@220,OnCompleted()@250] Actual: [OnNext(2)@220,OnCompleted()@250]

  Observable#distinctUntilChanged throw

    ✔ Expected: [OnError(Error)@250] Actual: [OnError(Error)@250]

  Observable#distinctUntilChanged all changes

    ✔ Expected: [OnNext(2)@210,OnNext(3)@220,OnNext(4)@230,OnNext(5)@240,OnCompleted()@250] Actual: [OnNext(2)@210,OnNext(3)@220,OnNext(4)@230,OnNext(5)@240,OnCompleted()@250]

  Observable#distinctUntilChanged all same

    ✔ Expected: [OnNext(2)@210,OnCompleted()@250] Actual: [OnNext(2)@210,OnCompleted()@250]

  Observable#distinctUntilChanged some changes

    ✔ Expected: [OnNext(2)@210,OnNext(3)@215,OnNext(2)@225,OnNext(1)@230,OnNext(2)@240,OnCompleted()@250] Actual: [OnNext(2)@210,OnNext(3)@215,OnNext(2)@225,OnNext(1)@230,OnNext(2)@240,OnCompleted()@250]

  Observable#distinctUntilChanged comparer all equal

    ✔ Expected: [OnNext(2)@210,OnCompleted()@250] Actual: [OnNext(2)@210,OnCompleted()@250]

  Observable#distinctUntilChanged comparer all different

    ✔ Expected: [OnNext(2)@210,OnNext(2)@220,OnNext(2)@230,OnNext(2)@240,OnCompleted()@250] Actual: [OnNext(2)@210,OnNext(2)@220,OnNext(2)@230,OnNext(2)@240,OnCompleted()@250]

  Observable#distinctUntilChanged key selector evens

    ✔ Expected: [OnNext(2)@210,OnNext(3)@230,OnCompleted()@250] Actual: [OnNext(2)@210,OnNext(3)@230,OnCompleted()@250]

  Observable#distinctUntilChanged key selector throws

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#distinctUntilChanged comparer throws

    ✔ Expected: [OnNext(2)@210,OnError(Error)@220] Actual: [OnNext(2)@210,OnError(Error)@220]

  Observable.empty basic

    ✔ Expected: [OnCompleted()@201] Actual: [OnCompleted()@201]

  Observable.empty disposed

    ✔ Expected: [] Actual: []

  Observable.empty observer throws

    ✔ should throw

  Observable#every empty

    ✔ Expected: [OnNext(true)@250,OnCompleted()@250] Actual: [OnNext(true)@250,OnCompleted()@250]

  Observable#every return

    ✔ Expected: [OnNext(true)@250,OnCompleted()@250] Actual: [OnNext(true)@250,OnCompleted()@250]

  Observable#every return no match

    ✔ Expected: [OnNext(false)@210,OnCompleted()@210] Actual: [OnNext(false)@210,OnCompleted()@210]

  Observable#every none match

    ✔ Expected: [OnNext(false)@210,OnCompleted()@210] Actual: [OnNext(false)@210,OnCompleted()@210]

  Observable#every some match

    ✔ Expected: [OnNext(false)@210,OnCompleted()@210] Actual: [OnNext(false)@210,OnCompleted()@210]

  Observable#every all match

    ✔ Expected: [OnNext(true)@250,OnCompleted()@250] Actual: [OnNext(true)@250,OnCompleted()@250]

  Observable#every throw

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#every never

    ✔ Expected: [] Actual: []

  Observable#filter complete

    ✔ Expected: [OnNext(3)@230,OnNext(5)@340,OnNext(7)@390,OnNext(11)@580,OnCompleted()@600] Actual: [OnNext(3)@230,OnNext(5)@340,OnNext(7)@390,OnNext(11)@580,OnCompleted()@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]
    ✔ should be equal

  Observable#filter true

    ✔ Expected: [OnNext(3)@230,OnNext(4)@270,OnNext(5)@340,OnNext(6)@380,OnNext(7)@390,OnNext(8)@450,OnNext(9)@470,OnNext(10)@560,OnNext(11)@580,OnCompleted()@600] Actual: [OnNext(3)@230,OnNext(4)@270,OnNext(5)@340,OnNext(6)@380,OnNext(7)@390,OnNext(8)@450,OnNext(9)@470,OnNext(10)@560,OnNext(11)@580,OnCompleted()@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]
    ✔ should be equal

  Observable#filter False

    ✔ Expected: [OnCompleted()@600] Actual: [OnCompleted()@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]
    ✔ should be equal

  Observable#filter dispose

    ✔ Expected: [OnNext(3)@230,OnNext(5)@340,OnNext(7)@390] Actual: [OnNext(3)@230,OnNext(5)@340,OnNext(7)@390]
    ✔ Expected: [(200, 400)] Actual: [(200, 400)]
    ✔ should be equal

  Observable#filter error

    ✔ Expected: [OnNext(3)@230,OnNext(5)@340,OnNext(7)@390,OnNext(11)@580,OnError(Error)@600] Actual: [OnNext(3)@230,OnNext(5)@340,OnNext(7)@390,OnNext(11)@580,OnError(Error)@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]
    ✔ should be equal

  Observable#filter Throw

    ✔ Expected: [OnNext(3)@230,OnNext(5)@340,OnError(Error)@380] Actual: [OnNext(3)@230,OnNext(5)@340,OnError(Error)@380]
    ✔ Expected: [(200, 380)] Actual: [(200, 380)]
    ✔ should be equal

  Observable#filter dispose in predicate

    ✔ Expected: [OnNext(3)@230,OnNext(5)@340,OnNext(7)@390] Actual: [OnNext(3)@230,OnNext(5)@340,OnNext(7)@390]
    ✔ Expected: [(200, 450)] Actual: [(200, 450)]
    ✔ should be equal

  Observable#filter with index complete

    ✔ Expected: [OnNext(3)@230,OnNext(7)@390,OnCompleted()@600] Actual: [OnNext(3)@230,OnNext(7)@390,OnCompleted()@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]
    ✔ should be equal

  Observable#filter with index True

    ✔ Expected: [OnNext(3)@230,OnNext(4)@270,OnNext(5)@340,OnNext(6)@380,OnNext(7)@390,OnNext(8)@450,OnNext(9)@470,OnNext(10)@560,OnNext(11)@580,OnCompleted()@600] Actual: [OnNext(3)@230,OnNext(4)@270,OnNext(5)@340,OnNext(6)@380,OnNext(7)@390,OnNext(8)@450,OnNext(9)@470,OnNext(10)@560,OnNext(11)@580,OnCompleted()@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]
    ✔ should be equal

  Observable#filter with index false

    ✔ Expected: [OnCompleted()@600] Actual: [OnCompleted()@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]
    ✔ should be equal

  Observable#filter with index dispose

    ✔ Expected: [OnNext(3)@230,OnNext(7)@390] Actual: [OnNext(3)@230,OnNext(7)@390]
    ✔ Expected: [(200, 400)] Actual: [(200, 400)]
    ✔ should be equal

  Observable#filter with index error

    ✔ Expected: [OnNext(3)@230,OnNext(7)@390,OnError(Error)@600] Actual: [OnNext(3)@230,OnNext(7)@390,OnError(Error)@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]
    ✔ should be equal

  Observable#filter with index throw

    ✔ Expected: [OnNext(3)@230,OnError(Error)@380] Actual: [OnNext(3)@230,OnError(Error)@380]
    ✔ Expected: [(200, 380)] Actual: [(200, 380)]
    ✔ should be equal

  Observable#filter with index dispose in predicate

    ✔ Expected: [OnNext(3)@230,OnNext(7)@390] Actual: [OnNext(3)@230,OnNext(7)@390]
    ✔ Expected: [(200, 450)] Actual: [(200, 450)]
    ✔ should be equal

  Observable#filter multiple subscribers

    ✔ should be equal
    ✔ should be equal

  Observable#Filter and Filter Optimization

    ✔ Expected: [OnNext(6)@380,OnCompleted()@600] Actual: [OnNext(6)@380,OnCompleted()@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]
    ✔ should be equal
    ✔ should be equal

  Observable#filter and Observable#filter thisArg

    ✔ Expected: [OnNext(6)@260,OnCompleted()@300] Actual: [OnNext(6)@260,OnCompleted()@300]

  Observable#filter and map optimization

    ✔ Expected: [OnNext(16)@270,OnNext(36)@380,OnNext(64)@450,OnNext(100)@560,OnCompleted()@600] Actual: [OnNext(16)@270,OnNext(36)@380,OnNext(64)@450,OnNext(100)@560,OnCompleted()@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]
    ✔ should be equal
    ✔ should be equal

  Observable#finally has orders of effects

    ✔ should be equal
    ✔ should be equal

  Observable#finally calls finally before throwing

    ✔ should throw
    ✔ should have been invoked

  Observable#finally only called once on empty

    ✔ should be equal

  Observable#finally called with empty

    ✔ Expected: [OnCompleted()@250] Actual: [OnCompleted()@250]
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]
    ✔ (unnamed assert)

  Observable#finally called with never

    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]
    ✔ (unnamed assert)

  Observable#finally called with single value

    ✔ Expected: [OnNext(2)@210,OnCompleted()@250] Actual: [OnNext(2)@210,OnCompleted()@250]
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]
    ✔ (unnamed assert)

  Observable#finally on throws

    ✔ Expected: [OnError(Error)@250] Actual: [OnError(Error)@250]
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]
    ✔ (unnamed assert)

  Observable#find never

    ✔ Expected: [] Actual: []

  Observable#find empty

    ✔ Expected: [OnCompleted()@210] Actual: [OnCompleted()@210]

  Observable#find single

    ✔ Expected: [OnNext(2)@210,OnCompleted()@210] Actual: [OnNext(2)@210,OnCompleted()@210]

  Observable#find not found

    ✔ Expected: [OnCompleted()@220] Actual: [OnCompleted()@220]

  Observable#find error

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  Observable#find throws

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  findIndex never

    ✔ Expected: [] Actual: []

  findIndex empty

    ✔ Expected: [OnNext(-1)@210,OnCompleted()@210] Actual: [OnNext(-1)@210,OnCompleted()@210]

  findIndex single

    ✔ Expected: [OnNext(0)@210,OnCompleted()@210] Actual: [OnNext(0)@210,OnCompleted()@210]

  Observable#findIndex not found

    ✔ Expected: [OnNext(-1)@220,OnCompleted()@220] Actual: [OnNext(-1)@220,OnCompleted()@220]

  Observable#findIndex error

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  Observable#findIndex throws

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#first empty

    ✔ Expected: [[object Object]@250] Actual: [OnError(EmptyError: Sequence contains no elements.)@250]
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]

  Observable#first default

    ✔ Expected: [OnNext(42)@250,OnCompleted()@250] Actual: [OnNext(42)@250,OnCompleted()@250]
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]

  Observable#first one

    ✔ Expected: [OnNext(2)@210,OnCompleted()@210] Actual: [OnNext(2)@210,OnCompleted()@210]
    ✔ Expected: [(200, 210)] Actual: [(200, 210)]

  Observable#first many

    ✔ Expected: [OnNext(2)@210,OnCompleted()@210] Actual: [OnNext(2)@210,OnCompleted()@210]
    ✔ Expected: [(200, 210)] Actual: [(200, 210)]

  Observable#first Error

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [(200, 210)] Actual: [(200, 210)]

  Observable#first predicate

    ✔ Expected: [OnNext(3)@220,OnCompleted()@220] Actual: [OnNext(3)@220,OnCompleted()@220]
    ✔ Expected: [(200, 220)] Actual: [(200, 220)]

  Observable#first Predicate Obj

    ✔ Expected: [OnNext(3)@220,OnCompleted()@220] Actual: [OnNext(3)@220,OnCompleted()@220]
    ✔ Expected: [(200, 220)] Actual: [(200, 220)]

  Observable#first Predicate thisArg

    ✔ should be equal
    ✔ should be equal
    ✔ Expected: [OnNext(3)@220,OnCompleted()@220] Actual: [OnNext(3)@220,OnCompleted()@220]
    ✔ Expected: [(200, 220)] Actual: [(200, 220)]

  Observable#first Predicate Obj thisArg

    ✔ should be equal
    ✔ should be equal
    ✔ Expected: [OnNext(3)@220,OnCompleted()@220] Actual: [OnNext(3)@220,OnCompleted()@220]
    ✔ Expected: [(200, 220)] Actual: [(200, 220)]

  Observable#first Predicate None

    ✔ Expected: [[object Object]@250] Actual: [OnError(EmptyError: Sequence contains no elements.)@250]
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]

  Observable#first Predicate Obj None

    ✔ Expected: [[object Object]@250] Actual: [OnError(EmptyError: Sequence contains no elements.)@250]
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]

  Observable#first Predicate Obj None Default

    ✔ Expected: [OnNext(42)@250,OnCompleted()@250] Actual: [OnNext(42)@250,OnCompleted()@250]
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]

  Observable#first Predicate Error

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]
    ✔ Expected: [(200, 220)] Actual: [(200, 220)]

  Observable#first PredicateThrows

    ✔ Expected: [OnError(Error)@230] Actual: [OnError(Error)@230]
    ✔ Expected: [(200, 230)] Actual: [(200, 230)]

  Observable#flatMap then complete promise

    ✔ (unnamed assert)

  Observable#flatMap then error Promise

    ✔ should be equal

  Observable#flatMap selector complete Promise

    ✔ (unnamed assert)

  Observable#flatMap Selector error Promise

    ✔ should be equal

  Observable#flatMap result selector complete promise

    ✔ (unnamed assert)

  Observable#flatMap result selector error promise

    ✔ should be equal

  Observable#flatMap then complete complete

    ✔ Expected: [OnNext(foo)@350,OnNext(bar)@400,OnNext(baz)@450,OnNext(foo)@450,OnNext(qux)@500,OnNext(bar)@500,OnNext(baz)@550,OnNext(foo)@550,OnNext(qux)@600,OnNext(bar)@600,OnNext(baz)@650,OnNext(foo)@650,OnNext(qux)@700,OnNext(bar)@700,OnNext(baz)@750,OnNext(qux)@800,OnCompleted()@850] Actual: [OnNext(foo)@350,OnNext(bar)@400,OnNext(baz)@450,OnNext(foo)@450,OnNext(qux)@500,OnNext(bar)@500,OnNext(baz)@550,OnNext(foo)@550,OnNext(qux)@600,OnNext(bar)@600,OnNext(baz)@650,OnNext(foo)@650,OnNext(qux)@700,OnNext(bar)@700,OnNext(baz)@750,OnNext(qux)@800,OnCompleted()@850]
    ✔ Expected: [(200, 700)] Actual: [(200, 700)]
    ✔ Expected: [(300, 550),(400, 650),(500, 750),(600, 850)] Actual: [(300, 550),(400, 650),(500, 750),(600, 850)]

  Observable#flatMap then complete complete 2

    ✔ Expected: [OnNext(foo)@350,OnNext(bar)@400,OnNext(baz)@450,OnNext(foo)@450,OnNext(qux)@500,OnNext(bar)@500,OnNext(baz)@550,OnNext(foo)@550,OnNext(qux)@600,OnNext(bar)@600,OnNext(baz)@650,OnNext(foo)@650,OnNext(qux)@700,OnNext(bar)@700,OnNext(baz)@750,OnNext(qux)@800,OnCompleted()@900] Actual: [OnNext(foo)@350,OnNext(bar)@400,OnNext(baz)@450,OnNext(foo)@450,OnNext(qux)@500,OnNext(bar)@500,OnNext(baz)@550,OnNext(foo)@550,OnNext(qux)@600,OnNext(bar)@600,OnNext(baz)@650,OnNext(foo)@650,OnNext(qux)@700,OnNext(bar)@700,OnNext(baz)@750,OnNext(qux)@800,OnCompleted()@900]
    ✔ Expected: [(200, 900)] Actual: [(200, 900)]
    ✔ Expected: [(300, 550),(400, 650),(500, 750),(600, 850)] Actual: [(300, 550),(400, 650),(500, 750),(600, 850)]

  Observable#flatMap then never complete

    ✔ Expected: [OnNext(foo)@350,OnNext(bar)@400,OnNext(baz)@450,OnNext(foo)@450,OnNext(qux)@500,OnNext(bar)@500,OnNext(baz)@550,OnNext(foo)@550,OnNext(qux)@600,OnNext(bar)@600,OnNext(baz)@650,OnNext(foo)@650,OnNext(qux)@700,OnNext(bar)@700,OnNext(baz)@750,OnNext(foo)@750,OnNext(qux)@800,OnNext(bar)@800,OnNext(baz)@850,OnNext(qux)@900,OnNext(foo)@950] Actual: [OnNext(foo)@350,OnNext(bar)@400,OnNext(baz)@450,OnNext(foo)@450,OnNext(qux)@500,OnNext(bar)@500,OnNext(baz)@550,OnNext(foo)@550,OnNext(qux)@600,OnNext(bar)@600,OnNext(baz)@650,OnNext(foo)@650,OnNext(qux)@700,OnNext(bar)@700,OnNext(baz)@750,OnNext(foo)@750,OnNext(qux)@800,OnNext(bar)@800,OnNext(baz)@850,OnNext(qux)@900,OnNext(foo)@950]
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]
    ✔ Expected: [(300, 550),(400, 650),(500, 750),(600, 850),(700, 950),(900, 1000)] Actual: [(300, 550),(400, 650),(500, 750),(600, 850),(700, 950),(900, 1000)]

  Observable#flatMap then complete never

    ✔ Expected: [OnNext(foo)@350,OnNext(bar)@400,OnNext(baz)@450,OnNext(foo)@450,OnNext(qux)@500,OnNext(bar)@500,OnNext(baz)@550,OnNext(foo)@550,OnNext(qux)@600,OnNext(bar)@600,OnNext(baz)@650,OnNext(foo)@650,OnNext(qux)@700,OnNext(bar)@700,OnNext(baz)@750,OnNext(qux)@800] Actual: [OnNext(foo)@350,OnNext(bar)@400,OnNext(baz)@450,OnNext(foo)@450,OnNext(qux)@500,OnNext(bar)@500,OnNext(baz)@550,OnNext(foo)@550,OnNext(qux)@600,OnNext(bar)@600,OnNext(baz)@650,OnNext(foo)@650,OnNext(qux)@700,OnNext(bar)@700,OnNext(baz)@750,OnNext(qux)@800]
    ✔ Expected: [(200, 700)] Actual: [(200, 700)]
    ✔ Expected: [(300, 1000),(400, 1000),(500, 1000),(600, 1000)] Actual: [(300, 1000),(400, 1000),(500, 1000),(600, 1000)]

  Observable#flatMap then complete Error

    ✔ Expected: [OnNext(foo)@350,OnNext(bar)@400,OnNext(baz)@450,OnNext(foo)@450,OnNext(qux)@500,OnNext(bar)@500,OnNext(baz)@550,OnNext(foo)@550,OnError(Error: ex)@600] Actual: [OnNext(foo)@350,OnNext(bar)@400,OnNext(baz)@450,OnNext(foo)@450,OnNext(qux)@500,OnNext(bar)@500,OnNext(baz)@550,OnNext(foo)@550,OnError(Error: ex)@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]
    ✔ Expected: [(300, 600),(400, 600),(500, 600),(600, 600)] Actual: [(300, 600),(400, 600),(500, 600),(600, 600)]

  Observable#flatMap then error complete

    ✔ Expected: [OnNext(foo)@350,OnNext(bar)@400,OnNext(baz)@450,OnNext(foo)@450,OnNext(qux)@500,OnNext(bar)@500,OnNext(baz)@550,OnNext(foo)@550,OnNext(qux)@600,OnNext(bar)@600,OnNext(baz)@650,OnNext(foo)@650,OnError(Error: ex)@700] Actual: [OnNext(foo)@350,OnNext(bar)@400,OnNext(baz)@450,OnNext(foo)@450,OnNext(qux)@500,OnNext(bar)@500,OnNext(baz)@550,OnNext(foo)@550,OnNext(qux)@600,OnNext(bar)@600,OnNext(baz)@650,OnNext(foo)@650,OnError(Error: ex)@700]
    ✔ Expected: [(200, 700)] Actual: [(200, 700)]
    ✔ Expected: [(300, 550),(400, 650),(500, 700),(600, 700)] Actual: [(300, 550),(400, 650),(500, 700),(600, 700)]

  Observable#flatMap then error Error

    ✔ Expected: [OnNext(foo)@350,OnNext(bar)@400,OnNext(baz)@450,OnNext(foo)@450,OnNext(qux)@500,OnNext(bar)@500,OnError(Error: ex)@550] Actual: [OnNext(foo)@350,OnNext(bar)@400,OnNext(baz)@450,OnNext(foo)@450,OnNext(qux)@500,OnNext(bar)@500,OnError(Error: ex)@550]
    ✔ Expected: [(200, 550)] Actual: [(200, 550)]
    ✔ Expected: [(300, 550),(400, 550),(500, 550)] Actual: [(300, 550),(400, 550),(500, 550)]

  Observable#flatMap complete

    ✔ Expected: [OnNext(102)@310,OnNext(103)@390,OnNext(104)@410,OnNext(105)@490,OnNext(301)@560,OnNext(202)@580,OnNext(203)@590,OnNext(302)@600,OnNext(303)@620,OnNext(106)@740,OnNext(304)@810,OnNext(305)@860,OnNext(401)@930,OnNext(402)@940,OnCompleted()@960] Actual: [OnNext(102)@310,OnNext(103)@390,OnNext(104)@410,OnNext(105)@490,OnNext(301)@560,OnNext(202)@580,OnNext(203)@590,OnNext(302)@600,OnNext(303)@620,OnNext(106)@740,OnNext(304)@810,OnNext(305)@860,OnNext(401)@930,OnNext(402)@940,OnCompleted()@960]
    ✔ Expected: [(200, 900)] Actual: [(200, 900)]
    ✔ Expected: [(300, 760)] Actual: [(300, 760)]
    ✔ Expected: [(400, 605)] Actual: [(400, 605)]
    ✔ Expected: [(550, 960)] Actual: [(550, 960)]
    ✔ Expected: [(750, 790)] Actual: [(750, 790)]
    ✔ Expected: [(850, 950)] Actual: [(850, 950)]

  Observable#flatMap complete innerNotcomplete

    ✔ Expected: [OnNext(102)@310,OnNext(103)@390,OnNext(104)@410,OnNext(105)@490,OnNext(301)@560,OnNext(202)@580,OnNext(203)@590,OnNext(302)@600,OnNext(303)@620,OnNext(106)@740,OnNext(304)@810,OnNext(305)@860,OnNext(401)@930,OnNext(402)@940] Actual: [OnNext(102)@310,OnNext(103)@390,OnNext(104)@410,OnNext(105)@490,OnNext(301)@560,OnNext(202)@580,OnNext(203)@590,OnNext(302)@600,OnNext(303)@620,OnNext(106)@740,OnNext(304)@810,OnNext(305)@860,OnNext(401)@930,OnNext(402)@940]
    ✔ Expected: [(200, 900)] Actual: [(200, 900)]
    ✔ Expected: [(300, 760)] Actual: [(300, 760)]
    ✔ Expected: [(400, 1000)] Actual: [(400, 1000)]
    ✔ Expected: [(550, 960)] Actual: [(550, 960)]
    ✔ Expected: [(750, 790)] Actual: [(750, 790)]
    ✔ Expected: [(850, 950)] Actual: [(850, 950)]

  Observable#flatMap complete outerNotcomplete

    ✔ Expected: [OnNext(102)@310,OnNext(103)@390,OnNext(104)@410,OnNext(105)@490,OnNext(301)@560,OnNext(202)@580,OnNext(203)@590,OnNext(302)@600,OnNext(303)@620,OnNext(106)@740,OnNext(304)@810,OnNext(305)@860,OnNext(401)@930,OnNext(402)@940] Actual: [OnNext(102)@310,OnNext(103)@390,OnNext(104)@410,OnNext(105)@490,OnNext(301)@560,OnNext(202)@580,OnNext(203)@590,OnNext(302)@600,OnNext(303)@620,OnNext(106)@740,OnNext(304)@810,OnNext(305)@860,OnNext(401)@930,OnNext(402)@940]
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]
    ✔ Expected: [(300, 760)] Actual: [(300, 760)]
    ✔ Expected: [(400, 605)] Actual: [(400, 605)]
    ✔ Expected: [(550, 960)] Actual: [(550, 960)]
    ✔ Expected: [(750, 790)] Actual: [(750, 790)]
    ✔ Expected: [(850, 950)] Actual: [(850, 950)]

  Observable#flatMap error outer

    ✔ Expected: [OnNext(102)@310,OnNext(103)@390,OnNext(104)@410,OnNext(105)@490,OnNext(301)@560,OnNext(202)@580,OnNext(203)@590,OnNext(302)@600,OnNext(303)@620,OnNext(106)@740,OnNext(304)@810,OnNext(305)@860,OnError(Error: ex)@900] Actual: [OnNext(102)@310,OnNext(103)@390,OnNext(104)@410,OnNext(105)@490,OnNext(301)@560,OnNext(202)@580,OnNext(203)@590,OnNext(302)@600,OnNext(303)@620,OnNext(106)@740,OnNext(304)@810,OnNext(305)@860,OnError(Error: ex)@900]
    ✔ Expected: [(200, 900)] Actual: [(200, 900)]
    ✔ Expected: [(300, 760)] Actual: [(300, 760)]
    ✔ Expected: [(400, 605)] Actual: [(400, 605)]
    ✔ Expected: [(550, 900)] Actual: [(550, 900)]
    ✔ Expected: [(750, 790)] Actual: [(750, 790)]
    ✔ Expected: [(850, 900)] Actual: [(850, 900)]

  Observable#flatMap error inner

    ✔ Expected: [OnNext(102)@310,OnNext(103)@390,OnNext(104)@410,OnNext(105)@490,OnNext(301)@560,OnNext(202)@580,OnNext(203)@590,OnNext(302)@600,OnNext(303)@620,OnNext(106)@740,OnError(Error: ex)@760] Actual: [OnNext(102)@310,OnNext(103)@390,OnNext(104)@410,OnNext(105)@490,OnNext(301)@560,OnNext(202)@580,OnNext(203)@590,OnNext(302)@600,OnNext(303)@620,OnNext(106)@740,OnError(Error: ex)@760]
    ✔ Expected: [(200, 760)] Actual: [(200, 760)]
    ✔ Expected: [(300, 760)] Actual: [(300, 760)]
    ✔ Expected: [(400, 605)] Actual: [(400, 605)]
    ✔ Expected: [(550, 760)] Actual: [(550, 760)]
    ✔ Expected: [(750, 760)] Actual: [(750, 760)]
    ✔ Expected: [] Actual: []

  Observable#flatMap dispose

    ✔ Expected: [OnNext(102)@310,OnNext(103)@390,OnNext(104)@410,OnNext(105)@490,OnNext(301)@560,OnNext(202)@580,OnNext(203)@590,OnNext(302)@600,OnNext(303)@620] Actual: [OnNext(102)@310,OnNext(103)@390,OnNext(104)@410,OnNext(105)@490,OnNext(301)@560,OnNext(202)@580,OnNext(203)@590,OnNext(302)@600,OnNext(303)@620]
    ✔ Expected: [(200, 700)] Actual: [(200, 700)]
    ✔ Expected: [(300, 700)] Actual: [(300, 700)]
    ✔ Expected: [(400, 605)] Actual: [(400, 605)]
    ✔ Expected: [(550, 700)] Actual: [(550, 700)]
    ✔ Expected: [] Actual: []
    ✔ Expected: [] Actual: []

  Observable#flatMap Throw

    ✔ Expected: [OnNext(102)@310,OnNext(103)@390,OnNext(104)@410,OnNext(105)@490,OnError(Error: ex)@550] Actual: [OnNext(102)@310,OnNext(103)@390,OnNext(104)@410,OnNext(105)@490,OnError(Error: ex)@550]
    ✔ Expected: [(200, 550)] Actual: [(200, 550)]
    ✔ Expected: [(300, 550)] Actual: [(300, 550)]
    ✔ Expected: [(400, 550)] Actual: [(400, 550)]
    ✔ Expected: [] Actual: []
    ✔ Expected: [] Actual: []
    ✔ Expected: [] Actual: []

  Observable#flatMap use function

    ✔ Expected: [OnNext(4)@220,OnNext(3)@230,OnNext(4)@230,OnNext(3)@240,OnNext(4)@240,OnNext(3)@250,OnNext(4)@250,OnNext(5)@260,OnNext(5)@270,OnNext(1)@280,OnNext(5)@280,OnNext(5)@290,OnNext(5)@300,OnCompleted()@300] Actual: [OnNext(4)@220,OnNext(3)@230,OnNext(4)@230,OnNext(3)@240,OnNext(4)@240,OnNext(3)@250,OnNext(4)@250,OnNext(5)@260,OnNext(5)@270,OnNext(1)@280,OnNext(5)@280,OnNext(5)@290,OnNext(5)@300,OnCompleted()@300]
    ✔ Expected: [(200, 290)] Actual: [(200, 290)]

  Observable#flatMap iterable complete

    ✔ Expected: [OnNext(2)@210,OnNext(2)@210,OnNext(4)@340,OnNext(4)@340,OnNext(4)@340,OnNext(4)@340,OnNext(3)@420,OnNext(3)@420,OnNext(3)@420,OnNext(2)@510,OnNext(2)@510,OnCompleted()@600] Actual: [OnNext(2)@210,OnNext(2)@210,OnNext(4)@340,OnNext(4)@340,OnNext(4)@340,OnNext(4)@340,OnNext(3)@420,OnNext(3)@420,OnNext(3)@420,OnNext(2)@510,OnNext(2)@510,OnCompleted()@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]
    ✔ should be equal

  Observable#flatMap Iterable complete result selector

    ✔ Expected: [OnNext(4)@210,OnNext(4)@210,OnNext(8)@340,OnNext(8)@340,OnNext(8)@340,OnNext(8)@340,OnNext(6)@420,OnNext(6)@420,OnNext(6)@420,OnNext(4)@510,OnNext(4)@510,OnCompleted()@600] Actual: [OnNext(4)@210,OnNext(4)@210,OnNext(8)@340,OnNext(8)@340,OnNext(8)@340,OnNext(8)@340,OnNext(6)@420,OnNext(6)@420,OnNext(6)@420,OnNext(4)@510,OnNext(4)@510,OnCompleted()@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]

  Observable#flatMap iterable Error

    ✔ Expected: [OnNext(2)@210,OnNext(2)@210,OnNext(4)@340,OnNext(4)@340,OnNext(4)@340,OnNext(4)@340,OnNext(3)@420,OnNext(3)@420,OnNext(3)@420,OnNext(2)@510,OnNext(2)@510,OnError(Error)@600] Actual: [OnNext(2)@210,OnNext(2)@210,OnNext(4)@340,OnNext(4)@340,OnNext(4)@340,OnNext(4)@340,OnNext(3)@420,OnNext(3)@420,OnNext(3)@420,OnNext(2)@510,OnNext(2)@510,OnError(Error)@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]

  Observable#flatMap Iterable error result selector

    ✔ Expected: [OnNext(4)@210,OnNext(4)@210,OnNext(8)@340,OnNext(8)@340,OnNext(8)@340,OnNext(8)@340,OnNext(6)@420,OnNext(6)@420,OnNext(6)@420,OnNext(4)@510,OnNext(4)@510,OnError(Error)@600] Actual: [OnNext(4)@210,OnNext(4)@210,OnNext(8)@340,OnNext(8)@340,OnNext(8)@340,OnNext(8)@340,OnNext(6)@420,OnNext(6)@420,OnNext(6)@420,OnNext(4)@510,OnNext(4)@510,OnError(Error)@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]

  Observable#flatMap iterable dispose

    ✔ Expected: [OnNext(2)@210,OnNext(2)@210,OnNext(4)@340,OnNext(4)@340,OnNext(4)@340,OnNext(4)@340] Actual: [OnNext(2)@210,OnNext(2)@210,OnNext(4)@340,OnNext(4)@340,OnNext(4)@340,OnNext(4)@340]
    ✔ Expected: [(200, 350)] Actual: [(200, 350)]

  Observable#flatMap iterable dispose result selector

    ✔ Expected: [OnNext(4)@210,OnNext(4)@210,OnNext(8)@340,OnNext(8)@340,OnNext(8)@340,OnNext(8)@340] Actual: [OnNext(4)@210,OnNext(4)@210,OnNext(8)@340,OnNext(8)@340,OnNext(8)@340,OnNext(8)@340]
    ✔ Expected: [(200, 350)] Actual: [(200, 350)]

  Observable#flatMap iterable selector throws

    ✔ Expected: [OnNext(2)@210,OnNext(2)@210,OnNext(4)@340,OnNext(4)@340,OnNext(4)@340,OnNext(4)@340,OnError(Error)@420] Actual: [OnNext(2)@210,OnNext(2)@210,OnNext(4)@340,OnNext(4)@340,OnNext(4)@340,OnNext(4)@340,OnError(Error)@420]
    ✔ Expected: [(200, 420)] Actual: [(200, 420)]
    ✔ should be equal

  Observable#flatMap iterable result selector throws

    ✔ Expected: [OnNext(4)@210,OnNext(4)@210,OnNext(8)@340,OnNext(8)@340,OnNext(8)@340,OnNext(8)@340,OnError(Error)@420] Actual: [OnNext(4)@210,OnNext(4)@210,OnNext(8)@340,OnNext(8)@340,OnNext(8)@340,OnNext(8)@340,OnError(Error)@420]
    ✔ Expected: [(200, 420)] Actual: [(200, 420)]
    ✔ should be equal

  Observable#flatMap iterable selector throws result selector

    ✔ Expected: [OnNext(4)@210,OnNext(4)@210,OnNext(8)@340,OnNext(8)@340,OnNext(8)@340,OnNext(8)@340,OnError(Error)@420] Actual: [OnNext(4)@210,OnNext(4)@210,OnNext(8)@340,OnNext(8)@340,OnNext(8)@340,OnNext(8)@340,OnError(Error)@420]
    ✔ Expected: [(200, 420)] Actual: [(200, 420)]
    ✔ should be equal

  Observable.forkJoin n-ary parameters

    ✔ Expected: [OnNext(4,7,5)@270,OnCompleted()@270] Actual: [OnNext(4,7,5)@270,OnCompleted()@270]

  Observable.forkJoin n-ary parameters empty

    ✔ Expected: [OnCompleted()@270] Actual: [OnCompleted()@270]

  Observable.forkJoin n-ary parameters empty before end

    ✔ Expected: [OnCompleted()@235] Actual: [OnCompleted()@235]

  Observable.forkJoin empty empty

    ✔ Expected: [OnCompleted()@230] Actual: [OnCompleted()@230]

  Observable.forkJoin none

    ✔ Expected: [OnCompleted()@200] Actual: [OnCompleted()@200]

  Observable.forkJoin empty return

    ✔ Expected: [OnCompleted()@230] Actual: [OnCompleted()@230]

  Observable.forkJoin return empty

    ✔ Expected: [OnCompleted()@250] Actual: [OnCompleted()@250]

  Observable.forkJoin return return

    ✔ Expected: [OnNext(5)@250,OnCompleted()@250] Actual: [OnNext(5)@250,OnCompleted()@250]

  Observable.forkJoin empty throw

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable.forkJoin throw empty

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable.forkJoin return throw

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  Observable.forkJoin throw return

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  Observable.forkJoin binary

    ✔ Expected: [OnNext(11)@250,OnCompleted()@250] Actual: [OnNext(11)@250,OnCompleted()@250]

  Observable.from Array

    ✔ Expected: [OnNext(1)@201,OnNext(2)@202,OnNext(3)@203,OnNext(4)@204,OnNext(5)@205,OnCompleted()@206] Actual: [OnNext(1)@201,OnNext(2)@202,OnNext(3)@203,OnNext(4)@204,OnNext(5)@205,OnCompleted()@206]

  Observable.from Array disposed

    ✔ Expected: [OnNext(1)@201,OnNext(2)@202,OnNext(3)@203] Actual: [OnNext(1)@201,OnNext(2)@202,OnNext(3)@203]

  Observable.from array empty

    ✔ Expected: [OnCompleted()@201] Actual: [OnCompleted()@201]

  Observable.from with length

    ✔ Expected: [OnNext(0)@201,OnNext(1)@202,OnNext(2)@203,OnNext(3)@204,OnNext(4)@205,OnCompleted()@206] Actual: [OnNext(0)@201,OnNext(1)@202,OnNext(2)@203,OnNext(3)@204,OnNext(4)@205,OnCompleted()@206]

  Observable.from With String

    ✔ Expected: [OnNext(f)@201,OnNext(o)@202,OnNext(o)@203,OnCompleted()@204] Actual: [OnNext(f)@201,OnNext(o)@202,OnNext(o)@203,OnCompleted()@204]

  Observable.from with selector

    ✔ Expected: [OnNext(2)@201,OnNext(4)@202,OnNext(6)@203,OnCompleted()@204] Actual: [OnNext(2)@201,OnNext(4)@202,OnNext(6)@203,OnCompleted()@204]

  Observable.from with selector error

    ✔ Expected: [OnError(Error: woops)@201] Actual: [OnError(Error: woops)@201]

  Observable.from with selector some error

    ✔ Expected: [OnNext(2)@201,OnNext(4)@202,OnError(Error: woops)@203] Actual: [OnNext(2)@201,OnNext(4)@202,OnError(Error: woops)@203]

  Observable.from With Selector And Context

    ✔ should be equal
    ✔ should be equal
    ✔ should be equal
    ✔ Expected: [OnNext(2)@201,OnNext(4)@202,OnNext(6)@203,OnCompleted()@204] Actual: [OnNext(2)@201,OnNext(4)@202,OnNext(6)@203,OnCompleted()@204]

  Observable.from With Map

    ✔ Expected: [OnNext(1,2)@201,OnNext(2,4)@202,OnNext(4,8)@203,OnCompleted()@204] Actual: [OnNext(1,2)@201,OnNext(2,4)@202,OnNext(4,8)@203,OnCompleted()@204]

  Observable.from With Set

    ✔ Expected: [OnNext(foo)@201,OnNext(bar)@202,OnNext(baz)@203,OnCompleted()@204] Actual: [OnNext(foo)@201,OnNext(bar)@202,OnNext(baz)@203,OnCompleted()@204]

  Observable.fromArray normal

    ✔ Expected: [OnNext(1)@201,OnNext(2)@202,OnNext(3)@203,OnNext(4)@204,OnNext(5)@205,OnCompleted()@206] Actual: [OnNext(1)@201,OnNext(2)@202,OnNext(3)@203,OnNext(4)@204,OnNext(5)@205,OnCompleted()@206]

  Observable.fromArray empty

    ✔ Expected: [OnCompleted()@201] Actual: [OnCompleted()@201]

  Observable.fromArray one

    ✔ Expected: [OnNext(1)@201,OnCompleted()@202] Actual: [OnNext(1)@201,OnCompleted()@202]

  Observable.fromArray dispose

    ✔ Expected: [OnNext(1)@201,OnNext(2)@202,OnNext(3)@203] Actual: [OnNext(1)@201,OnNext(2)@202,OnNext(3)@203]

  Observable.fromEvent DOM Element

    ✔ should be equal
    ✔ should be equal
    ✔ Expected: [OnNext(42)@220] Actual: [OnNext(42)@220]
    ✔ should be equal

  Observable.fromEvent DOM Element selector

    ✔ should be equal
    ✔ should be equal
    ✔ Expected: [OnNext([object Object])@220] Actual: [OnNext([object Object])@220]
    ✔ should be equal

  Observable.fromEvent DOM Element selector throws

    ✔ should be equal
    ✔ should be equal
    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]
    ✔ should be equal

  Observable.fromEvent EventEmitter

    ✔ should be equal
    ✔ should be equal
    ✔ Expected: [OnNext(42)@220] Actual: [OnNext(42)@220]
    ✔ should be equal

  Observable.fromEvent EventEmitter selector

    ✔ should be equal
    ✔ should be equal
    ✔ Expected: [OnNext([object Object])@220] Actual: [OnNext([object Object])@220]
    ✔ should be equal

  Observable.fromEvent EventEmitter selector throws

    ✔ should be equal
    ✔ should be equal
    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]
    ✔ should be equal

  Observable.fromEvent jQuery/Angular/Ember Element

    ✔ should be equal
    ✔ should be equal
    ✔ Expected: [OnNext(42)@220] Actual: [OnNext(42)@220]
    ✔ should be equal

  Observable.fromEvent jQuery/Angular/Ember Element selector

    ✔ should be equal
    ✔ should be equal
    ✔ Expected: [OnNext([object Object])@220] Actual: [OnNext([object Object])@220]
    ✔ should be equal

  Observable.fromEvent jQuery/Angular/Ember Element selector throws

    ✔ should be equal
    ✔ should be equal
    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]
    ✔ should be equal

  fromEventPattern with return from add handler

    ✔ should be equal
    ✔ should be equal
    ✔ Expected: [OnNext(42)@220] Actual: [OnNext(42)@220]
    ✔ should be equal

  Observable.fromEventPattern

    ✔ should be equal
    ✔ should be equal
    ✔ Expected: [OnNext(42)@220] Actual: [OnNext(42)@220]
    ✔ should be equal

  fromEventPattern selector

    ✔ should be equal
    ✔ should be equal
    ✔ Expected: [OnNext([object Object])@220] Actual: [OnNext([object Object])@220]
    ✔ should be equal

  fromEventPattern selector throws

    ✔ should be equal
    ✔ should be equal
    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]
    ✔ should be equal

  Observable.fromPromise success mock

    ✔ Expected: [OnNext(1)@202,OnCompleted()@202] Actual: [OnNext(1)@202,OnCompleted()@202]

  Observable.fromPromise failure mock

    ✔ Expected: [OnError(Error)@202] Actual: [OnError(Error)@202]

  Observable.fromPromise success

    ✔ should be equal
    ✔ (unnamed assert)

  promise Failure

    ✔ should be equal

  Observable.generate finite

    ✔ Expected: [OnNext(0)@201,OnNext(1)@202,OnNext(2)@203,OnNext(3)@204,OnCompleted()@205] Actual: [OnNext(0)@201,OnNext(1)@202,OnNext(2)@203,OnNext(3)@204,OnCompleted()@205]

  Observable.generate throw condition

    ✔ Expected: [OnError(Error)@201] Actual: [OnError(Error)@201]

  Observable.generate throw result selector

    ✔ Expected: [OnError(Error)@201] Actual: [OnError(Error)@201]

  Observable.generate throw iterate

    ✔ Expected: [OnNext(0)@201,OnError(Error)@202] Actual: [OnNext(0)@201,OnError(Error)@202]

  Observable.generate dispose

    ✔ Expected: [OnNext(0)@201,OnNext(1)@202] Actual: [OnNext(0)@201,OnNext(1)@202]

  Observable.generateAbsolute absolute time finite

    ✔ Expected: [OnNext(0)@202,OnNext(1)@204,OnNext(2)@207,OnNext(3)@211,OnCompleted()@211] Actual: [OnNext(0)@202,OnNext(1)@204,OnNext(2)@207,OnNext(3)@211,OnCompleted()@211]

  Observable.generateAbsolute absolute time throw condition

    ✔ Expected: [OnError(Error)@201] Actual: [OnError(Error)@201]

  Observable.generateAbsolute absolute time throw result selector

    ✔ Expected: [OnError(Error)@201] Actual: [OnError(Error)@201]

  Observable.generateAbsolute absolute time throw iterate

    ✔ Expected: [OnNext(0)@202,OnError(Error)@202] Actual: [OnNext(0)@202,OnError(Error)@202]

  Observable.generateAbsolute absolute time throw time selector

    ✔ Expected: [OnError(Error)@201] Actual: [OnError(Error)@201]

  Observable.generateAbsolute absolute time dispose

    ✔ Expected: [OnNext(0)@202,OnNext(1)@204,OnNext(2)@207] Actual: [OnNext(0)@202,OnNext(1)@204,OnNext(2)@207]

  generateWithAbsoluteTime resultSelection

    ✔ Expected: [OnNext(1)@202,OnNext(3)@212,OnNext(5)@232,OnCompleted()@232] Actual: [OnNext(1)@202,OnNext(3)@212,OnNext(5)@232,OnCompleted()@232]

  Observable.generateRelative finite

    ✔ Expected: [OnNext(0)@202,OnNext(1)@204,OnNext(2)@207,OnNext(3)@211,OnCompleted()@211] Actual: [OnNext(0)@202,OnNext(1)@204,OnNext(2)@207,OnNext(3)@211,OnCompleted()@211]

  Observable.generateRelative throw condition

    ✔ Expected: [OnError(Error)@201] Actual: [OnError(Error)@201]

  Observable.generateRelative throw result selector

    ✔ Expected: [OnError(Error)@201] Actual: [OnError(Error)@201]

  Observable.generateRelative throw iterate

    ✔ Expected: [OnNext(0)@202,OnError(Error)@202] Actual: [OnNext(0)@202,OnError(Error)@202]

  Observable.generateRelative throw time selector

    ✔ Expected: [OnError(Error)@201] Actual: [OnError(Error)@201]

  Observable.generateRelative dispose

    ✔ Expected: [OnNext(0)@202,OnNext(1)@204,OnNext(2)@207] Actual: [OnNext(0)@202,OnNext(1)@204,OnNext(2)@207]

  generaterelative resultSelection

    ✔ Expected: [OnNext(1)@202,OnNext(3)@212,OnNext(5)@232,OnCompleted()@232] Actual: [OnNext(1)@202,OnNext(3)@212,OnNext(5)@232,OnCompleted()@232]

  groupJoin normal I

    ✔ Expected: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnNext(6rat)@722,OnNext(7rat)@722,OnNext(8rat)@722,OnNext(7wig)@732,OnNext(8wig)@732,OnNext(9rat)@830,OnCompleted()@990] Actual: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnNext(6rat)@722,OnNext(7rat)@722,OnNext(8rat)@722,OnNext(7wig)@732,OnNext(8wig)@732,OnNext(9rat)@830,OnCompleted()@990]
    ✔ Expected: [(200, 990)] Actual: [(200, 990)]
    ✔ Expected: [(200, 990)] Actual: [(200, 990)]

  groupJoin normal II

    ✔ Expected: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnNext(6rat)@722,OnNext(7rat)@722,OnNext(8rat)@722,OnNext(7wig)@732,OnNext(8wig)@732,OnCompleted()@910] Actual: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnNext(6rat)@722,OnNext(7rat)@722,OnNext(8rat)@722,OnNext(7wig)@732,OnNext(8wig)@732,OnCompleted()@910]
    ✔ Expected: [(200, 910)] Actual: [(200, 910)]
    ✔ Expected: [(200, 910)] Actual: [(200, 910)]

  groupJoin normal III

    ✔ Expected: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnNext(6rat)@722,OnNext(7rat)@722,OnNext(8rat)@722,OnNext(7wig)@732,OnNext(8wig)@732,OnNext(9rat)@830,OnCompleted()@990] Actual: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnNext(6rat)@722,OnNext(7rat)@722,OnNext(8rat)@722,OnNext(7wig)@732,OnNext(8wig)@732,OnNext(9rat)@830,OnCompleted()@990]

  groupJoin normal IV

    ✔ Expected: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnNext(6rat)@722,OnNext(7rat)@722,OnNext(8rat)@722,OnNext(7wig)@732,OnNext(8wig)@732,OnCompleted()@990] Actual: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnNext(6rat)@722,OnNext(7rat)@722,OnNext(8rat)@722,OnNext(7wig)@732,OnNext(8wig)@732,OnCompleted()@990]

  groupJoin normal V

    ✔ Expected: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnNext(6rat)@722,OnNext(7rat)@722,OnNext(8rat)@722,OnNext(7wig)@732,OnNext(8wig)@732,OnCompleted()@990] Actual: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnNext(6rat)@722,OnNext(7rat)@722,OnNext(8rat)@722,OnNext(7wig)@732,OnNext(8wig)@732,OnCompleted()@990]

  groupJoin normal VI

    ✔ Expected: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnNext(6rat)@722,OnNext(7rat)@722,OnNext(8rat)@722,OnNext(7wig)@732,OnNext(8wig)@732,OnCompleted()@920] Actual: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnNext(6rat)@722,OnNext(7rat)@722,OnNext(8rat)@722,OnNext(7wig)@732,OnNext(8wig)@732,OnCompleted()@920]

  groupJoin normal VII

    ✔ Expected: [OnCompleted()@210] Actual: [OnCompleted()@210]

  groupJoin normal VIII

    ✔ Expected: [OnNext(0hat)@220] Actual: [OnNext(0hat)@220]

  groupJoin normal IX

    ✔ Expected: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712] Actual: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712]

  groupJoin Error I

    ✔ Expected: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnError(Error)@310] Actual: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnError(Error)@310]

  groupJoin Error II

    ✔ Expected: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnError(Error)@722] Actual: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnError(Error)@722]

  groupJoin Error III

    ✔ Expected: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnNext(6rat)@722,OnNext(7rat)@722,OnNext(8rat)@722,OnError(Error)@725] Actual: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnNext(6rat)@722,OnNext(7rat)@722,OnNext(8rat)@722,OnError(Error)@725]

  groupJoin Error IV

    ✔ Expected: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnError(Error)@721] Actual: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnError(Error)@721]

  groupJoin Error V

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  groupJoin Error VI

    ✔ Expected: [OnError(Error)@215] Actual: [OnError(Error)@215]

  groupJoin Error VII

    ✔ Expected: [OnError(Error)@215] Actual: [OnError(Error)@215]

  groupJoin Error VIII

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#ignoreElements basic

    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  Observable#ignoreElements Completed

    ✔ Expected: [OnCompleted()@610] Actual: [OnCompleted()@610]
    ✔ Expected: [(200, 610)] Actual: [(200, 610)]

  Observable#ignoreElements Error

    ✔ Expected: [OnError(Error)@610] Actual: [OnError(Error)@610]
    ✔ Expected: [(200, 610)] Actual: [(200, 610)]

  Observable#includes empty

    ✔ Expected: [OnNext(false)@250,OnCompleted()@250] Actual: [OnNext(false)@250,OnCompleted()@250]

  Observable#includes return positive

    ✔ Expected: [OnNext(true)@210,OnCompleted()@210] Actual: [OnNext(true)@210,OnCompleted()@210]

  Observable#includes return negative

    ✔ Expected: [OnNext(false)@250,OnCompleted()@250] Actual: [OnNext(false)@250,OnCompleted()@250]

  Observable#includes some positive

    ✔ Expected: [OnNext(true)@220,OnCompleted()@220] Actual: [OnNext(true)@220,OnCompleted()@220]

  Observable#includes some negative

    ✔ Expected: [OnNext(false)@250,OnCompleted()@250] Actual: [OnNext(false)@250,OnCompleted()@250]

  Observable#includes throw

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#includes never

    ✔ Expected: [] Actual: []

  Observable#includes fromIndex less than zero

    ✔ Expected: [OnNext(false)@200,OnCompleted()@200] Actual: [OnNext(false)@200,OnCompleted()@200]

  Observable#includes fromIndex Infinity

    ✔ Expected: [OnNext(true)@210,OnCompleted()@210] Actual: [OnNext(true)@210,OnCompleted()@210]

  Observable#includes fromIndex zero

    ✔ Expected: [OnNext(true)@210,OnCompleted()@210] Actual: [OnNext(true)@210,OnCompleted()@210]

  Observable#includes fromIndex greater than zero misses

    ✔ Expected: [OnNext(false)@250,OnCompleted()@250] Actual: [OnNext(false)@250,OnCompleted()@250]

  Observable#includes fromIndex greater than zero no end

    ✔ Expected: [] Actual: []

  Observable#includes fromIndex greater than zero hits

    ✔ Expected: [OnNext(true)@220,OnCompleted()@220] Actual: [OnNext(true)@220,OnCompleted()@220]

  Observable#includes -0 equals 0

    ✔ Expected: [OnNext(true)@210,OnCompleted()@210] Actual: [OnNext(true)@210,OnCompleted()@210]

  Observable#includes +0 equals 0

    ✔ Expected: [OnNext(true)@210,OnCompleted()@210] Actual: [OnNext(true)@210,OnCompleted()@210]

  Observable#includes NaN equals NaN

    ✔ Expected: [OnNext(true)@210,OnCompleted()@210] Actual: [OnNext(true)@210,OnCompleted()@210]

  Observable#indexOf empty

    ✔ Expected: [OnNext(-1)@250,OnCompleted()@250] Actual: [OnNext(-1)@250,OnCompleted()@250]

  Observable#indexOf return positive

    ✔ Expected: [OnNext(0)@210,OnCompleted()@210] Actual: [OnNext(0)@210,OnCompleted()@210]

  Observable#indexOf return negative

    ✔ Expected: [OnNext(-1)@250,OnCompleted()@250] Actual: [OnNext(-1)@250,OnCompleted()@250]

  Observable#indexOf some positive

    ✔ Expected: [OnNext(1)@220,OnCompleted()@220] Actual: [OnNext(1)@220,OnCompleted()@220]

  Observable#indexOf some negative

    ✔ Expected: [OnNext(-1)@250,OnCompleted()@250] Actual: [OnNext(-1)@250,OnCompleted()@250]

  Observable#indexOf throw

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#indexOf never

    ✔ Expected: [] Actual: []

  Observable#indexOf fromIndex less than zero

    ✔ Expected: [OnNext(-1)@200,OnCompleted()@200] Actual: [OnNext(-1)@200,OnCompleted()@200]

  Observable#indexOf fromIndex Infinity

    ✔ Expected: [OnNext(0)@210,OnCompleted()@210] Actual: [OnNext(0)@210,OnCompleted()@210]

  Observable#indexOf fromIndex zero

    ✔ Expected: [OnNext(0)@210,OnCompleted()@210] Actual: [OnNext(0)@210,OnCompleted()@210]

  Observable#indexOf fromIndex greater than zero misses

    ✔ Expected: [OnNext(-1)@250,OnCompleted()@250] Actual: [OnNext(-1)@250,OnCompleted()@250]

  Observable#indexOf fromIndex greater than zero no end

    ✔ Expected: [] Actual: []

  Observable#indexOf fromIndex greater than zero hits

    ✔ Expected: [OnNext(1)@220,OnCompleted()@220] Actual: [OnNext(1)@220,OnCompleted()@220]

  Observable#indexOf -0 equals 0

    ✔ Expected: [OnNext(0)@210,OnCompleted()@210] Actual: [OnNext(0)@210,OnCompleted()@210]

  Observable#indexOf +0 equals 0

    ✔ Expected: [OnNext(0)@210,OnCompleted()@210] Actual: [OnNext(0)@210,OnCompleted()@210]

  Observable.interval relative time basic

    ✔ Expected: [OnNext(0)@300,OnNext(1)@400,OnNext(2)@500,OnNext(3)@600,OnNext(4)@700,OnNext(5)@800,OnNext(6)@900] Actual: [OnNext(0)@300,OnNext(1)@400,OnNext(2)@500,OnNext(3)@600,OnNext(4)@700,OnNext(5)@800,OnNext(6)@900]

  Observable.interval relative time zero

    ✔ Expected: [OnNext(0)@201,OnNext(1)@202,OnNext(2)@203,OnNext(3)@204,OnNext(4)@205,OnNext(5)@206,OnNext(6)@207,OnNext(7)@208,OnNext(8)@209] Actual: [OnNext(0)@201,OnNext(1)@202,OnNext(2)@203,OnNext(3)@204,OnNext(4)@205,OnNext(5)@206,OnNext(6)@207,OnNext(7)@208,OnNext(8)@209]

  Observable.interval relative time negative

    ✔ Expected: [OnNext(0)@201,OnNext(1)@202,OnNext(2)@203,OnNext(3)@204,OnNext(4)@205,OnNext(5)@206,OnNext(6)@207,OnNext(7)@208,OnNext(8)@209] Actual: [OnNext(0)@201,OnNext(1)@202,OnNext(2)@203,OnNext(3)@204,OnNext(4)@205,OnNext(5)@206,OnNext(6)@207,OnNext(7)@208,OnNext(8)@209]

  Observable.interval relative time disposed

    ✔ Expected: [] Actual: []

  Observable.interval relative time observer throws

    ✔ should throw

  Observable#isEmpty empty

    ✔ Expected: [OnNext(true)@250,OnCompleted()@250] Actual: [OnNext(true)@250,OnCompleted()@250]
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]

  Observable#isEmpty return

    ✔ Expected: [OnNext(false)@210,OnCompleted()@210] Actual: [OnNext(false)@210,OnCompleted()@210]
    ✔ Expected: [(200, 210)] Actual: [(200, 210)]

  Observable#isEmpty throw

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [(200, 210)] Actual: [(200, 210)]

  Observable#isEmpty never

    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  isEqual bool equal

    ✔ (unnamed assert)

  isEqual bool inequal

    ✔ (unnamed assert)

  isEqual number equal

    ✔ (unnamed assert)

  isEqual number inequal

    ✔ (unnamed assert)

  isEqual number +0 equal to -0

    ✔ (unnamed assert)

  isEqual number NaN is equal to NaN

    ✔ (unnamed assert)

  isEqual number Infinity is equal to Infinity

    ✔ (unnamed assert)

  isEqual string equal

    ✔ (unnamed assert)

  isEqual string inequal

    ✔ (unnamed assert)

  isEqual array equal

    ✔ (unnamed assert)

  isEqual array inequal

    ✔ (unnamed assert)

  isEqual object equal

    ✔ (unnamed assert)

  isEqual object inequal

    ✔ (unnamed assert)

  isEqual complex object equal

    ✔ (unnamed assert)

  isEqual complex object inequal

    ✔ (unnamed assert)

  isEqual new object equal

    ✔ (unnamed assert)

  isEqual new object inequal

    ✔ (unnamed assert)

  join normal I

    ✔ Expected: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnNext(6rat)@722,OnNext(7rat)@722,OnNext(8rat)@722,OnNext(7wig)@732,OnNext(8wig)@732,OnNext(9rat)@830,OnCompleted()@900] Actual: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnNext(6rat)@722,OnNext(7rat)@722,OnNext(8rat)@722,OnNext(7wig)@732,OnNext(8wig)@732,OnNext(9rat)@830,OnCompleted()@900]

  join normal II

    ✔ Expected: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnNext(6rat)@722,OnNext(7rat)@722,OnNext(8rat)@722,OnNext(7wig)@732,OnNext(8wig)@732,OnCompleted()@910] Actual: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnNext(6rat)@722,OnNext(7rat)@722,OnNext(8rat)@722,OnNext(7wig)@732,OnNext(8wig)@732,OnCompleted()@910]

  join normal III

    ✔ Expected: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnNext(6rat)@722,OnNext(7rat)@722,OnNext(8rat)@722,OnNext(7wig)@732,OnNext(8wig)@732,OnNext(9rat)@830,OnCompleted()@900] Actual: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnNext(6rat)@722,OnNext(7rat)@722,OnNext(8rat)@722,OnNext(7wig)@732,OnNext(8wig)@732,OnNext(9rat)@830,OnCompleted()@900]

  join normal IV

    ✔ Expected: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnNext(6rat)@722,OnNext(7rat)@722,OnNext(8rat)@722,OnNext(7wig)@732,OnNext(8wig)@732,OnCompleted()@980] Actual: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnNext(6rat)@722,OnNext(7rat)@722,OnNext(8rat)@722,OnNext(7wig)@732,OnNext(8wig)@732,OnCompleted()@980]

  join normal V

    ✔ Expected: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnNext(6rat)@722,OnNext(7rat)@722,OnNext(8rat)@722,OnNext(7wig)@732,OnNext(8wig)@732,OnCompleted()@922] Actual: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnNext(6rat)@722,OnNext(7rat)@722,OnNext(8rat)@722,OnNext(7wig)@732,OnNext(8wig)@732,OnCompleted()@922]

  join normal VI

    ✔ Expected: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnNext(6rat)@722,OnNext(7rat)@722,OnNext(8rat)@722,OnNext(7wig)@732,OnNext(8wig)@732,OnCompleted()@900] Actual: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnNext(6rat)@722,OnNext(7rat)@722,OnNext(8rat)@722,OnNext(7wig)@732,OnNext(8wig)@732,OnCompleted()@900]

  join normal VII

    ✔ Expected: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712] Actual: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712]

  join error I

    ✔ Expected: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnError(Error)@310] Actual: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnError(Error)@310]

  join error II

    ✔ Expected: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnError(Error)@722] Actual: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnError(Error)@722]

  join error III

    ✔ Expected: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnNext(6rat)@722,OnNext(7rat)@722,OnNext(8rat)@722,OnError(Error)@725] Actual: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnNext(6rat)@722,OnNext(7rat)@722,OnNext(8rat)@722,OnError(Error)@725]

  join error IV

    ✔ Expected: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnError(Error)@721] Actual: [OnNext(0hat)@215,OnNext(0bat)@217,OnNext(1hat)@219,OnNext(3wag)@300,OnNext(3pig)@300,OnNext(3cup)@305,OnNext(4wag)@310,OnNext(4pig)@310,OnNext(4cup)@310,OnNext(6tin)@702,OnNext(7tin)@710,OnNext(6man)@712,OnNext(7man)@712,OnNext(8tin)@720,OnNext(8man)@720,OnError(Error)@721]

  join error V

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  join error VI

    ✔ Expected: [OnError(Error)@215] Actual: [OnError(Error)@215]

  join error VII

    ✔ Expected: [OnError(Error)@215] Actual: [OnError(Error)@215]

  join error VIII

    ✔ Expected: [OnError(Error)@215] Actual: [OnError(Error)@215]

  Observable.just basic

    ✔ Expected: [OnNext(42)@201,OnCompleted()@201] Actual: [OnNext(42)@201,OnCompleted()@201]

  Observable.just disposed

    ✔ Expected: [] Actual: []

  Observable.just disposed after next

    ✔ Expected: [OnNext(42)@101] Actual: [OnNext(42)@101]

  Observable.just Observer throws

    ✔ should throw
    ✔ should throw

  Observable#last empty

    ✔ Expected: [[object Object]@250] Actual: [OnError(EmptyError: Sequence contains no elements.)@250]
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]

  Observable#last default value

    ✔ Expected: [OnNext(42)@250,OnCompleted()@250] Actual: [OnNext(42)@250,OnCompleted()@250]
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]

  Observable#last one

    ✔ Expected: [OnNext(2)@250,OnCompleted()@250] Actual: [OnNext(2)@250,OnCompleted()@250]
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]

  Observable#last many

    ✔ Expected: [OnNext(3)@250,OnCompleted()@250] Actual: [OnNext(3)@250,OnCompleted()@250]
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]

  Observable#last error

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [(200, 210)] Actual: [(200, 210)]

  Observable#last predicate

    ✔ Expected: [OnNext(5)@250,OnCompleted()@250] Actual: [OnNext(5)@250,OnCompleted()@250]
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]

  Observable#last obj predicate

    ✔ Expected: [OnNext(5)@250,OnCompleted()@250] Actual: [OnNext(5)@250,OnCompleted()@250]
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]

  Observable#last predicate thisArg

    ✔ should be equal
    ✔ should be equal
    ✔ should be equal
    ✔ should be equal
    ✔ Expected: [OnNext(5)@250,OnCompleted()@250] Actual: [OnNext(5)@250,OnCompleted()@250]
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]

  Observable#last obj predicate

    ✔ should be equal
    ✔ should be equal
    ✔ should be equal
    ✔ should be equal
    ✔ Expected: [OnNext(5)@250,OnCompleted()@250] Actual: [OnNext(5)@250,OnCompleted()@250]
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]

  Observable#last predicate None

    ✔ Expected: [[object Object]@250] Actual: [OnError(EmptyError: Sequence contains no elements.)@250]
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]

  Observable#last obj predicate none default

    ✔ Expected: [OnNext(42)@250,OnCompleted()@250] Actual: [OnNext(42)@250,OnCompleted()@250]
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]

  Observable#last predicate throw

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [(200, 210)] Actual: [(200, 210)]

  Observable#last predicate throws

    ✔ Expected: [OnError(Error)@230] Actual: [OnError(Error)@230]
    ✔ Expected: [(200, 230)] Actual: [(200, 230)]

  Observable#lastIndexOf empty

    ✔ Expected: [OnNext(-1)@250,OnCompleted()@250] Actual: [OnNext(-1)@250,OnCompleted()@250]

  Observable#lastIndexOf return positive

    ✔ Expected: [OnNext(0)@250,OnCompleted()@250] Actual: [OnNext(0)@250,OnCompleted()@250]

  Observable#lastIndexOf return negative

    ✔ Expected: [OnNext(-1)@250,OnCompleted()@250] Actual: [OnNext(-1)@250,OnCompleted()@250]

  Observable#lastIndexOf some positive

    ✔ Expected: [OnNext(1)@250,OnCompleted()@250] Actual: [OnNext(1)@250,OnCompleted()@250]

  Observable#lastIndexOf some negative

    ✔ Expected: [OnNext(-1)@250,OnCompleted()@250] Actual: [OnNext(-1)@250,OnCompleted()@250]

  Observable#lastIndexOf throw

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#lastIndexOf never

    ✔ Expected: [] Actual: []

  Observable#lastIndexOf fromIndex less than zero

    ✔ Expected: [OnNext(-1)@200,OnCompleted()@200] Actual: [OnNext(-1)@200,OnCompleted()@200]

  Observable#lastIndexOf fromIndex Infinity

    ✔ Expected: [OnNext(0)@250,OnCompleted()@250] Actual: [OnNext(0)@250,OnCompleted()@250]

  Observable#lastIndexOf fromIndex zero

    ✔ Expected: [OnNext(0)@250,OnCompleted()@250] Actual: [OnNext(0)@250,OnCompleted()@250]

  Observable#lastIndexOf fromIndex greater than zero misses

    ✔ Expected: [OnNext(-1)@250,OnCompleted()@250] Actual: [OnNext(-1)@250,OnCompleted()@250]

  Observable#lastIndexOf fromIndex greater than zero no end

    ✔ Expected: [] Actual: []

  Observable#lastIndexOf fromIndex greater than zero hits

    ✔ Expected: [OnNext(1)@250,OnCompleted()@250] Actual: [OnNext(1)@250,OnCompleted()@250]

  Observable#lastIndexOf -0 equals 0

    ✔ Expected: [OnNext(0)@250,OnCompleted()@250] Actual: [OnNext(0)@250,OnCompleted()@250]

  Observable#lastIndexOf +0 equals 0

    ✔ Expected: [OnNext(0)@250,OnCompleted()@250] Actual: [OnNext(0)@250,OnCompleted()@250]

  Observable#lastIndexOf hits the last without end

    ✔ Expected: [OnNext(2)@250,OnCompleted()@250] Actual: [OnNext(2)@250,OnCompleted()@250]

  Observable#lastIndexOf hits the last with end

    ✔ Expected: [OnNext(2)@250,OnCompleted()@250] Actual: [OnNext(2)@250,OnCompleted()@250]

  Observable#map throws

    ✔ should throw
    ✔ should throw
    ✔ should throw
    ✔ should throw

  Observable#map with index dispose inside selector

    ✔ Expected: [OnNext(4)@100,OnNext(13)@200] Actual: [OnNext(4)@100,OnNext(13)@200]
    ✔ Expected: [(0, 500)] Actual: [(0, 500)]
    ✔ should be equal

  Observable#map with index Completed

    ✔ Expected: [OnNext(5)@210,OnNext(14)@240,OnNext(23)@290,OnNext(32)@350,OnCompleted()@400] Actual: [OnNext(5)@210,OnNext(14)@240,OnNext(23)@290,OnNext(32)@350,OnCompleted()@400]
    ✔ Expected: [(200, 400)] Actual: [(200, 400)]
    ✔ should be equal

  Observable#map with index not completed

    ✔ Expected: [OnNext(5)@210,OnNext(14)@240,OnNext(23)@290,OnNext(32)@350] Actual: [OnNext(5)@210,OnNext(14)@240,OnNext(23)@290,OnNext(32)@350]
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]
    ✔ should be equal

  Observable#map with index error

    ✔ Expected: [OnNext(5)@210,OnNext(14)@240,OnNext(23)@290,OnNext(32)@350,OnError(Error)@400] Actual: [OnNext(5)@210,OnNext(14)@240,OnNext(23)@290,OnNext(32)@350,OnError(Error)@400]
    ✔ Expected: [(200, 400)] Actual: [(200, 400)]
    ✔ should be equal

  Observable#map selector throws

    ✔ Expected: [OnNext(5)@210,OnNext(14)@240,OnError(Error)@290] Actual: [OnNext(5)@210,OnNext(14)@240,OnError(Error)@290]
    ✔ Expected: [(200, 290)] Actual: [(200, 290)]
    ✔ should be equal

  Observable#map value

    ✔ Expected: [OnNext(-1)@210,OnNext(-1)@220,OnNext(-1)@230,OnNext(-1)@240,OnCompleted()@250] Actual: [OnNext(-1)@210,OnNext(-1)@220,OnNext(-1)@230,OnNext(-1)@240,OnCompleted()@250]

  Observable#map thisArg

    ✔ should be equal
    ✔ should be equal
    ✔ should be equal
    ✔ should be equal
    ✔ Expected: [OnNext(5)@210,OnNext(14)@240,OnNext(23)@290,OnNext(32)@350,OnCompleted()@400] Actual: [OnNext(5)@210,OnNext(14)@240,OnNext(23)@290,OnNext(32)@350,OnCompleted()@400]
    ✔ Expected: [(200, 400)] Actual: [(200, 400)]
    ✔ should be equal

  Observable#map and map Optimization

    ✔ Expected: [OnNext(3)@230,OnNext(4)@270,OnNext(5)@340,OnNext(6)@380,OnNext(7)@390,OnNext(8)@450,OnNext(9)@470,OnNext(10)@560,OnNext(11)@580,OnCompleted()@600] Actual: [OnNext(3)@230,OnNext(4)@270,OnNext(5)@340,OnNext(6)@380,OnNext(7)@390,OnNext(8)@450,OnNext(9)@470,OnNext(10)@560,OnNext(11)@580,OnCompleted()@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]
    ✔ should be equal
    ✔ should be equal

  Observable#map and map thisArg

    ✔ Expected: [OnNext(11)@210,OnNext(14)@220,OnNext(17)@230,OnNext(20)@240,OnCompleted()@300] Actual: [OnNext(11)@210,OnNext(14)@220,OnNext(17)@230,OnNext(20)@240,OnCompleted()@300]

  Observable#materialize never

    ✔ Expected: [] Actual: []

  Observable#materialize empty

    ✔ Expected: [OnNext(OnCompleted())@250,OnCompleted()@250] Actual: [OnNext(OnCompleted())@250,OnCompleted()@250]

  Observable#materialize return

    ✔ Expected: [OnNext(OnNext(2))@210,OnNext(OnCompleted())@250,OnCompleted()@250] Actual: [OnNext(OnNext(2))@210,OnNext(OnCompleted())@250,OnCompleted()@250]

  Observable#materialize throw

    ✔ Expected: [OnNext(OnError(Error))@250,OnCompleted()@250] Actual: [OnNext(OnError(Error))@250,OnCompleted()@250]

  Observable#materialize dematerialize never

    ✔ Expected: [] Actual: []

  Observable#materialize dematerialize empty

    ✔ Expected: [OnCompleted()@250] Actual: [OnCompleted()@250]

  Observable#materialize dematerialize return

    ✔ Expected: [OnNext(2)@210,OnCompleted()@250] Actual: [OnNext(2)@210,OnCompleted()@250]

  Observable#materialize dematerialize throw

    ✔ Expected: [OnError(Error)@250] Actual: [OnError(Error)@250]

  Observable#max number empty

    ✔ Expected: [[object Object]@250] Actual: [OnError(EmptyError: Sequence contains no elements.)@250]

  Observable#max number Return

    ✔ Expected: [OnNext(2)@250,OnCompleted()@250] Actual: [OnNext(2)@250,OnCompleted()@250]

  Observable#max number Some

    ✔ Expected: [OnNext(4)@250,OnCompleted()@250] Actual: [OnNext(4)@250,OnCompleted()@250]

  Observable#max number throw

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#max number Never

    ✔ Expected: [] Actual: []

  Observable#max comparer empty

    ✔ Expected: [[object Object]@250] Actual: [OnError(EmptyError: Sequence contains no elements.)@250]

  Observable#max comparer return

    ✔ Expected: [OnNext(a)@250,OnCompleted()@250] Actual: [OnNext(a)@250,OnCompleted()@250]

  Observable#max comparer some

    ✔ Expected: [OnNext(a)@250,OnCompleted()@250] Actual: [OnNext(a)@250,OnCompleted()@250]

  Observable#max comparer throw

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#max comparer never

    ✔ Expected: [] Actual: []

  Observable#max comparer throws

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  Observable#maxBy empty

    ✔ Expected: [OnNext()@250,OnCompleted()@250] Actual: [OnNext()@250,OnCompleted()@250]

  Observable#maxBy return

    ✔ Expected: [OnNext([object Object])@250,OnCompleted()@250] Actual: [OnNext([object Object])@250,OnCompleted()@250]

  Observable#maxBy some

    ✔ Expected: [OnNext([object Object])@250,OnCompleted()@250] Actual: [OnNext([object Object])@250,OnCompleted()@250]

  Observable#maxBy multiple

    ✔ Expected: [OnNext([object Object],[object Object])@250,OnCompleted()@250] Actual: [OnNext([object Object],[object Object])@250,OnCompleted()@250]

  Observable#maxBy throw

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#maxBy never

    ✔ Expected: [] Actual: []

  Observable#maxBy comparer empty

    ✔ Expected: [OnNext()@250,OnCompleted()@250] Actual: [OnNext()@250,OnCompleted()@250]

  Observable#maxBy comparer return

    ✔ Expected: [OnNext([object Object])@250,OnCompleted()@250] Actual: [OnNext([object Object])@250,OnCompleted()@250]

  Observable#maxBy comparer some

    ✔ Expected: [OnNext([object Object])@250,OnCompleted()@250] Actual: [OnNext([object Object])@250,OnCompleted()@250]

  Observable#maxBy comparer throw

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#maxBy comparer never

    ✔ Expected: [] Actual: []

  Observable#maxBy selector throws

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#maxBy comparer throws

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  merge never 2

    NeverObservable {}
    NeverObservable {}
    ✔ Expected: [] Actual: []

  merge never 3

    NeverObservable {}
    NeverObservable {}
    NeverObservable {}
    ✔ Expected: [] Actual: []

  merge empty 2

    EmptyObservable { _scheduler: ImmediateScheduler {} }
    EmptyObservable { _scheduler: ImmediateScheduler {} }
    ✔ Expected: [OnCompleted()@203] Actual: [OnCompleted()@203]

  merge empty 3

    EmptyObservable { _scheduler: ImmediateScheduler {} }
    EmptyObservable { _scheduler: ImmediateScheduler {} }
    EmptyObservable { _scheduler: ImmediateScheduler {} }
    ✔ Expected: [OnCompleted()@204] Actual: [OnCompleted()@204]

  merge empty delayed 2 right last

    HotObservable {
      scheduler: 
       TestScheduler {
         clock: 100,
         comparer: [Function: baseComparer],
         isEnabled: true,
         queue: PriorityQueue { items: [Object], length: 6 } },
      messages: 
       [ Recorded { time: 150, value: [Object], comparer: [Function] },
         Recorded { time: 240, value: [Object], comparer: [Function] } ],
      subscriptions: [],
      observers: [] }
    HotObservable {
      scheduler: 
       TestScheduler {
         clock: 100,
         comparer: [Function: baseComparer],
         isEnabled: true,
         queue: PriorityQueue { items: [Object], length: 6 } },
      messages: 
       [ Recorded { time: 150, value: [Object], comparer: [Function] },
         Recorded { time: 250, value: [Object], comparer: [Function] } ],
      subscriptions: [],
      observers: [] }
    ✔ Expected: [OnCompleted()@250] Actual: [OnCompleted()@250]

  merge empty delayed 2 left last

    HotObservable {
      scheduler: 
       TestScheduler {
         clock: 100,
         comparer: [Function: baseComparer],
         isEnabled: true,
         queue: PriorityQueue { items: [Object], length: 6 } },
      messages: 
       [ Recorded { time: 150, value: [Object], comparer: [Function] },
         Recorded { time: 250, value: [Object], comparer: [Function] } ],
      subscriptions: [],
      observers: [] }
    HotObservable {
      scheduler: 
       TestScheduler {
         clock: 100,
         comparer: [Function: baseComparer],
         isEnabled: true,
         queue: PriorityQueue { items: [Object], length: 6 } },
      messages: 
       [ Recorded { time: 150, value: [Object], comparer: [Function] },
         Recorded { time: 240, value: [Object], comparer: [Function] } ],
      subscriptions: [],
      observers: [] }
    ✔ Expected: [OnCompleted()@250] Actual: [OnCompleted()@250]

  merge empty delayed 3 middle last

    HotObservable {
      scheduler: 
       TestScheduler {
         clock: 100,
         comparer: [Function: baseComparer],
         isEnabled: true,
         queue: PriorityQueue { items: [Object], length: 8 } },
      messages: 
       [ Recorded { time: 150, value: [Object], comparer: [Function] },
         Recorded { time: 245, value: [Object], comparer: [Function] } ],
      subscriptions: [],
      observers: [] }
    HotObservable {
      scheduler: 
       TestScheduler {
         clock: 100,
         comparer: [Function: baseComparer],
         isEnabled: true,
         queue: PriorityQueue { items: [Object], length: 8 } },
      messages: 
       [ Recorded { time: 150, value: [Object], comparer: [Function] },
         Recorded { time: 250, value: [Object], comparer: [Function] } ],
      subscriptions: [],
      observers: [] }
    HotObservable {
      scheduler: 
       TestScheduler {
         clock: 100,
         comparer: [Function: baseComparer],
         isEnabled: true,
         queue: PriorityQueue { items: [Object], length: 8 } },
      messages: 
       [ Recorded { time: 150, value: [Object], comparer: [Function] },
         Recorded { time: 240, value: [Object], comparer: [Function] } ],
      subscriptions: [],
      observers: [] }
    ✔ Expected: [OnCompleted()@250] Actual: [OnCompleted()@250]

  merge empty never 

    HotObservable {
      scheduler: 
       TestScheduler {
         clock: 100,
         comparer: [Function: baseComparer],
         isEnabled: true,
         queue: PriorityQueue { items: [Object], length: 4 } },
      messages: 
       [ Recorded { time: 150, value: [Object], comparer: [Function] },
         Recorded { time: 245, value: [Object], comparer: [Function] } ],
      subscriptions: [],
      observers: [] }
    NeverObservable {}
    ✔ Expected: [] Actual: []

  merge never empty

    NeverObservable {}
    HotObservable {
      scheduler: 
       TestScheduler {
         clock: 100,
         comparer: [Function: baseComparer],
         isEnabled: true,
         queue: PriorityQueue { items: [Object], length: 4 } },
      messages: 
       [ Recorded { time: 150, value: [Object], comparer: [Function] },
         Recorded { time: 245, value: [Object], comparer: [Function] } ],
      subscriptions: [],
      observers: [] }
    ✔ Expected: [] Actual: []

  merge return never

    HotObservable {
      scheduler: 
       TestScheduler {
         clock: 100,
         comparer: [Function: baseComparer],
         isEnabled: true,
         queue: PriorityQueue { items: [Object], length: 5 } },
      messages: 
       [ Recorded { time: 150, value: [Object], comparer: [Function] },
         Recorded { time: 210, value: [Object], comparer: [Function] },
         Recorded { time: 245, value: [Object], comparer: [Function] } ],
      subscriptions: [],
      observers: [] }
    NeverObservable {}
    ✔ Expected: [OnNext(2)@210] Actual: [OnNext(2)@210]

  merge never return

    NeverObservable {}
    HotObservable {
      scheduler: 
       TestScheduler {
         clock: 100,
         comparer: [Function: baseComparer],
         isEnabled: true,
         queue: PriorityQueue { items: [Object], length: 5 } },
      messages: 
       [ Recorded { time: 150, value: [Object], comparer: [Function] },
         Recorded { time: 210, value: [Object], comparer: [Function] },
         Recorded { time: 245, value: [Object], comparer: [Function] } ],
      subscriptions: [],
      observers: [] }
    ✔ Expected: [OnNext(2)@210] Actual: [OnNext(2)@210]

  merge Error never 

    HotObservable {
      scheduler: 
       TestScheduler {
         clock: 100,
         comparer: [Function: baseComparer],
         isEnabled: true,
         queue: PriorityQueue { items: [Object], length: 5 } },
      messages: 
       [ Recorded { time: 150, value: [Object], comparer: [Function] },
         Recorded { time: 210, value: [Object], comparer: [Function] },
         Recorded { time: 245, value: [Object], comparer: [Function] } ],
      subscriptions: [],
      observers: [] }
    NeverObservable {}
    ✔ Expected: [OnNext(2)@210,OnError(Error)@245] Actual: [OnNext(2)@210,OnError(Error)@245]

  merge never Error

    NeverObservable {}
    HotObservable {
      scheduler: 
       TestScheduler {
         clock: 100,
         comparer: [Function: baseComparer],
         isEnabled: true,
         queue: PriorityQueue { items: [Object], length: 5 } },
      messages: 
       [ Recorded { time: 150, value: [Object], comparer: [Function] },
         Recorded { time: 210, value: [Object], comparer: [Function] },
         Recorded { time: 245, value: [Object], comparer: [Function] } ],
      subscriptions: [],
      observers: [] }
    ✔ Expected: [OnNext(2)@210,OnError(Error)@245] Actual: [OnNext(2)@210,OnError(Error)@245]

  merge empty return

    HotObservable {
      scheduler: 
       TestScheduler {
         clock: 100,
         comparer: [Function: baseComparer],
         isEnabled: true,
         queue: PriorityQueue { items: [Object], length: 7 } },
      messages: 
       [ Recorded { time: 150, value: [Object], comparer: [Function] },
         Recorded { time: 245, value: [Object], comparer: [Function] } ],
      subscriptions: [],
      observers: [] }
    HotObservable {
      scheduler: 
       TestScheduler {
         clock: 100,
         comparer: [Function: baseComparer],
         isEnabled: true,
         queue: PriorityQueue { items: [Object], length: 7 } },
      messages: 
       [ Recorded { time: 150, value: [Object], comparer: [Function] },
         Recorded { time: 210, value: [Object], comparer: [Function] },
         Recorded { time: 250, value: [Object], comparer: [Function] } ],
      subscriptions: [],
      observers: [] }
    ✔ Expected: [OnNext(2)@210,OnCompleted()@250] Actual: [OnNext(2)@210,OnCompleted()@250]

  merge return empty

    HotObservable {
      scheduler: 
       TestScheduler {
         clock: 100,
         comparer: [Function: baseComparer],
         isEnabled: true,
         queue: PriorityQueue { items: [Object], length: 7 } },
      messages: 
       [ Recorded { time: 150, value: [Object], comparer: [Function] },
         Recorded { time: 210, value: [Object], comparer: [Function] },
         Recorded { time: 250, value: [Object], comparer: [Function] } ],
      subscriptions: [],
      observers: [] }
    HotObservable {
      scheduler: 
       TestScheduler {
         clock: 100,
         comparer: [Function: baseComparer],
         isEnabled: true,
         queue: PriorityQueue { items: [Object], length: 7 } },
      messages: 
       [ Recorded { time: 150, value: [Object], comparer: [Function] },
         Recorded { time: 245, value: [Object], comparer: [Function] } ],
      subscriptions: [],
      observers: [] }
    ✔ Expected: [OnNext(2)@210,OnCompleted()@250] Actual: [OnNext(2)@210,OnCompleted()@250]

  merge lots 2

    HotObservable {
      scheduler: 
       TestScheduler {
         clock: 100,
         comparer: [Function: baseComparer],
         isEnabled: true,
         queue: PriorityQueue { items: [Object], length: 14 } },
      messages: 
       [ Recorded { time: 150, value: [Object], comparer: [Function] },
         Recorded { time: 210, value: [Object], comparer: [Function] },
         Recorded { time: 220, value: [Object], comparer: [Function] },
         Recorded { time: 230, value: [Object], comparer: [Function] },
         Recorded { time: 240, value: [Object], comparer: [Function] },
         Recorded { time: 245, value: [Object], comparer: [Function] } ],
      subscriptions: [],
      observers: [] }
    HotObservable {
      scheduler: 
       TestScheduler {
         clock: 100,
         comparer: [Function: baseComparer],
         isEnabled: true,
         queue: PriorityQueue { items: [Object], length: 14 } },
      messages: 
       [ Recorded { time: 150, value: [Object], comparer: [Function] },
         Recorded { time: 215, value: [Object], comparer: [Function] },
         Recorded { time: 225, value: [Object], comparer: [Function] },
         Recorded { time: 235, value: [Object], comparer: [Function] },
         Recorded { time: 245, value: [Object], comparer: [Function] },
         Recorded { time: 250, value: [Object], comparer: [Function] } ],
      subscriptions: [],
      observers: [] }
    ✔ should be equal
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)

  merge lots 3

    HotObservable {
      scheduler: 
       TestScheduler {
         clock: 100,
         comparer: [Function: baseComparer],
         isEnabled: true,
         queue: PriorityQueue { items: [Object], length: 16 } },
      messages: 
       [ Recorded { time: 150, value: [Object], comparer: [Function] },
         Recorded { time: 210, value: [Object], comparer: [Function] },
         Recorded { time: 225, value: [Object], comparer: [Function] },
         Recorded { time: 240, value: [Object], comparer: [Function] },
         Recorded { time: 245, value: [Object], comparer: [Function] } ],
      subscriptions: [],
      observers: [] }
    HotObservable {
      scheduler: 
       TestScheduler {
         clock: 100,
         comparer: [Function: baseComparer],
         isEnabled: true,
         queue: PriorityQueue { items: [Object], length: 16 } },
      messages: 
       [ Recorded { time: 150, value: [Object], comparer: [Function] },
         Recorded { time: 215, value: [Object], comparer: [Function] },
         Recorded { time: 230, value: [Object], comparer: [Function] },
         Recorded { time: 245, value: [Object], comparer: [Function] },
         Recorded { time: 250, value: [Object], comparer: [Function] } ],
      subscriptions: [],
      observers: [] }
    HotObservable {
      scheduler: 
       TestScheduler {
         clock: 100,
         comparer: [Function: baseComparer],
         isEnabled: true,
         queue: PriorityQueue { items: [Object], length: 16 } },
      messages: 
       [ Recorded { time: 150, value: [Object], comparer: [Function] },
         Recorded { time: 220, value: [Object], comparer: [Function] },
         Recorded { time: 235, value: [Object], comparer: [Function] },
         Recorded { time: 240, value: [Object], comparer: [Function] } ],
      subscriptions: [],
      observers: [] }
    ✔ should be equal
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)

  merge Error left

    HotObservable {
      scheduler: 
       TestScheduler {
         clock: 100,
         comparer: [Function: baseComparer],
         isEnabled: true,
         queue: PriorityQueue { items: [Object], length: 8 } },
      messages: 
       [ Recorded { time: 150, value: [Object], comparer: [Function] },
         Recorded { time: 210, value: [Object], comparer: [Function] },
         Recorded { time: 245, value: [Object], comparer: [Function] } ],
      subscriptions: [],
      observers: [] }
    HotObservable {
      scheduler: 
       TestScheduler {
         clock: 100,
         comparer: [Function: baseComparer],
         isEnabled: true,
         queue: PriorityQueue { items: [Object], length: 8 } },
      messages: 
       [ Recorded { time: 150, value: [Object], comparer: [Function] },
         Recorded { time: 215, value: [Object], comparer: [Function] },
         Recorded { time: 250, value: [Object], comparer: [Function] } ],
      subscriptions: [],
      observers: [] }
    ✔ Expected: [OnNext(2)@210,OnNext(3)@215,OnError(Error)@245] Actual: [OnNext(2)@210,OnNext(3)@215,OnError(Error)@245]

  merge Error causes disposal

    HotObservable {
      scheduler: 
       TestScheduler {
         clock: 100,
         comparer: [Function: baseComparer],
         isEnabled: true,
         queue: PriorityQueue { items: [Object], length: 7 } },
      messages: 
       [ Recorded { time: 150, value: [Object], comparer: [Function] },
         Recorded { time: 210, value: [Object], comparer: [Function] } ],
      subscriptions: [],
      observers: [] }
    TapObservable {
      source: 
       HotObservable {
         scheduler: 
          TestScheduler {
            clock: 100,
            comparer: [Function: baseComparer],
            isEnabled: true,
            queue: [Object] },
         messages: [ [Object], [Object], [Object] ],
         subscriptions: [],
         observers: [] },
      _oN: [Function],
      _oE: undefined,
      _oC: undefined }
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ (unnamed assert)

  Observable#mergeAll Promise

    ✔ (unnamed assert)

  Observable#mergeAll Promise error

    ✔ (unnamed assert)
    ✔ should be equal

  Observable#mergeAll Observable of Observable data

    ✔ Expected: [OnNext(101)@310,OnNext(102)@320,OnNext(103)@410,OnNext(201)@410,OnNext(104)@420,OnNext(202)@420,OnNext(203)@430,OnNext(204)@440,OnNext(105)@510,OnNext(301)@510,OnNext(106)@520,OnNext(302)@520,OnNext(303)@530,OnNext(304)@540,OnNext(305)@620,OnCompleted()@650] Actual: [OnNext(101)@310,OnNext(102)@320,OnNext(103)@410,OnNext(201)@410,OnNext(104)@420,OnNext(202)@420,OnNext(203)@430,OnNext(204)@440,OnNext(105)@510,OnNext(301)@510,OnNext(106)@520,OnNext(302)@520,OnNext(303)@530,OnNext(304)@540,OnNext(305)@620,OnCompleted()@650]

  Observable#mergeAll Observable of Observable data non-overlapped

    ✔ Expected: [OnNext(101)@310,OnNext(102)@320,OnNext(201)@410,OnNext(202)@420,OnNext(203)@430,OnNext(204)@440,OnNext(301)@510,OnNext(302)@520,OnNext(303)@530,OnNext(304)@540,OnCompleted()@600] Actual: [OnNext(101)@310,OnNext(102)@320,OnNext(201)@410,OnNext(202)@420,OnNext(203)@430,OnNext(204)@440,OnNext(301)@510,OnNext(302)@520,OnNext(303)@530,OnNext(304)@540,OnCompleted()@600]

  Observable#mergeAll Observable of Observable inner throws

    ✔ Expected: [OnNext(101)@310,OnNext(102)@320,OnNext(201)@410,OnNext(202)@420,OnNext(203)@430,OnNext(204)@440,OnError(Error)@450] Actual: [OnNext(101)@310,OnNext(102)@320,OnNext(201)@410,OnNext(202)@420,OnNext(203)@430,OnNext(204)@440,OnError(Error)@450]

  Observable#mergeAll Observable of Observable outer throws

    ✔ Expected: [OnNext(101)@310,OnNext(102)@320,OnNext(201)@410,OnNext(202)@420,OnNext(203)@430,OnNext(204)@440,OnError(Error)@500] Actual: [OnNext(101)@310,OnNext(102)@320,OnNext(201)@410,OnNext(202)@420,OnNext(203)@430,OnNext(204)@440,OnError(Error)@500]

  Observable#mergeConcat basic

    ✔ Expected: [OnNext(1)@260,OnNext(4)@280,OnNext(2)@310,OnNext(3)@330,OnNext(5)@330,OnNext(6)@360,OnNext(7)@440,OnNext(8)@460,OnNext(9)@670,OnNext(10)@700,OnCompleted()@760] Actual: [OnNext(1)@260,OnNext(4)@280,OnNext(2)@310,OnNext(3)@330,OnNext(5)@330,OnNext(6)@360,OnNext(7)@440,OnNext(8)@460,OnNext(9)@670,OnNext(10)@700,OnCompleted()@760]
    ✔ Expected: [(200, 760)] Actual: [(200, 760)]

  Observable#mergeConcat basic Long

    ✔ Expected: [OnNext(1)@260,OnNext(4)@280,OnNext(2)@310,OnNext(3)@330,OnNext(5)@330,OnNext(6)@360,OnNext(7)@440,OnNext(8)@460,OnNext(9)@690,OnNext(10)@720,OnCompleted()@780] Actual: [OnNext(1)@260,OnNext(4)@280,OnNext(2)@310,OnNext(3)@330,OnNext(5)@330,OnNext(6)@360,OnNext(7)@440,OnNext(8)@460,OnNext(9)@690,OnNext(10)@720,OnCompleted()@780]
    ✔ Expected: [(200, 780)] Actual: [(200, 780)]

  Observable#mergeConcat basic Wide

    ✔ Expected: [OnNext(1)@260,OnNext(4)@280,OnNext(6)@280,OnNext(2)@310,OnNext(3)@330,OnNext(5)@330,OnNext(7)@360,OnNext(8)@380,OnNext(9)@630,OnNext(10)@660,OnCompleted()@720] Actual: [OnNext(1)@260,OnNext(4)@280,OnNext(6)@280,OnNext(2)@310,OnNext(3)@330,OnNext(5)@330,OnNext(7)@360,OnNext(8)@380,OnNext(9)@630,OnNext(10)@660,OnCompleted()@720]
    ✔ Expected: [(200, 720)] Actual: [(200, 720)]

  Observable#mergeConcat basic late

    ✔ Expected: [OnNext(1)@260,OnNext(4)@280,OnNext(6)@280,OnNext(2)@310,OnNext(3)@330,OnNext(5)@330,OnNext(7)@360,OnNext(8)@380,OnNext(9)@630,OnNext(10)@660,OnCompleted()@750] Actual: [OnNext(1)@260,OnNext(4)@280,OnNext(6)@280,OnNext(2)@310,OnNext(3)@330,OnNext(5)@330,OnNext(7)@360,OnNext(8)@380,OnNext(9)@630,OnNext(10)@660,OnCompleted()@750]
    ✔ Expected: [(200, 750)] Actual: [(200, 750)]

  Observable#mergeConcat disposed

    ✔ Expected: [OnNext(1)@260,OnNext(4)@280,OnNext(2)@310,OnNext(3)@330,OnNext(5)@330,OnNext(6)@360,OnNext(7)@440] Actual: [OnNext(1)@260,OnNext(4)@280,OnNext(2)@310,OnNext(3)@330,OnNext(5)@330,OnNext(6)@360,OnNext(7)@440]
    ✔ Expected: [(200, 450)] Actual: [(200, 450)]

  Observable#mergeConcat inner error

    ✔ Expected: [OnNext(1)@260,OnNext(4)@280,OnNext(2)@310,OnNext(3)@330,OnNext(5)@330,OnNext(6)@360,OnError(Error)@400] Actual: [OnNext(1)@260,OnNext(4)@280,OnNext(2)@310,OnNext(3)@330,OnNext(5)@330,OnNext(6)@360,OnError(Error)@400]
    ✔ Expected: [(200, 400)] Actual: [(200, 400)]

  Observable#mergeConcat outer error

    ✔ Expected: [OnNext(1)@260,OnNext(4)@280,OnNext(2)@310,OnNext(3)@330,OnNext(5)@330,OnNext(6)@360,OnNext(7)@440,OnNext(8)@460,OnError(Error)@490] Actual: [OnNext(1)@260,OnNext(4)@280,OnNext(2)@310,OnNext(3)@330,OnNext(5)@330,OnNext(6)@360,OnNext(7)@440,OnNext(8)@460,OnError(Error)@490]
    ✔ Expected: [(200, 490)] Actual: [(200, 490)]

  Observable#min empty

    ✔ Expected: [[object Object]@250] Actual: [OnError(EmptyError: Sequence contains no elements.)@250]

  Observable#min return

    ✔ Expected: [OnNext(2)@250,OnCompleted()@250] Actual: [OnNext(2)@250,OnCompleted()@250]

  Observable#min some

    ✔ Expected: [OnNext(2)@250,OnCompleted()@250] Actual: [OnNext(2)@250,OnCompleted()@250]

  Observable#min throw

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#min never

    ✔ Expected: [] Actual: []

  Observable#min with comparer empty

    ✔ Expected: [[object Object]@250] Actual: [OnError(EmptyError: Sequence contains no elements.)@250]

  Observable#min with comparer non-empty

    ✔ Expected: [OnNext(c)@250,OnCompleted()@250] Actual: [OnNext(c)@250,OnCompleted()@250]

  Observable#min with comparer throw

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#min with comparer never

    ✔ Expected: [] Actual: []

  Observable#min with comparer throws

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  Observable#minBy empty

    ✔ Expected: [OnNext()@250,OnCompleted()@250] Actual: [OnNext()@250,OnCompleted()@250]

  Observable#minBy return

    ✔ Expected: [OnNext([object Object])@250,OnCompleted()@250] Actual: [OnNext([object Object])@250,OnCompleted()@250]

  Observable#minBy some

    ✔ Expected: [OnNext([object Object])@250,OnCompleted()@250] Actual: [OnNext([object Object])@250,OnCompleted()@250]

  Observable#minBy multiple

    ✔ Expected: [OnNext([object Object],[object Object])@250,OnCompleted()@250] Actual: [OnNext([object Object],[object Object])@250,OnCompleted()@250]

  Observable#minBy throw

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#minBy never

    ✔ Expected: [] Actual: []

  Observable#minBy comparer empty

    ✔ Expected: [OnNext()@250,OnCompleted()@250] Actual: [OnNext()@250,OnCompleted()@250]

  Observable#minBy comparer return

    ✔ Expected: [OnNext([object Object])@250,OnCompleted()@250] Actual: [OnNext([object Object])@250,OnCompleted()@250]

  Observable#minBy comparer some

    ✔ Expected: [OnNext([object Object])@250,OnCompleted()@250] Actual: [OnNext([object Object])@250,OnCompleted()@250]

  Observable#minBy comparer throw

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#minBy comparer never

    ✔ Expected: [] Actual: []

  Observable#minBy selector throws

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#minBy comparer throws

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  Observable#multicast hot 1

    ✔ Expected: [OnNext(3)@210,OnNext(4)@240,OnNext(5)@270] Actual: [OnNext(3)@210,OnNext(4)@240,OnNext(5)@270]
    ✔ Expected: [(200, 390)] Actual: [(200, 390)]

  Observable#multicast hot 2

    ✔ Expected: [OnNext(3)@210,OnNext(4)@240,OnNext(5)@270] Actual: [OnNext(3)@210,OnNext(4)@240,OnNext(5)@270]
    ✔ Expected: [(100, 390)] Actual: [(100, 390)]

  Observable#multicast hot 2

    ✔ Expected: [OnNext(3)@210,OnNext(4)@240,OnNext(5)@270] Actual: [OnNext(3)@210,OnNext(4)@240,OnNext(5)@270]
    ✔ Expected: [(100, 390)] Actual: [(100, 390)]

  Observable#multicast hot 3

    ✔ Expected: [OnNext(3)@210,OnNext(4)@240,OnNext(5)@270,OnNext(7)@340,OnCompleted()@390] Actual: [OnNext(3)@210,OnNext(4)@240,OnNext(5)@270,OnNext(7)@340,OnCompleted()@390]
    ✔ Expected: [(100, 300),(335, 390)] Actual: [(100, 300),(335, 390)]

  Observable#multicast hot 4

    ✔ Expected: [OnNext(3)@210,OnNext(4)@240,OnNext(5)@270,OnNext(7)@340,OnError(Error)@390] Actual: [OnNext(3)@210,OnNext(4)@240,OnNext(5)@270,OnNext(7)@340,OnError(Error)@390]
    ✔ Expected: [(100, 300),(335, 390)] Actual: [(100, 300),(335, 390)]

  Observable#multicast hot 5

    ✔ Expected: [OnError(Error)@400] Actual: [OnError(Error)@400]
    ✔ Expected: [(100, 390)] Actual: [(100, 390)]

  Observable#multicast hot 6

    ✔ Expected: [OnCompleted()@400] Actual: [OnCompleted()@400]
    ✔ Expected: [(100, 390)] Actual: [(100, 390)]

  Observable#multicast cold completed

    ✔ Expected: [OnNext(3)@210,OnNext(4)@240,OnNext(5)@270,OnNext(6)@330,OnNext(7)@340,OnCompleted()@390] Actual: [OnNext(3)@210,OnNext(4)@240,OnNext(5)@270,OnNext(6)@330,OnNext(7)@340,OnCompleted()@390]
    ✔ Expected: [(200, 390)] Actual: [(200, 390)]

  Observable#multicast cold Error

    ✔ Expected: [OnNext(3)@210,OnNext(4)@240,OnNext(5)@270,OnNext(6)@330,OnNext(7)@340,OnError(Error)@390] Actual: [OnNext(3)@210,OnNext(4)@240,OnNext(5)@270,OnNext(6)@330,OnNext(7)@340,OnError(Error)@390]
    ✔ Expected: [(200, 390)] Actual: [(200, 390)]

  Observable#multicast cold dispose

    ✔ Expected: [OnNext(3)@210,OnNext(4)@240,OnNext(5)@270,OnNext(6)@330,OnNext(7)@340] Actual: [OnNext(3)@210,OnNext(4)@240,OnNext(5)@270,OnNext(6)@330,OnNext(7)@340]
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  Observable#multicast cold zip

    ✔ Expected: [OnNext(6)@210,OnNext(8)@240,OnNext(10)@270,OnNext(12)@330,OnNext(14)@340,OnCompleted()@390] Actual: [OnNext(6)@210,OnNext(8)@240,OnNext(10)@270,OnNext(12)@330,OnNext(14)@340,OnCompleted()@390]
    ✔ Expected: [(200, 390)] Actual: [(200, 390)]

  NAryDisposable#constructor

    ✔ should not be disposed
    ✔ first should not be disposed
    ✔ second should not be disposed
    ✔ third should not be disposed

  NAryDisposable#dispose

    ✔ should not be disposed
    ✔ first should not be disposed
    ✔ second should not be disposed
    ✔ third should not be disposed
    ✔ should be disposed
    ✔ first should be disposed
    ✔ second should be disposed
    ✔ third should be disposed
    ✔ should be idempotent
    ✔ first should be idempotent
    ✔ second should be idempotent
    ✔ third should be idempotent

  Observable.never basic

    ✔ Expected: [] Actual: []

  Notification.createOnNextc.constructor

    ✔ should be equal
    ✔ should be equal

  Notification.createOnNext#toString

    ✔ (unnamed assert)
    ✔ (unnamed assert)

  Notification.createOnNext#accept Observer

    ✔ should be equal

  Notification.createOnNext#accept Observer with result

    ✔ should be equal

  Notification.createOnNext#accept action

    ✔ (unnamed assert)

  Notification.createOnNext#accept action with result

    ✔ should be equal

  Notification.createOnError.constructor

    ✔ should be equal
    ✔ should be equal

  Notification.createOnError#toString

    ✔ (unnamed assert)
    ✔ (unnamed assert)

  Notification.createOnError#accept(observer)

    ✔ should be equal

  Notification.createOnError#accept(observer) with result

    ✔ should be equal

  Notification.createOnError#accept(action)

    ✔ (unnamed assert)

  Notification.createOnError#accept(action) with result

    ✔ should be equal

  Notification.createOnCompleted.constructor

    ✔ should be equal

  Notification.createOnCompleted toString

    ✔ (unnamed assert)

  Notification.createOnCompleted#accept(observer)

    ✔ (unnamed assert)

  Notification.createOnCompleted#accept(observer) with result

    ✔ should be equal

  Notification.createOnCompleted#accept(action)

    ✔ (unnamed assert)

  Notification.createOnCompleted#accept(action) with result

    ✔ should be equal

  toObservable empty

    ✔ Expected: [OnCompleted()@201] Actual: [OnCompleted()@201]

  Notification#toObservable just

    ✔ Expected: [OnNext(42)@201,OnCompleted()@201] Actual: [OnNext(42)@201,OnCompleted()@201]

  Notification#toObservable throwError

    ✔ Expected: [OnError(Error)@201] Actual: [OnError(Error)@201]

  Observable#observeOn normal

    ✔ Expected: [OnNext(2)@211,OnCompleted()@251] Actual: [OnNext(2)@211,OnCompleted()@251]
    ✔ Expected: [(200, 251)] Actual: [(200, 251)]

  Observable#observeOn Error

    ✔ Expected: [OnError(Error)@211] Actual: [OnError(Error)@211]
    ✔ Expected: [(200, 211)] Actual: [(200, 211)]

  Observable#observeOn empty

    ✔ Expected: [OnCompleted()@251] Actual: [OnCompleted()@251]
    ✔ Expected: [(200, 251)] Actual: [(200, 251)]

  Observable#observeOn never

    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  fromNotifier notification onNext

    ✔ should be equal
    ✔ should be equal
    ✔ should be equal

  fromNotifier notification onError

    ✔ should be equal
    ✔ should be equal
    ✔ should be equal

  fromNotifier Notification onCompleted

    ✔ should be equal
    ✔ should be equal

  toNotifier forwards

    ✔ should be equal
    ✔ should be equal
    ✔ (unnamed assert)

  Observer.create onNext

    ✔ should be equal
    ✔ (unnamed assert)

  Observer.create OnNext has error

    ✔ should be equal
    ✔ (unnamed assert)
    ✔ should be equal

  Observer.create onNext onCompleted

    ✔ should be equal
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)

  Observer.create onNext onCompleted has error

    ✔ should be equal
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ should be equal
    ✔ (unnamed assert)

  Observer.create onNext onError

    ✔ should be equal
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ should be equal
    ✔ (unnamed assert)

  Observer.create onNext onError hit completed

    ✔ should be equal
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)

  Observer.create onNext onError onCompleted 1

    ✔ should be equal
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)

  Observer.create onNext onError onCompleted 2

    ✔ should be equal
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ should be equal
    ✔ (unnamed assert)
    ✔ (unnamed assert)

  Observer.asObserver hides

    ✔ should not be equal

  asObserver Forwards

    ✔ should be equal
    ✔ should be equal
    ✔ (unnamed assert)

  Observer.checked already terminated completed

    ✔ should throw
    ✔ should throw
    ✔ should be equal
    ✔ should be equal

  Observer.checked already terminated error

    ✔ should throw
    ✔ should throw
    ✔ should be equal
    ✔ should be equal

  Observer.checked re-entrant next

    ✔ should throw
    ✔ should throw
    ✔ should throw
    ✔ should be equal

  Observer.checked re-entrant error

    ✔ should throw
    ✔ should throw
    ✔ should throw
    ✔ should be equal

  Observer.checked re-entrant completed

    ✔ should throw
    ✔ should throw
    ✔ should throw
    ✔ should be equal

  Observable.of

    ✔ Expected: [OnNext(1)@200,OnNext(2)@200,OnNext(3)@200,OnNext(4)@200,OnNext(5)@200,OnCompleted()@200] Actual: [OnNext(1)@200,OnNext(2)@200,OnNext(3)@200,OnNext(4)@200,OnNext(5)@200,OnCompleted()@200]

  Observable.of empty

    ✔ Expected: [OnCompleted()@200] Actual: [OnCompleted()@200]

  Observable.ofScheduled

    ✔ Expected: [OnNext(1)@201,OnNext(2)@202,OnNext(3)@203,OnNext(4)@204,OnNext(5)@205,OnCompleted()@206] Actual: [OnNext(1)@201,OnNext(2)@202,OnNext(3)@203,OnNext(4)@204,OnNext(5)@205,OnCompleted()@206]

  Observable.ofScheduled empty

    ✔ Expected: [OnCompleted()@201] Actual: [OnCompleted()@201]

  Observable.onErrorResumeNext error multiple

    ✔ Expected: [OnNext(2)@210,OnNext(4)@230,OnCompleted()@250] Actual: [OnNext(2)@210,OnNext(4)@230,OnCompleted()@250]

  Observable.onErrorResumeNext empty return throw and more

    ✔ Expected: [OnNext(2)@215,OnNext(3)@225,OnNext(4)@230,OnNext(5)@245,OnCompleted()@250] Actual: [OnNext(2)@215,OnNext(3)@225,OnNext(4)@230,OnNext(5)@245,OnCompleted()@250]

  Observable.onErrorResumeNext single source throws

    ✔ Expected: [OnCompleted()@230] Actual: [OnCompleted()@230]

  Observable.onErrorResumeNext end with never

    ✔ Expected: [OnNext(2)@210] Actual: [OnNext(2)@210]

  Observable.onErrorResumeNext start with never

    ✔ Expected: [] Actual: []

  Observable.onErrorResumeNext no errors

    ✔ Expected: [OnNext(2)@210,OnNext(3)@220,OnNext(4)@240,OnCompleted()@250] Actual: [OnNext(2)@210,OnNext(3)@220,OnNext(4)@240,OnCompleted()@250]

  Observable.onErrorResumeNext error

    ✔ Expected: [OnNext(2)@210,OnNext(3)@220,OnNext(4)@240,OnCompleted()@250] Actual: [OnNext(2)@210,OnNext(3)@220,OnNext(4)@240,OnCompleted()@250]

  Observable.onErrorResumeNext empty return throw and more

    ✔ Expected: [OnNext(2)@210,OnCompleted()@230] Actual: [OnNext(2)@210,OnCompleted()@230]

  Observable.pairs empty

    ✔ Expected: [OnCompleted()@201] Actual: [OnCompleted()@201]

  Observable.pairs normal

    ✔ Expected: [OnNext(foo,42)@201,OnNext(bar,56)@202,OnNext(baz,78)@203,OnCompleted()@204] Actual: [OnNext(foo,42)@201,OnNext(bar,56)@202,OnNext(baz,78)@203,OnCompleted()@204]

  Observable.pairs dispose

    ✔ Expected: [OnNext(foo,42)@201,OnNext(bar,56)@202,OnNext(baz,78)@203] Actual: [OnNext(foo,42)@201,OnNext(bar,56)@202,OnNext(baz,78)@203]

  Observable#pairwise empty

    ✔ Expected: [OnCompleted()@210] Actual: [OnCompleted()@210]
    ✔ Expected: [(200, 210)] Actual: [(200, 210)]

  Observable#pairwise single

    ✔ Expected: [OnCompleted()@220] Actual: [OnCompleted()@220]
    ✔ Expected: [(200, 220)] Actual: [(200, 220)]

  Observable#pairwise completed

    ✔ Expected: [OnNext(4,3)@240,OnNext(3,2)@290,OnNext(2,1)@350,OnCompleted()@360] Actual: [OnNext(4,3)@240,OnNext(3,2)@290,OnNext(2,1)@350,OnCompleted()@360]
    ✔ Expected: [(200, 360)] Actual: [(200, 360)]

  Observable#pairwise not completed

    ✔ Expected: [OnNext(4,3)@240,OnNext(3,2)@290,OnNext(2,1)@350] Actual: [OnNext(4,3)@240,OnNext(3,2)@290,OnNext(2,1)@350]
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  Observable#pairwise error

    ✔ Expected: [OnNext(4,3)@240,OnError(Error)@290] Actual: [OnNext(4,3)@240,OnError(Error)@290]
    ✔ Expected: [(200, 290)] Actual: [(200, 290)]

  Observable#pairwise disposed

    ✔ Expected: [OnNext(4,3)@240] Actual: [OnNext(4,3)@240]
    ✔ Expected: [(200, 280)] Actual: [(200, 280)]

  Observable#partition empty

    ✔ Expected: [OnCompleted()@210] Actual: [OnCompleted()@210]
    ✔ Expected: [OnCompleted()@210] Actual: [OnCompleted()@210]
    ✔ Expected: [(200, 210),(200, 210)] Actual: [(200, 210),(200, 210)]

  Observable#partition single

    ✔ Expected: [OnNext(4)@210,OnCompleted()@220] Actual: [OnNext(4)@210,OnCompleted()@220]
    ✔ Expected: [OnCompleted()@220] Actual: [OnCompleted()@220]
    ✔ Expected: [(200, 220),(200, 220)] Actual: [(200, 220),(200, 220)]

  Observable#partition each

    ✔ Expected: [OnNext(4)@210,OnCompleted()@230] Actual: [OnNext(4)@210,OnCompleted()@230]
    ✔ Expected: [OnNext(3)@220,OnCompleted()@230] Actual: [OnNext(3)@220,OnCompleted()@230]
    ✔ Expected: [(200, 230),(200, 230)] Actual: [(200, 230),(200, 230)]

  Observable#partition completed

    ✔ Expected: [OnNext(4)@210,OnNext(2)@290,OnCompleted()@360] Actual: [OnNext(4)@210,OnNext(2)@290,OnCompleted()@360]
    ✔ Expected: [OnNext(3)@240,OnNext(1)@350,OnCompleted()@360] Actual: [OnNext(3)@240,OnNext(1)@350,OnCompleted()@360]
    ✔ Expected: [(200, 360),(200, 360)] Actual: [(200, 360),(200, 360)]

  Observable#partition not completed

    ✔ Expected: [OnNext(4)@210,OnNext(2)@290] Actual: [OnNext(4)@210,OnNext(2)@290]
    ✔ Expected: [OnNext(3)@240,OnNext(1)@350] Actual: [OnNext(3)@240,OnNext(1)@350]
    ✔ Expected: [(200, 1000),(200, 1000)] Actual: [(200, 1000),(200, 1000)]

  Observable#partition error

    ✔ Expected: [OnNext(4)@210,OnError(Error)@290] Actual: [OnNext(4)@210,OnError(Error)@290]
    ✔ Expected: [OnNext(3)@240,OnError(Error)@290] Actual: [OnNext(3)@240,OnError(Error)@290]
    ✔ Expected: [(200, 290),(200, 290)] Actual: [(200, 290),(200, 290)]

  Observable#partition disposed

    ✔ Expected: [OnNext(4)@210] Actual: [OnNext(4)@210]
    ✔ Expected: [OnNext(3)@240] Actual: [OnNext(3)@240]
    ✔ Expected: [(200, 280),(200, 280)] Actual: [(200, 280),(200, 280)]

  Observable#pluck completed

    ✔ Expected: [OnNext(2)@210,OnNext(3)@240,OnNext(4)@290,OnNext(5)@350,OnCompleted()@400] Actual: [OnNext(2)@210,OnNext(3)@240,OnNext(4)@290,OnNext(5)@350,OnCompleted()@400]
    ✔ Expected: [(200, 400)] Actual: [(200, 400)]

  deep pluck nested completed

    ✔ Expected: [OnNext(2)@210,OnNext(3)@240,OnNext(4)@290,OnNext(5)@350,OnCompleted()@400] Actual: [OnNext(2)@210,OnNext(3)@240,OnNext(4)@290,OnNext(5)@350,OnCompleted()@400]
    ✔ Expected: [(200, 400)] Actual: [(200, 400)]

  deep pluck nested edge cases

    ✔ Expected: [OnNext(undefined)@210,OnNext(undefined)@240,OnNext(undefined)@290,OnNext(5)@350,OnCompleted()@400] Actual: [OnNext(undefined)@210,OnNext(undefined)@240,OnNext(undefined)@290,OnNext(5)@350,OnCompleted()@400]
    ✔ Expected: [(200, 400)] Actual: [(200, 400)]

  Observable#publish Cold Zip

    ✔ Expected: [OnNext(6)@210,OnNext(8)@240,OnNext(10)@270,OnNext(12)@330,OnNext(14)@340,OnCompleted()@390] Actual: [OnNext(6)@210,OnNext(8)@240,OnNext(10)@270,OnNext(12)@330,OnNext(14)@340,OnCompleted()@390]
    ✔ Expected: [(200, 390)] Actual: [(200, 390)]

  ConnectableObservable#refCount connects on first

    ✔ Expected: [OnNext(1)@210,OnNext(2)@220,OnNext(3)@230,OnNext(4)@240,OnCompleted()@250] Actual: [OnNext(1)@210,OnNext(2)@220,OnNext(3)@230,OnNext(4)@240,OnCompleted()@250]
    ✔ (unnamed assert)

  ConnectableObservable#refCount not connected

    ✔ should be equal
    ✔ should be equal
    ✔ (unnamed assert)
    ✔ should be equal
    ✔ should be equal
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ should be equal
    ✔ should be equal
    ✔ (unnamed assert)
    ✔ (unnamed assert)

  Observable#publish basic

    ✔ Expected: [OnNext(8)@340,OnNext(5)@360,OnNext(6)@370,OnNext(7)@390,OnNext(11)@520] Actual: [OnNext(8)@340,OnNext(5)@360,OnNext(6)@370,OnNext(7)@390,OnNext(11)@520]
    ✔ Expected: [(300, 400),(500, 550),(650, 800)] Actual: [(300, 400),(500, 550),(650, 800)]

  Observable#publish Error

    ✔ Expected: [OnNext(8)@340,OnNext(5)@360,OnNext(6)@370,OnNext(7)@390,OnNext(11)@520,OnNext(20)@560,OnError(Error)@600] Actual: [OnNext(8)@340,OnNext(5)@360,OnNext(6)@370,OnNext(7)@390,OnNext(11)@520,OnNext(20)@560,OnError(Error)@600]
    ✔ Expected: [(300, 400),(500, 600)] Actual: [(300, 400),(500, 600)]

  Observable#publish complete

    ✔ Expected: [OnNext(8)@340,OnNext(5)@360,OnNext(6)@370,OnNext(7)@390,OnNext(11)@520,OnNext(20)@560,OnCompleted()@600] Actual: [OnNext(8)@340,OnNext(5)@360,OnNext(6)@370,OnNext(7)@390,OnNext(11)@520,OnNext(20)@560,OnCompleted()@600]
    ✔ Expected: [(300, 400),(500, 600)] Actual: [(300, 400),(500, 600)]

  Observable#publish dispose

    ✔ Expected: [OnNext(8)@340] Actual: [OnNext(8)@340]
    ✔ Expected: [(300, 400),(500, 550),(650, 800)] Actual: [(300, 400),(500, 550),(650, 800)]

  Observable#publish multiple connections

    ✔ (unnamed assert)
    ✔ (unnamed assert)

  Observable#publish function zip complete

    ✔ Expected: [OnNext(7)@280,OnNext(5)@290,OnNext(9)@340,OnNext(13)@360,OnNext(11)@370,OnNext(13)@390,OnNext(20)@410,OnNext(15)@430,OnNext(11)@450,OnNext(20)@520,OnNext(31)@560,OnCompleted()@600] Actual: [OnNext(7)@280,OnNext(5)@290,OnNext(9)@340,OnNext(13)@360,OnNext(11)@370,OnNext(13)@390,OnNext(20)@410,OnNext(15)@430,OnNext(11)@450,OnNext(20)@520,OnNext(31)@560,OnCompleted()@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]

  Observable#publish function zip error

    ✔ Expected: [OnNext(7)@280,OnNext(5)@290,OnNext(9)@340,OnNext(13)@360,OnNext(11)@370,OnNext(13)@390,OnNext(20)@410,OnNext(15)@430,OnNext(11)@450,OnNext(20)@520,OnNext(31)@560,OnError(Error)@600] Actual: [OnNext(7)@280,OnNext(5)@290,OnNext(9)@340,OnNext(13)@360,OnNext(11)@370,OnNext(13)@390,OnNext(20)@410,OnNext(15)@430,OnNext(11)@450,OnNext(20)@520,OnNext(31)@560,OnError(Error)@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]

  Observable#publish function zip dispose

    ✔ Expected: [OnNext(7)@280,OnNext(5)@290,OnNext(9)@340,OnNext(13)@360,OnNext(11)@370,OnNext(13)@390,OnNext(20)@410,OnNext(15)@430,OnNext(11)@450] Actual: [OnNext(7)@280,OnNext(5)@290,OnNext(9)@340,OnNext(13)@360,OnNext(11)@370,OnNext(13)@390,OnNext(20)@410,OnNext(15)@430,OnNext(11)@450]
    ✔ Expected: [(200, 470)] Actual: [(200, 470)]

  Observable#publishLast basic

    ✔ Expected: [] Actual: []
    ✔ Expected: [(300, 400),(500, 550),(650, 800)] Actual: [(300, 400),(500, 550),(650, 800)]

  Observable#publishLast Error

    ✔ Expected: [OnError(Error)@600] Actual: [OnError(Error)@600]
    ✔ Expected: [(300, 400),(500, 600)] Actual: [(300, 400),(500, 600)]

  Observable#publishLast complete

    ✔ Expected: [OnNext(20)@600,OnCompleted()@600] Actual: [OnNext(20)@600,OnCompleted()@600]
    ✔ Expected: [(300, 400),(500, 600)] Actual: [(300, 400),(500, 600)]

  Observable#publishLast dispose

    ✔ Expected: [] Actual: []
    ✔ Expected: [(300, 400),(500, 550),(650, 800)] Actual: [(300, 400),(500, 550),(650, 800)]

  Observable#publishLast multiple connections

    ✔ (unnamed assert)
    ✔ (unnamed assert)

  Observable#publishLast zip complete

    ✔ Expected: [OnNext(40)@600,OnCompleted()@600] Actual: [OnNext(40)@600,OnCompleted()@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]

  Observable#publishLast zip Error

    ✔ Expected: [OnError(Error)@600] Actual: [OnError(Error)@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]

  Observable#publishLast zip dispose

    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 470)] Actual: [(200, 470)]

  Observable.range zero

    ✔ Expected: [OnCompleted()@201] Actual: [OnCompleted()@201]

  Observable.range one

    ✔ Expected: [OnNext(0)@201,OnCompleted()@202] Actual: [OnNext(0)@201,OnCompleted()@202]

  Observable.range five

    ✔ Expected: [OnNext(10)@201,OnNext(11)@202,OnNext(12)@203,OnNext(13)@204,OnNext(14)@205,OnCompleted()@206] Actual: [OnNext(10)@201,OnNext(11)@202,OnNext(12)@203,OnNext(13)@204,OnNext(14)@205,OnCompleted()@206]

  Observable.range dispose

    ✔ Expected: [OnNext(-10)@201,OnNext(-9)@202,OnNext(-8)@203] Actual: [OnNext(-10)@201,OnNext(-9)@202,OnNext(-8)@203]

  Observable#reduce with seed empty

    ✔ Expected: [OnNext(42)@250,OnCompleted()@250] Actual: [OnNext(42)@250,OnCompleted()@250]

  Observable#reduce with seed return

    ✔ Expected: [OnNext(66)@250,OnCompleted()@250] Actual: [OnNext(66)@250,OnCompleted()@250]

  Observable#reduce with seed throws error

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#reduce with seed throw

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#reduce with seed never

    ✔ Expected: [] Actual: []

  Observable#reduce with seed range

    ✔ Expected: [OnNext(52)@260,OnCompleted()@260] Actual: [OnNext(52)@260,OnCompleted()@260]

  Observable#reduce without seed empty

    ✔ Expected: [[object Object]@250] Actual: [OnError(EmptyError: Sequence contains no elements.)@250]

  Observable#reduce without seed return

    ✔ Expected: [OnNext(24)@250,OnCompleted()@250] Actual: [OnNext(24)@250,OnCompleted()@250]

  Observable#reduce without seed throw

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#reduce without seed never

    ✔ Expected: [] Actual: []

  Observable#reduce without seed range

    ✔ Expected: [OnNext(10)@260,OnCompleted()@260] Actual: [OnNext(10)@260,OnCompleted()@260]

  Observable#reduce without seed throws error

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  RefCountDisposable single reference

    ✔ should not be disposed
    ✔ should be disposed
    ✔ should still be disposed

  RefCountDisposable ref counting

    ✔ should not be disposed
    ✔ after two getDisposable() calls should not be disposed
    ✔ after one dispose() should not be disposed
    ✔ after two dispose() should be disposed
    ✔ the outer should be disposed
    ✔ the ref counted should be disposed

  RefCountDisposable primary disposes first

    ✔ should not be disposed after creation
    ✔ should not be disposed after two getDisposable() calls
    ✔ should not be disposed after one dispose() call
    ✔ should not dispose outer if inner has refs
    ✔ should dispose outer if dispose() called twice

  ReplaySubject Infinite

    ✔ Expected: [OnNext(3)@301,OnNext(4)@302,OnNext(5)@341,OnNext(6)@411,OnNext(7)@521] Actual: [OnNext(3)@301,OnNext(4)@302,OnNext(5)@341,OnNext(6)@411,OnNext(7)@521]
    ✔ Expected: [OnNext(5)@401,OnNext(6)@411,OnNext(7)@521,OnNext(8)@631] Actual: [OnNext(5)@401,OnNext(6)@411,OnNext(7)@521,OnNext(8)@631]
    ✔ Expected: [OnNext(10)@901,OnNext(11)@941] Actual: [OnNext(10)@901,OnNext(11)@941]

  ReplaySubject Infinite 2

    ✔ Expected: [OnNext(4)@301,OnNext(-1)@302,OnNext(-2)@303,OnNext(5)@341,OnNext(6)@411,OnNext(7)@521] Actual: [OnNext(4)@301,OnNext(-1)@302,OnNext(-2)@303,OnNext(5)@341,OnNext(6)@411,OnNext(7)@521]
    ✔ Expected: [OnNext(5)@401,OnNext(6)@411,OnNext(7)@521,OnNext(8)@631] Actual: [OnNext(5)@401,OnNext(6)@411,OnNext(7)@521,OnNext(8)@631]
    ✔ Expected: [OnNext(10)@901,OnNext(11)@941] Actual: [OnNext(10)@901,OnNext(11)@941]

  ReplaySubject Finite

    ✔ Expected: [OnNext(3)@301,OnNext(4)@302,OnNext(5)@341,OnNext(6)@411,OnNext(7)@521] Actual: [OnNext(3)@301,OnNext(4)@302,OnNext(5)@341,OnNext(6)@411,OnNext(7)@521]
    ✔ Expected: [OnNext(5)@401,OnNext(6)@411,OnNext(7)@521,OnCompleted()@631] Actual: [OnNext(5)@401,OnNext(6)@411,OnNext(7)@521,OnCompleted()@631]
    ✔ Expected: [OnCompleted()@901] Actual: [OnCompleted()@901]

  ReplaySubject Error

    ✔ Expected: [OnNext(3)@301,OnNext(4)@302,OnNext(5)@341,OnNext(6)@411,OnNext(7)@521] Actual: [OnNext(3)@301,OnNext(4)@302,OnNext(5)@341,OnNext(6)@411,OnNext(7)@521]
    ✔ Expected: [OnNext(5)@401,OnNext(6)@411,OnNext(7)@521,OnError(Error)@631] Actual: [OnNext(5)@401,OnNext(6)@411,OnNext(7)@521,OnError(Error)@631]
    ✔ Expected: [OnError(Error)@901] Actual: [OnError(Error)@901]

  ReplaySubject Canceled

    ✔ Expected: [] Actual: []
    ✔ Expected: [OnCompleted()@631] Actual: [OnCompleted()@631]
    ✔ Expected: [OnCompleted()@901] Actual: [OnCompleted()@901]

  ReplaySubject Disposed

    ✔ should throw
    ✔ should throw
    ✔ should throw
    ✔ should throw
    ✔ Expected: [OnNext(1)@201,OnNext(2)@251,OnNext(3)@351,OnNext(4)@451] Actual: [OnNext(1)@201,OnNext(2)@251,OnNext(3)@351,OnNext(4)@451]
    ✔ Expected: [OnNext(1)@301,OnNext(2)@302,OnNext(3)@351,OnNext(4)@451,OnNext(5)@551] Actual: [OnNext(1)@301,OnNext(2)@302,OnNext(3)@351,OnNext(4)@451,OnNext(5)@551]
    ✔ Expected: [OnNext(1)@401,OnNext(2)@402,OnNext(3)@403,OnNext(4)@451,OnNext(5)@551] Actual: [OnNext(1)@401,OnNext(2)@402,OnNext(3)@403,OnNext(4)@451,OnNext(5)@551]

  ReplaySubject Dies out

    ✔ Expected: [OnNext(3)@301,OnNext(4)@302,OnNext(5)@341,OnNext(6)@411,OnNext(7)@521,OnCompleted()@581] Actual: [OnNext(3)@301,OnNext(4)@302,OnNext(5)@341,OnNext(6)@411,OnNext(7)@521,OnCompleted()@581]
    ✔ Expected: [OnNext(5)@401,OnNext(6)@411,OnNext(7)@521,OnCompleted()@581] Actual: [OnNext(5)@401,OnNext(6)@411,OnNext(7)@521,OnCompleted()@581]
    ✔ Expected: [OnNext(7)@601,OnCompleted()@602] Actual: [OnNext(7)@601,OnCompleted()@602]
    ✔ Expected: [OnCompleted()@901] Actual: [OnCompleted()@901]

  Observable#sample regular

    ✔ Expected: [OnNext(3)@250,OnNext(5)@300,OnNext(6)@350,OnNext(7)@400,OnCompleted()@400] Actual: [OnNext(3)@250,OnNext(5)@300,OnNext(6)@350,OnNext(7)@400,OnCompleted()@400]

  Observable#sample error in flight

    ✔ Expected: [OnNext(3)@250,OnNext(5)@300,OnError(Error)@330] Actual: [OnNext(3)@250,OnNext(5)@300,OnError(Error)@330]

  Observable#sample empty

    ✔ Expected: [OnCompleted()@250] Actual: [OnCompleted()@250]

  Observable#sample Error

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#sample never

    ✔ Expected: [] Actual: []

  Observable#sample sampler simple 1

    ✔ Expected: [OnNext(3)@250,OnNext(6)@320,OnCompleted()@500] Actual: [OnNext(3)@250,OnNext(6)@320,OnCompleted()@500]
    ✔ Expected: [(200, 400)] Actual: [(200, 400)]
    ✔ Expected: [(200, 500)] Actual: [(200, 500)]

  Observable#sample sampler simple 2

    ✔ Expected: [OnNext(3)@250,OnNext(6)@320,OnNext(7)@500,OnCompleted()@500] Actual: [OnNext(3)@250,OnNext(6)@320,OnNext(7)@500,OnCompleted()@500]
    ✔ Expected: [(200, 400)] Actual: [(200, 400)]
    ✔ Expected: [(200, 500)] Actual: [(200, 500)]

  Observable#sample sampler simple 3

    ✔ Expected: [OnNext(3)@250,OnNext(4)@320,OnCompleted()@320] Actual: [OnNext(3)@250,OnNext(4)@320,OnCompleted()@320]
    ✔ Expected: [(200, 300)] Actual: [(200, 300)]
    ✔ Expected: [(200, 320)] Actual: [(200, 320)]

  Observable#sample completes if earlier completes

    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 300)] Actual: [(200, 300)]
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  Observable#sample sampler source throws

    ✔ Expected: [OnNext(3)@250,OnError(Error)@320] Actual: [OnNext(3)@250,OnError(Error)@320]
    ✔ Expected: [(200, 320)] Actual: [(200, 320)]
    ✔ Expected: [(200, 320)] Actual: [(200, 320)]

  Observable#scan with seed throws error

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#scan with seed never

    ✔ Expected: [] Actual: []

  Observable#scan with seed empty

    ✔ Expected: [OnNext(42)@250,OnCompleted()@250] Actual: [OnNext(42)@250,OnCompleted()@250]

  Observable#scan with seed return

    ✔ Expected: [OnNext(44)@220,OnCompleted()@250] Actual: [OnNext(44)@220,OnCompleted()@250]

  Observable#scan with seed throw

    ✔ Expected: [OnError(Error)@250] Actual: [OnError(Error)@250]

  Observable#scan with seed some data

    ✔ Expected: [OnNext(3)@210,OnNext(6)@220,OnNext(10)@230,OnNext(15)@240,OnCompleted()@250] Actual: [OnNext(3)@210,OnNext(6)@220,OnNext(10)@230,OnNext(15)@240,OnCompleted()@250]

  Observable#scan no seed never

    ✔ Expected: [] Actual: []

  Observable#scan no seed empty

    ✔ Expected: [OnCompleted()@250] Actual: [OnCompleted()@250]

  Observable#scan no seed return

    ✔ Expected: [OnNext(2)@220,OnCompleted()@250] Actual: [OnNext(2)@220,OnCompleted()@250]

  Observable#scan no seed throw

    ✔ Expected: [OnError(Error)@250] Actual: [OnError(Error)@250]

  Observable#scan no seed some data

    ✔ Expected: [OnNext(2)@210,OnNext(5)@220,OnNext(9)@230,OnNext(14)@240,OnCompleted()@250] Actual: [OnNext(2)@210,OnNext(5)@220,OnNext(9)@230,OnNext(14)@240,OnCompleted()@250]

  Observable#scan without seed throws error

    ✔ Expected: [OnNext(2)@210,OnError(Error)@220] Actual: [OnNext(2)@210,OnError(Error)@220]

  scheduler schedule non-recursive

    ✔ (unnamed assert)

  scheduler schedule recursive

    ✔ should be equal

  scheduler schedule with time non-recursive

    ✔ (unnamed assert)
    ✔ should be equal

  scheduler schedule with absolute time recursive

    ✔ should be equal
    ✔ should be equal

  scheduler schedule with relative time non-recursive

    ✔ (unnamed assert)
    ✔ should be equal

  scheduler schedule with time recursive

    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ should be equal
    ✔ should be equal

  catch builtin swallow shallow

    ✔ (unnamed assert)

  catch builtin swallow recursive

    ✔ (unnamed assert)

  catch custom unhandled

    ✔ (unnamed assert)
    ✔ should be equal

  catch custom periodic caught

    ✔ (unnamed assert)

  catch custom periodic uncaught

    ✔ should be equal

  SerialDisposable#constructor

    ✔ should not have a disposable

  SerialDisposable replace before dispose()

    ✔ should have a disposable set
    ✔ should not be disposed
    ✔ should have a new disposable set
    ✔ first should be disposed
    ✔ next should not be disposed

  SerialDisposable replace after dispose

    ✔ should not have a set disposable after dispose
    ✔ should be disposed
    ✔ should not have a set disposable after dispose
    ✔ should be disposed

  SerialDisposable#dispose

    ✔ should have set the disposable
    ✔ should not be disposed before dispose()
    ✔ should be disposed after dispose()
    ✔ should clear the current disposable

  SingleAssignmentDisposable setDisposable null

    ✔ getDisposable should return null

  SingleAssignmentDisposable dispose after set

    ✔ should have set the disposable via setDisposable
    ✔ should not be disposed
    ✔ should be disposed after dispose()
    ✔ should be idempotent after dispose()

  SingleAssignmentDisposable dispose before setDisposable

    ✔ should not be disposed
    ✔ should not be disposed after disposed
    ✔ should not set disposable
    ✔ should be disposed after setDisposable
    ✔ calling dispose should dispose idempotent

  Observable#skip complete after

    ✔ Expected: [OnCompleted()@690] Actual: [OnCompleted()@690]
    ✔ Expected: [(200, 690)] Actual: [(200, 690)]

  Observable#skip complete same

    ✔ Expected: [OnCompleted()@690] Actual: [OnCompleted()@690]
    ✔ Expected: [(200, 690)] Actual: [(200, 690)]

  Observable#skip complete before

    ✔ Expected: [OnNext(72)@460,OnNext(76)@510,OnNext(32)@560,OnNext(-100)@570,OnNext(-3)@580,OnNext(5)@590,OnNext(10)@630,OnCompleted()@690] Actual: [OnNext(72)@460,OnNext(76)@510,OnNext(32)@560,OnNext(-100)@570,OnNext(-3)@580,OnNext(5)@590,OnNext(10)@630,OnCompleted()@690]
    ✔ Expected: [(200, 690)] Actual: [(200, 690)]

  Observable#skip complete zero

    ✔ Expected: [OnNext(9)@210,OnNext(13)@230,OnNext(7)@270,OnNext(1)@280,OnNext(-1)@300,OnNext(3)@310,OnNext(8)@340,OnNext(11)@370,OnNext(15)@410,OnNext(16)@415,OnNext(72)@460,OnNext(76)@510,OnNext(32)@560,OnNext(-100)@570,OnNext(-3)@580,OnNext(5)@590,OnNext(10)@630,OnCompleted()@690] Actual: [OnNext(9)@210,OnNext(13)@230,OnNext(7)@270,OnNext(1)@280,OnNext(-1)@300,OnNext(3)@310,OnNext(8)@340,OnNext(11)@370,OnNext(15)@410,OnNext(16)@415,OnNext(72)@460,OnNext(76)@510,OnNext(32)@560,OnNext(-100)@570,OnNext(-3)@580,OnNext(5)@590,OnNext(10)@630,OnCompleted()@690]
    ✔ Expected: [(200, 690)] Actual: [(200, 690)]

  Observable#skip error after

    ✔ Expected: [OnError(Error)@690] Actual: [OnError(Error)@690]
    ✔ Expected: [(200, 690)] Actual: [(200, 690)]

  Observable#skip error same

    ✔ Expected: [OnError(Error)@690] Actual: [OnError(Error)@690]
    ✔ Expected: [(200, 690)] Actual: [(200, 690)]

  Observable#skip error before

    ✔ Expected: [OnNext(1)@280,OnNext(-1)@300,OnNext(3)@310,OnNext(8)@340,OnNext(11)@370,OnNext(15)@410,OnNext(16)@415,OnNext(72)@460,OnNext(76)@510,OnNext(32)@560,OnNext(-100)@570,OnNext(-3)@580,OnNext(5)@590,OnNext(10)@630,OnError(Error)@690] Actual: [OnNext(1)@280,OnNext(-1)@300,OnNext(3)@310,OnNext(8)@340,OnNext(11)@370,OnNext(15)@410,OnNext(16)@415,OnNext(72)@460,OnNext(76)@510,OnNext(32)@560,OnNext(-100)@570,OnNext(-3)@580,OnNext(5)@590,OnNext(10)@630,OnError(Error)@690]
    ✔ Expected: [(200, 690)] Actual: [(200, 690)]

  Observable#skip dispose before

    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]

  Observable#skip dispose after

    ✔ Expected: [OnNext(1)@280,OnNext(-1)@300,OnNext(3)@310,OnNext(8)@340,OnNext(11)@370] Actual: [OnNext(1)@280,OnNext(-1)@300,OnNext(3)@310,OnNext(8)@340,OnNext(11)@370]
    ✔ Expected: [(200, 400)] Actual: [(200, 400)]

  Observable#skipLast zero completed

    ✔ Expected: [OnNext(2)@210,OnNext(3)@250,OnNext(4)@270,OnNext(5)@310,OnNext(6)@360,OnNext(7)@380,OnNext(8)@410,OnNext(9)@590,OnCompleted()@650] Actual: [OnNext(2)@210,OnNext(3)@250,OnNext(4)@270,OnNext(5)@310,OnNext(6)@360,OnNext(7)@380,OnNext(8)@410,OnNext(9)@590,OnCompleted()@650]
    ✔ Expected: [(200, 650)] Actual: [(200, 650)]

  Observable#skipLast zero error

    ✔ Expected: [OnNext(2)@210,OnNext(3)@250,OnNext(4)@270,OnNext(5)@310,OnNext(6)@360,OnNext(7)@380,OnNext(8)@410,OnNext(9)@590,OnError(Error)@650] Actual: [OnNext(2)@210,OnNext(3)@250,OnNext(4)@270,OnNext(5)@310,OnNext(6)@360,OnNext(7)@380,OnNext(8)@410,OnNext(9)@590,OnError(Error)@650]
    ✔ Expected: [(200, 650)] Actual: [(200, 650)]

  Observable#skipLast zero disposed

    ✔ Expected: [OnNext(2)@210,OnNext(3)@250,OnNext(4)@270,OnNext(5)@310,OnNext(6)@360,OnNext(7)@380,OnNext(8)@410,OnNext(9)@590] Actual: [OnNext(2)@210,OnNext(3)@250,OnNext(4)@270,OnNext(5)@310,OnNext(6)@360,OnNext(7)@380,OnNext(8)@410,OnNext(9)@590]
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  Observable#skipLast one completed

    ✔ Expected: [OnNext(2)@250,OnNext(3)@270,OnNext(4)@310,OnNext(5)@360,OnNext(6)@380,OnNext(7)@410,OnNext(8)@590,OnCompleted()@650] Actual: [OnNext(2)@250,OnNext(3)@270,OnNext(4)@310,OnNext(5)@360,OnNext(6)@380,OnNext(7)@410,OnNext(8)@590,OnCompleted()@650]
    ✔ Expected: [(200, 650)] Actual: [(200, 650)]

  Observable#skipLast one error

    ✔ Expected: [OnNext(2)@250,OnNext(3)@270,OnNext(4)@310,OnNext(5)@360,OnNext(6)@380,OnNext(7)@410,OnNext(8)@590,OnError(Error)@650] Actual: [OnNext(2)@250,OnNext(3)@270,OnNext(4)@310,OnNext(5)@360,OnNext(6)@380,OnNext(7)@410,OnNext(8)@590,OnError(Error)@650]
    ✔ Expected: [(200, 650)] Actual: [(200, 650)]

  Observable#skipLast one disposed

    ✔ Expected: [OnNext(2)@250,OnNext(3)@270,OnNext(4)@310,OnNext(5)@360,OnNext(6)@380,OnNext(7)@410,OnNext(8)@590] Actual: [OnNext(2)@250,OnNext(3)@270,OnNext(4)@310,OnNext(5)@360,OnNext(6)@380,OnNext(7)@410,OnNext(8)@590]
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  Observable#skipLast three completed

    ✔ Expected: [OnNext(2)@310,OnNext(3)@360,OnNext(4)@380,OnNext(5)@410,OnNext(6)@590,OnCompleted()@650] Actual: [OnNext(2)@310,OnNext(3)@360,OnNext(4)@380,OnNext(5)@410,OnNext(6)@590,OnCompleted()@650]
    ✔ Expected: [(200, 650)] Actual: [(200, 650)]

  Observable#skipLast three error

    ✔ Expected: [OnNext(2)@310,OnNext(3)@360,OnNext(4)@380,OnNext(5)@410,OnNext(6)@590,OnError(Error)@650] Actual: [OnNext(2)@310,OnNext(3)@360,OnNext(4)@380,OnNext(5)@410,OnNext(6)@590,OnError(Error)@650]
    ✔ Expected: [(200, 650)] Actual: [(200, 650)]

  Observable#skipLast three disposed

    ✔ Expected: [OnNext(2)@310,OnNext(3)@360,OnNext(4)@380,OnNext(5)@410,OnNext(6)@590] Actual: [OnNext(2)@310,OnNext(3)@360,OnNext(4)@380,OnNext(5)@410,OnNext(6)@590]
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  Observable#skipLastWithTime zero 1

    ✔ Expected: [OnNext(1)@210,OnNext(2)@220,OnCompleted()@230] Actual: [OnNext(1)@210,OnNext(2)@220,OnCompleted()@230]
    ✔ Expected: [(200, 230)] Actual: [(200, 230)]

  Observable#skipLastWithTime zero 2

    ✔ Expected: [OnNext(1)@210,OnNext(2)@220,OnNext(3)@230,OnCompleted()@230] Actual: [OnNext(1)@210,OnNext(2)@220,OnNext(3)@230,OnCompleted()@230]
    ✔ Expected: [(200, 230)] Actual: [(200, 230)]

  Observable#skipLastWithTime some 1

    ✔ Expected: [OnNext(1)@230,OnCompleted()@230] Actual: [OnNext(1)@230,OnCompleted()@230]
    ✔ Expected: [(200, 230)] Actual: [(200, 230)]

  Observable#skipLastWithTime some 2

    ✔ Expected: [OnNext(1)@260,OnNext(2)@270,OnNext(3)@280,OnNext(4)@290,OnNext(5)@300,OnCompleted()@300] Actual: [OnNext(1)@260,OnNext(2)@270,OnNext(3)@280,OnNext(4)@290,OnNext(5)@300,OnCompleted()@300]
    ✔ Expected: [(200, 300)] Actual: [(200, 300)]

  Observable#skipLastWithTime some all

    ✔ Expected: [OnCompleted()@230] Actual: [OnCompleted()@230]
    ✔ Expected: [(200, 230)] Actual: [(200, 230)]

  Observable#skipLastWithTime error

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [(200, 210)] Actual: [(200, 210)]

  Observable#skipLastWithTime never

    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  Observable#skipUntil some data next

    ✔ Expected: [OnNext(4)@230,OnNext(5)@240,OnCompleted()@250] Actual: [OnNext(4)@230,OnNext(5)@240,OnCompleted()@250]

  Observable#skipUntil some data error

    ✔ Expected: [OnError(Error)@225] Actual: [OnError(Error)@225]

  Observable#skipUntil some data empty

    ✔ Expected: [] Actual: []

  Observable#skipUntil never next

    ✔ Expected: [] Actual: []

  Observable#skipUntil never error

    ✔ Expected: [OnError(Error)@225] Actual: [OnError(Error)@225]

  Observable#skipUntil some data never

    ✔ Expected: [] Actual: []

  Observable#skipUntil never empty

    ✔ Expected: [] Actual: []

  Observable#skipUntil never never

    ✔ Expected: [] Actual: []

  Observable#skipUntil has completed causes disposal

    ✔ Expected: [] Actual: []
    ✔ (unnamed assert)

  Observable#skipUntilWithTime zero

    ✔ Expected: [OnNext(1)@210,OnNext(2)@220,OnCompleted()@230] Actual: [OnNext(1)@210,OnNext(2)@220,OnCompleted()@230]
    ✔ Expected: [(200, 230)] Actual: [(200, 230)]

  Observable#skipUntilWithTime late

    ✔ Expected: [OnCompleted()@230] Actual: [OnCompleted()@230]
    ✔ Expected: [(200, 230)] Actual: [(200, 230)]

  Observable#skipUntilWithTime error

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [(200, 210)] Actual: [(200, 210)]

  Observable#skipUntilWithTime never

    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  Observable#skipUntil twice 1

    ✔ Expected: [OnNext(4)@240,OnNext(5)@250,OnNext(6)@260,OnCompleted()@270] Actual: [OnNext(4)@240,OnNext(5)@250,OnNext(6)@260,OnCompleted()@270]
    ✔ Expected: [(200, 270)] Actual: [(200, 270)]

  Observable#skipUntil twice 2

    ✔ Expected: [OnNext(4)@240,OnNext(5)@250,OnNext(6)@260,OnCompleted()@270] Actual: [OnNext(4)@240,OnNext(5)@250,OnNext(6)@260,OnCompleted()@270]
    ✔ Expected: [(200, 270)] Actual: [(200, 270)]

  Observable#skipWhile complete before

    ✔ Expected: [OnCompleted()@330] Actual: [OnCompleted()@330]
    ✔ Expected: [(200, 330)] Actual: [(200, 330)]
    ✔ should be equal

  Observable#skipWhile complete after

    ✔ Expected: [OnNext(4)@390,OnNext(17)@410,OnNext(8)@450,OnNext(23)@500,OnCompleted()@600] Actual: [OnNext(4)@390,OnNext(17)@410,OnNext(8)@450,OnNext(23)@500,OnCompleted()@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]
    ✔ should be equal

  Observable#skipWhile error before

    ✔ Expected: [OnError(Error)@270] Actual: [OnError(Error)@270]
    ✔ Expected: [(200, 270)] Actual: [(200, 270)]
    ✔ should be equal

  Observable#skipWhile error after

    ✔ Expected: [OnNext(4)@390,OnNext(17)@410,OnNext(8)@450,OnNext(23)@500,OnError(Error)@600] Actual: [OnNext(4)@390,OnNext(17)@410,OnNext(8)@450,OnNext(23)@500,OnError(Error)@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]
    ✔ should be equal

  Observable#skipWhile dispose before

    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 300)] Actual: [(200, 300)]
    ✔ should be equal

  Observable#skipWhile dispose after

    ✔ Expected: [OnNext(4)@390,OnNext(17)@410,OnNext(8)@450] Actual: [OnNext(4)@390,OnNext(17)@410,OnNext(8)@450]
    ✔ Expected: [(200, 470)] Actual: [(200, 470)]
    ✔ should be equal

  Observable#skipWhile zero

    ✔ Expected: [OnNext(100)@205,OnNext(2)@210,OnNext(5)@260,OnNext(13)@290,OnNext(3)@320,OnNext(7)@350,OnNext(4)@390,OnNext(17)@410,OnNext(8)@450,OnNext(23)@500,OnCompleted()@600] Actual: [OnNext(100)@205,OnNext(2)@210,OnNext(5)@260,OnNext(13)@290,OnNext(3)@320,OnNext(7)@350,OnNext(4)@390,OnNext(17)@410,OnNext(8)@450,OnNext(23)@500,OnCompleted()@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]
    ✔ should be equal

  Observable#skipWhile throw

    ✔ Expected: [OnError(Error)@290] Actual: [OnError(Error)@290]
    ✔ Expected: [(200, 290)] Actual: [(200, 290)]
    ✔ should be equal

  Observable#skipWhile index

    ✔ Expected: [OnNext(4)@390,OnNext(17)@410,OnNext(8)@450,OnNext(23)@500,OnCompleted()@600] Actual: [OnNext(4)@390,OnNext(17)@410,OnNext(8)@450,OnNext(23)@500,OnCompleted()@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]

  Observable#skipWithTime zero

    ✔ Expected: [OnNext(1)@210,OnNext(2)@220,OnCompleted()@230] Actual: [OnNext(1)@210,OnNext(2)@220,OnCompleted()@230]
    ✔ Expected: [(200, 230)] Actual: [(200, 230)]

  Observable#skipWithTime some

    ✔ Expected: [OnNext(2)@220,OnCompleted()@230] Actual: [OnNext(2)@220,OnCompleted()@230]
    ✔ Expected: [(200, 230)] Actual: [(200, 230)]

  Observable#skipWithTime late

    ✔ Expected: [OnCompleted()@230] Actual: [OnCompleted()@230]
    ✔ Expected: [(200, 230)] Actual: [(200, 230)]

  Observable#skipWithTime error

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [(200, 210)] Actual: [(200, 210)]

  Observable#skipWithTime never

    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  Observable#skipWithTime twice 1

    ✔ Expected: [OnNext(4)@240,OnNext(5)@250,OnNext(6)@260,OnCompleted()@270] Actual: [OnNext(4)@240,OnNext(5)@250,OnNext(6)@260,OnCompleted()@270]
    ✔ Expected: [(200, 270)] Actual: [(200, 270)]

  Observable#skipWithTime twice 2

    ✔ Expected: [OnNext(4)@240,OnNext(5)@250,OnNext(6)@260,OnCompleted()@270] Actual: [OnNext(4)@240,OnNext(5)@250,OnNext(6)@260,OnCompleted()@270]
    ✔ Expected: [(200, 270)] Actual: [(200, 270)]

  Observable#slice arguments

    ✔ should throw
    ✔ should throw
    ✔ should throw

  Observable#slice never

    ✔ Expected: [] Actual: []

  Observable#slice empty

    ✔ Expected: [OnCompleted()@250] Actual: [OnCompleted()@250]

  Observable#slice error

    ✔ Expected: [OnError(Error)@250] Actual: [OnError(Error)@250]

  Observable#slice single no end

    ✔ Expected: [OnNext(2)@210,OnCompleted()@250] Actual: [OnNext(2)@210,OnCompleted()@250]

  Observable#slice single end

    ✔ Expected: [OnNext(2)@210,OnCompleted()@220] Actual: [OnNext(2)@210,OnCompleted()@220]

  Observable#slice multiple no end

    ✔ Expected: [OnNext(2)@210,OnNext(3)@220,OnNext(4)@230,OnNext(5)@240,OnCompleted()@250] Actual: [OnNext(2)@210,OnNext(3)@220,OnNext(4)@230,OnNext(5)@240,OnCompleted()@250]

  Observable#slice multiple one no end

    ✔ Expected: [OnNext(3)@220,OnNext(4)@230,OnNext(5)@240,OnCompleted()@250] Actual: [OnNext(3)@220,OnNext(4)@230,OnNext(5)@240,OnCompleted()@250]

  Observable#slice multiple no end error

    ✔ Expected: [OnNext(2)@210,OnNext(3)@220,OnError(Error)@230] Actual: [OnNext(2)@210,OnNext(3)@220,OnError(Error)@230]

  Observable#slice multiple end

    ✔ Expected: [OnNext(2)@210,OnNext(3)@220,OnNext(4)@230,OnCompleted()@240] Actual: [OnNext(2)@210,OnNext(3)@220,OnNext(4)@230,OnCompleted()@240]

  Observable#slice multiple one end

    ✔ Expected: [OnNext(3)@220,OnNext(4)@230,OnCompleted()@240] Actual: [OnNext(3)@220,OnNext(4)@230,OnCompleted()@240]

  Observable#slice multiple end error

    ✔ Expected: [OnNext(2)@210,OnNext(3)@220,OnError(Error)@230] Actual: [OnNext(2)@210,OnNext(3)@220,OnError(Error)@230]

  Observable#some predicate empty

    ✔ Expected: [OnNext(false)@250,OnCompleted()@250] Actual: [OnNext(false)@250,OnCompleted()@250]

  Observable#some predicate return

    ✔ Expected: [OnNext(true)@210,OnCompleted()@210] Actual: [OnNext(true)@210,OnCompleted()@210]

  Observable#some predicate return not match

    ✔ Expected: [OnNext(false)@250,OnCompleted()@250] Actual: [OnNext(false)@250,OnCompleted()@250]

  Observable#some predicate SomeNoneMatch

    ✔ Expected: [OnNext(false)@250,OnCompleted()@250] Actual: [OnNext(false)@250,OnCompleted()@250]

  Observable#some predicate some match

    ✔ Expected: [OnNext(true)@220,OnCompleted()@220] Actual: [OnNext(true)@220,OnCompleted()@220]

  Observable#some predicate throw

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#some predicate throws error

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#some predicate never

    ✔ Expected: [] Actual: []

  Subject infinite

    ✔ Expected: [OnNext(5)@340,OnNext(6)@410,OnNext(7)@520] Actual: [OnNext(5)@340,OnNext(6)@410,OnNext(7)@520]
    ✔ Expected: [OnNext(6)@410,OnNext(7)@520,OnNext(8)@630] Actual: [OnNext(6)@410,OnNext(7)@520,OnNext(8)@630]
    ✔ Expected: [OnNext(11)@940] Actual: [OnNext(11)@940]

  Subject finite

    ✔ Expected: [OnNext(5)@340,OnNext(6)@410,OnNext(7)@520] Actual: [OnNext(5)@340,OnNext(6)@410,OnNext(7)@520]
    ✔ Expected: [OnNext(6)@410,OnNext(7)@520,OnCompleted()@630] Actual: [OnNext(6)@410,OnNext(7)@520,OnCompleted()@630]
    ✔ Expected: [OnCompleted()@900] Actual: [OnCompleted()@900]

  Subject error

    ✔ Expected: [OnNext(5)@340,OnNext(6)@410,OnNext(7)@520] Actual: [OnNext(5)@340,OnNext(6)@410,OnNext(7)@520]
    ✔ Expected: [OnNext(6)@410,OnNext(7)@520,OnError(Error)@630] Actual: [OnNext(6)@410,OnNext(7)@520,OnError(Error)@630]
    ✔ Expected: [OnError(Error)@900] Actual: [OnError(Error)@900]

  Subject canceled

    ✔ Expected: [] Actual: []
    ✔ Expected: [OnCompleted()@630] Actual: [OnCompleted()@630]
    ✔ Expected: [OnCompleted()@900] Actual: [OnCompleted()@900]

  Subject.create

    ✔ should be equal
    ✔ should be equal
    ✔ (unnamed assert)

  Observable#subscribeOn normal

    ✔ Expected: [OnNext(2)@210,OnCompleted()@250] Actual: [OnNext(2)@210,OnCompleted()@250]
    ✔ Expected: [(201, 251)] Actual: [(201, 251)]

  Observable#subscribeOn error

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [(201, 211)] Actual: [(201, 211)]

  Observable#subscribeOn empty

    ✔ Expected: [OnCompleted()@250] Actual: [OnCompleted()@250]
    ✔ Expected: [(201, 251)] Actual: [(201, 251)]

  Observable#subscribeOn never

    ✔ Expected: [] Actual: []
    ✔ Expected: [(201, 1001)] Actual: [(201, 1001)]

  Observable#sum number empty

    ✔ Expected: [OnNext(0)@250,OnCompleted()@250] Actual: [OnNext(0)@250,OnCompleted()@250]

  Observable#sum number return

    ✔ Expected: [OnNext(2)@250,OnCompleted()@250] Actual: [OnNext(2)@250,OnCompleted()@250]

  Observable#sum number some

    ✔ Expected: [OnNext(9)@250,OnCompleted()@250] Actual: [OnNext(9)@250,OnCompleted()@250]

  Observable#sum number throw

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#sum number never

    ✔ Expected: [] Actual: []

  Observable#sum with selector regular number

    ✔ Expected: [OnNext(6)@240,OnCompleted()@240] Actual: [OnNext(6)@240,OnCompleted()@240]
    ✔ Expected: [(200, 240)] Actual: [(200, 240)]

  Observable#switch Promise

    ✔ should be equal

  Observable#switch Promise error

    ✔ should be equal

  Observable#switch Data

    ✔ Expected: [OnNext(101)@310,OnNext(102)@320,OnNext(201)@410,OnNext(202)@420,OnNext(203)@430,OnNext(204)@440,OnNext(301)@510,OnNext(302)@520,OnNext(303)@530,OnNext(304)@540,OnCompleted()@650] Actual: [OnNext(101)@310,OnNext(102)@320,OnNext(201)@410,OnNext(202)@420,OnNext(203)@430,OnNext(204)@440,OnNext(301)@510,OnNext(302)@520,OnNext(303)@530,OnNext(304)@540,OnCompleted()@650]

  Observable#switch inner throws

    ✔ Expected: [OnNext(101)@310,OnNext(102)@320,OnNext(201)@410,OnNext(202)@420,OnNext(203)@430,OnNext(204)@440,OnError(Error)@450] Actual: [OnNext(101)@310,OnNext(102)@320,OnNext(201)@410,OnNext(202)@420,OnNext(203)@430,OnNext(204)@440,OnError(Error)@450]

  Observable#switch outer throws

    ✔ Expected: [OnNext(101)@310,OnNext(102)@320,OnNext(201)@410,OnNext(202)@420,OnNext(203)@430,OnNext(204)@440,OnError(Error)@500] Actual: [OnNext(101)@310,OnNext(102)@320,OnNext(201)@410,OnNext(202)@420,OnNext(203)@430,OnNext(204)@440,OnError(Error)@500]

  Observable#switch no inner

    ✔ Expected: [OnCompleted()@500] Actual: [OnCompleted()@500]

  Observable#switch inner completes

    ✔ Expected: [OnNext(101)@310,OnNext(102)@320,OnNext(103)@410,OnNext(104)@420,OnNext(105)@510,OnNext(106)@520,OnCompleted()@540] Actual: [OnNext(101)@310,OnNext(102)@320,OnNext(103)@410,OnNext(104)@420,OnNext(105)@510,OnNext(106)@520,OnCompleted()@540]

  Observable#switchFirst Promise

    ✔ should be equal

  Observable#switchFirst Promise error

    ✔ should be equal

  Observable#switchFirst Data

    ✔ Expected: [OnNext(101)@310,OnNext(102)@320,OnNext(103)@410,OnNext(104)@420,OnNext(105)@510,OnNext(106)@520,OnCompleted()@600] Actual: [OnNext(101)@310,OnNext(102)@320,OnNext(103)@410,OnNext(104)@420,OnNext(105)@510,OnNext(106)@520,OnCompleted()@600]

  Observable#switchFirst inner throws

    ✔ Expected: [OnNext(101)@310,OnNext(102)@320,OnNext(103)@410,OnNext(104)@420,OnNext(105)@510,OnNext(106)@520,OnCompleted()@600] Actual: [OnNext(101)@310,OnNext(102)@320,OnNext(103)@410,OnNext(104)@420,OnNext(105)@510,OnNext(106)@520,OnCompleted()@600]

  Observable#switchFirst outer throws

    ✔ Expected: [OnNext(101)@310,OnNext(102)@320,OnNext(103)@410,OnNext(104)@420,OnError(Error)@500] Actual: [OnNext(101)@310,OnNext(102)@320,OnNext(103)@410,OnNext(104)@420,OnError(Error)@500]

  Observable#switchFirst no inner

    ✔ Expected: [OnCompleted()@500] Actual: [OnCompleted()@500]

  Observable#switchFirst inner completes

    ✔ Expected: [OnNext(101)@310,OnNext(102)@320,OnNext(103)@410,OnNext(104)@420,OnNext(105)@510,OnNext(106)@520,OnCompleted()@540] Actual: [OnNext(101)@310,OnNext(102)@320,OnNext(103)@410,OnNext(104)@420,OnNext(105)@510,OnNext(106)@520,OnCompleted()@540]

  Observable#take complete after

    ✔ Expected: [OnNext(9)@210,OnNext(13)@230,OnNext(7)@270,OnNext(1)@280,OnNext(-1)@300,OnNext(3)@310,OnNext(8)@340,OnNext(11)@370,OnNext(15)@410,OnNext(16)@415,OnNext(72)@460,OnNext(76)@510,OnNext(32)@560,OnNext(-100)@570,OnNext(-3)@580,OnNext(5)@590,OnNext(10)@630,OnCompleted()@690] Actual: [OnNext(9)@210,OnNext(13)@230,OnNext(7)@270,OnNext(1)@280,OnNext(-1)@300,OnNext(3)@310,OnNext(8)@340,OnNext(11)@370,OnNext(15)@410,OnNext(16)@415,OnNext(72)@460,OnNext(76)@510,OnNext(32)@560,OnNext(-100)@570,OnNext(-3)@580,OnNext(5)@590,OnNext(10)@630,OnCompleted()@690]
    ✔ Expected: [(200, 690)] Actual: [(200, 690)]

  Observable#take complete same

    ✔ Expected: [OnNext(9)@210,OnNext(13)@230,OnNext(7)@270,OnNext(1)@280,OnNext(-1)@300,OnNext(3)@310,OnNext(8)@340,OnNext(11)@370,OnNext(15)@410,OnNext(16)@415,OnNext(72)@460,OnNext(76)@510,OnNext(32)@560,OnNext(-100)@570,OnNext(-3)@580,OnNext(5)@590,OnNext(10)@630,OnCompleted()@630] Actual: [OnNext(9)@210,OnNext(13)@230,OnNext(7)@270,OnNext(1)@280,OnNext(-1)@300,OnNext(3)@310,OnNext(8)@340,OnNext(11)@370,OnNext(15)@410,OnNext(16)@415,OnNext(72)@460,OnNext(76)@510,OnNext(32)@560,OnNext(-100)@570,OnNext(-3)@580,OnNext(5)@590,OnNext(10)@630,OnCompleted()@630]
    ✔ Expected: [(200, 630)] Actual: [(200, 630)]

  Observable#take complete before

    ✔ Expected: [OnNext(9)@210,OnNext(13)@230,OnNext(7)@270,OnNext(1)@280,OnNext(-1)@300,OnNext(3)@310,OnNext(8)@340,OnNext(11)@370,OnNext(15)@410,OnNext(16)@415,OnCompleted()@415] Actual: [OnNext(9)@210,OnNext(13)@230,OnNext(7)@270,OnNext(1)@280,OnNext(-1)@300,OnNext(3)@310,OnNext(8)@340,OnNext(11)@370,OnNext(15)@410,OnNext(16)@415,OnCompleted()@415]
    ✔ Expected: [(200, 415)] Actual: [(200, 415)]

  Observable#take error after

    ✔ Expected: [OnNext(9)@210,OnNext(13)@230,OnNext(7)@270,OnNext(1)@280,OnNext(-1)@300,OnNext(3)@310,OnNext(8)@340,OnNext(11)@370,OnNext(15)@410,OnNext(16)@415,OnNext(72)@460,OnNext(76)@510,OnNext(32)@560,OnNext(-100)@570,OnNext(-3)@580,OnNext(5)@590,OnNext(10)@630,OnError(Error)@690] Actual: [OnNext(9)@210,OnNext(13)@230,OnNext(7)@270,OnNext(1)@280,OnNext(-1)@300,OnNext(3)@310,OnNext(8)@340,OnNext(11)@370,OnNext(15)@410,OnNext(16)@415,OnNext(72)@460,OnNext(76)@510,OnNext(32)@560,OnNext(-100)@570,OnNext(-3)@580,OnNext(5)@590,OnNext(10)@630,OnError(Error)@690]
    ✔ Expected: [(200, 690)] Actual: [(200, 690)]

  Observable#take error same

    ✔ Expected: [OnNext(9)@210,OnNext(13)@230,OnNext(7)@270,OnNext(1)@280,OnNext(-1)@300,OnNext(3)@310,OnNext(8)@340,OnNext(11)@370,OnNext(15)@410,OnNext(16)@415,OnNext(72)@460,OnNext(76)@510,OnNext(32)@560,OnNext(-100)@570,OnNext(-3)@580,OnNext(5)@590,OnNext(10)@630,OnCompleted()@630] Actual: [OnNext(9)@210,OnNext(13)@230,OnNext(7)@270,OnNext(1)@280,OnNext(-1)@300,OnNext(3)@310,OnNext(8)@340,OnNext(11)@370,OnNext(15)@410,OnNext(16)@415,OnNext(72)@460,OnNext(76)@510,OnNext(32)@560,OnNext(-100)@570,OnNext(-3)@580,OnNext(5)@590,OnNext(10)@630,OnCompleted()@630]
    ✔ Expected: [(200, 630)] Actual: [(200, 630)]

  Observable#take error before

    ✔ Expected: [OnNext(9)@210,OnNext(13)@230,OnNext(7)@270,OnCompleted()@270] Actual: [OnNext(9)@210,OnNext(13)@230,OnNext(7)@270,OnCompleted()@270]
    ✔ Expected: [(200, 270)] Actual: [(200, 270)]

  Observable#take dispose before

    ✔ Expected: [OnNext(9)@210,OnNext(13)@230] Actual: [OnNext(9)@210,OnNext(13)@230]
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]

  Observable#take dispose after

    ✔ Expected: [OnNext(9)@210,OnNext(13)@230,OnNext(7)@270,OnCompleted()@270] Actual: [OnNext(9)@210,OnNext(13)@230,OnNext(7)@270,OnCompleted()@270]
    ✔ Expected: [(200, 270)] Actual: [(200, 270)]

  Observable#takeLastBuffer zero completed

    ✔ Expected: [OnNext()@650,OnCompleted()@650] Actual: [OnNext()@650,OnCompleted()@650]
    ✔ Expected: [(200, 650)] Actual: [(200, 650)]

  Observable#takeLastBuffer zero error

    ✔ Expected: [OnError(Error)@650] Actual: [OnError(Error)@650]
    ✔ Expected: [(200, 650)] Actual: [(200, 650)]

  Observable#takeLastBuffer zero disposed

    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  Observable#takeLastBuffer one completed

    ✔ Expected: [OnNext(9)@650,OnCompleted()@650] Actual: [OnNext(9)@650,OnCompleted()@650]
    ✔ Expected: [(200, 650)] Actual: [(200, 650)]

  Observable#takeLastBuffer one error

    ✔ Expected: [OnError(Error)@650] Actual: [OnError(Error)@650]
    ✔ Expected: [(200, 650)] Actual: [(200, 650)]

  Observable#takeLastBuffer one disposed

    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  Observable#takeLastBuffer three completed

    ✔ Expected: [OnNext(7,8,9)@650,OnCompleted()@650] Actual: [OnNext(7,8,9)@650,OnCompleted()@650]
    ✔ Expected: [(200, 650)] Actual: [(200, 650)]

  Observable#takeLastBuffer three error

    ✔ Expected: [OnError(Error)@650] Actual: [OnError(Error)@650]
    ✔ Expected: [(200, 650)] Actual: [(200, 650)]

  Observable#takeLastBuffer three disposed

    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  Observable#takeLastBufferWithTime zero 1

    ✔ Expected: [OnNext()@230,OnCompleted()@230] Actual: [OnNext()@230,OnCompleted()@230]
    ✔ Expected: [(200, 230)] Actual: [(200, 230)]

  Observable#takeLastBufferWithTime zero 2

    ✔ Expected: [OnNext()@230,OnCompleted()@230] Actual: [OnNext()@230,OnCompleted()@230]
    ✔ Expected: [(200, 230)] Actual: [(200, 230)]

  Observable#takeLastBufferWithTime some 1

    ✔ Expected: [OnNext(2,3)@240,OnCompleted()@240] Actual: [OnNext(2,3)@240,OnCompleted()@240]
    ✔ Expected: [(200, 240)] Actual: [(200, 240)]

  Observable#takeLastBufferWithTime some 2

    ✔ Expected: [OnNext()@300,OnCompleted()@300] Actual: [OnNext()@300,OnCompleted()@300]
    ✔ Expected: [(200, 300)] Actual: [(200, 300)]

  Observable#takeLastBufferWithTime some 3

    ✔ Expected: [OnNext(6,7,8,9)@300,OnCompleted()@300] Actual: [OnNext(6,7,8,9)@300,OnCompleted()@300]
    ✔ Expected: [(200, 300)] Actual: [(200, 300)]

  Observable#takeLastBufferWithTime some 4

    ✔ Expected: [OnNext()@350,OnCompleted()@350] Actual: [OnNext()@350,OnCompleted()@350]
    ✔ Expected: [(200, 350)] Actual: [(200, 350)]

  Observable#takeLastBufferWithTime All

    ✔ Expected: [OnNext(1,2)@230,OnCompleted()@230] Actual: [OnNext(1,2)@230,OnCompleted()@230]
    ✔ Expected: [(200, 230)] Actual: [(200, 230)]

  Observable#takeLastBufferWithTime Error

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [(200, 210)] Actual: [(200, 210)]

  Observable#takeLastBufferWithTime never

    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  Observable#takeLastWithTime zero 1

    ✔ Expected: [OnCompleted()@230] Actual: [OnCompleted()@230]
    ✔ Expected: [(200, 230)] Actual: [(200, 230)]

  Observable#takeLastWithTime zero 2

    ✔ Expected: [OnCompleted()@230] Actual: [OnCompleted()@230]
    ✔ Expected: [(200, 230)] Actual: [(200, 230)]

  Observable#takeLastWithTime some 1

    ✔ Expected: [OnNext(2)@240,OnNext(3)@240,OnCompleted()@240] Actual: [OnNext(2)@240,OnNext(3)@240,OnCompleted()@240]
    ✔ Expected: [(200, 240)] Actual: [(200, 240)]

  Observable#takeLastWithTime some 2

    ✔ Expected: [OnCompleted()@300] Actual: [OnCompleted()@300]
    ✔ Expected: [(200, 300)] Actual: [(200, 300)]

  Observable#takeLastWithTime some 3

    ✔ Expected: [OnNext(6)@300,OnNext(7)@300,OnNext(8)@300,OnNext(9)@300,OnCompleted()@300] Actual: [OnNext(6)@300,OnNext(7)@300,OnNext(8)@300,OnNext(9)@300,OnCompleted()@300]
    ✔ Expected: [(200, 300)] Actual: [(200, 300)]

  Observable#takeLastWithTime some 4

    ✔ Expected: [OnCompleted()@350] Actual: [OnCompleted()@350]
    ✔ Expected: [(200, 350)] Actual: [(200, 350)]

  Observable#takeLastWithTime all

    ✔ Expected: [OnNext(1)@230,OnNext(2)@230,OnCompleted()@230] Actual: [OnNext(1)@230,OnNext(2)@230,OnCompleted()@230]
    ✔ Expected: [(200, 230)] Actual: [(200, 230)]

  Observable#takeLastWithTime error

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [(200, 210)] Actual: [(200, 210)]

  Observable#takeLastWithTime never

    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  Observable#takeUntil preempt some data next

    ✔ Expected: [OnNext(2)@210,OnNext(3)@220,OnCompleted()@225] Actual: [OnNext(2)@210,OnNext(3)@220,OnCompleted()@225]

  Observable#takeUntil preempt some data error

    ✔ Expected: [OnNext(2)@210,OnNext(3)@220,OnError(Error)@225] Actual: [OnNext(2)@210,OnNext(3)@220,OnError(Error)@225]

  Observable#takeUntil no preempt some data empty

    ✔ Expected: [OnNext(2)@210,OnNext(3)@220,OnNext(4)@230,OnNext(5)@240,OnCompleted()@250] Actual: [OnNext(2)@210,OnNext(3)@220,OnNext(4)@230,OnNext(5)@240,OnCompleted()@250]

  Observable#takeUntil no preempt some data never

    ✔ Expected: [OnNext(2)@210,OnNext(3)@220,OnNext(4)@230,OnNext(5)@240,OnCompleted()@250] Actual: [OnNext(2)@210,OnNext(3)@220,OnNext(4)@230,OnNext(5)@240,OnCompleted()@250]

  Observable#takeUntil preempt never next

    ✔ Expected: [OnCompleted()@225] Actual: [OnCompleted()@225]

  Observable#takeUntil preempt never error

    ✔ Expected: [OnError(Error)@225] Actual: [OnError(Error)@225]

  Observable#takeUntil no preempt never empty

    ✔ Expected: [] Actual: []

  Observable#takeUntil no preempt never never

    ✔ Expected: [] Actual: []

  Observable#takeUntil preempt before first produced

    ✔ Expected: [OnCompleted()@210] Actual: [OnCompleted()@210]

  Observable#takeUntil preempt before first produced remain silent and proper disposed

    ✔ Expected: [OnCompleted()@210] Actual: [OnCompleted()@210]
    ✔ (unnamed assert)

  Observable#takeUntil no preempt after last produced proper disposed signal

    ✔ Expected: [OnNext(2)@230,OnCompleted()@240] Actual: [OnNext(2)@230,OnCompleted()@240]
    ✔ (unnamed assert)

  Observable#takeUntilWithTime zero

    ✔ Expected: [OnCompleted()@201] Actual: [OnCompleted()@201]
    ✔ Expected: [(200, 201)] Actual: [(200, 201)]

  Observable#takeUntilWithTime late

    ✔ Expected: [OnNext(1)@210,OnNext(2)@220,OnCompleted()@230] Actual: [OnNext(1)@210,OnNext(2)@220,OnCompleted()@230]
    ✔ Expected: [(200, 230)] Actual: [(200, 230)]

  Observable#takeUntilWithTime error

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [(200, 210)] Actual: [(200, 210)]

  Observable#takeUntilWithTime never

    ✔ Expected: [OnCompleted()@250] Actual: [OnCompleted()@250]
    ✔ Expected: [(200, 250)] Actual: [(200, 250)]

  Observable#takeUntilWithTime twice 1

    ✔ Expected: [OnNext(1)@210,OnNext(2)@220,OnNext(3)@230,OnCompleted()@235] Actual: [OnNext(1)@210,OnNext(2)@220,OnNext(3)@230,OnCompleted()@235]
    ✔ Expected: [(200, 235)] Actual: [(200, 235)]

  Observable#takeUntilWithTime twice 2

    ✔ Expected: [OnNext(1)@210,OnNext(2)@220,OnNext(3)@230,OnCompleted()@235] Actual: [OnNext(1)@210,OnNext(2)@220,OnNext(3)@230,OnCompleted()@235]
    ✔ Expected: [(200, 235)] Actual: [(200, 235)]

  Observable#takeWhile complete before

    ✔ Expected: [OnNext(2)@210,OnNext(5)@260,OnNext(13)@290,OnNext(3)@320,OnCompleted()@330] Actual: [OnNext(2)@210,OnNext(5)@260,OnNext(13)@290,OnNext(3)@320,OnCompleted()@330]
    ✔ Expected: [(200, 330)] Actual: [(200, 330)]
    ✔ should be equal

  Observable#takeWhile complete after

    ✔ Expected: [OnNext(2)@210,OnNext(5)@260,OnNext(13)@290,OnNext(3)@320,OnNext(7)@350,OnCompleted()@390] Actual: [OnNext(2)@210,OnNext(5)@260,OnNext(13)@290,OnNext(3)@320,OnNext(7)@350,OnCompleted()@390]
    ✔ Expected: [(200, 390)] Actual: [(200, 390)]
    ✔ should be equal

  Observable#takeWhile error before

    ✔ Expected: [OnNext(2)@210,OnNext(5)@260,OnError(Error)@270] Actual: [OnNext(2)@210,OnNext(5)@260,OnError(Error)@270]
    ✔ Expected: [(200, 270)] Actual: [(200, 270)]
    ✔ should be equal

  Observable#takeWhile error after

    ✔ Expected: [OnNext(2)@210,OnNext(5)@260,OnNext(13)@290,OnNext(3)@320,OnNext(7)@350,OnCompleted()@390] Actual: [OnNext(2)@210,OnNext(5)@260,OnNext(13)@290,OnNext(3)@320,OnNext(7)@350,OnCompleted()@390]
    ✔ Expected: [(200, 390)] Actual: [(200, 390)]
    ✔ should be equal

  Observable#takeWhile dispose before

    ✔ Expected: [OnNext(2)@210,OnNext(5)@260,OnNext(13)@290] Actual: [OnNext(2)@210,OnNext(5)@260,OnNext(13)@290]
    ✔ Expected: [(200, 300)] Actual: [(200, 300)]
    ✔ should be equal

  Observable#takeWhile dispose after

    ✔ Expected: [OnNext(2)@210,OnNext(5)@260,OnNext(13)@290,OnNext(3)@320,OnNext(7)@350,OnCompleted()@390] Actual: [OnNext(2)@210,OnNext(5)@260,OnNext(13)@290,OnNext(3)@320,OnNext(7)@350,OnCompleted()@390]
    ✔ Expected: [(200, 390)] Actual: [(200, 390)]
    ✔ should be equal

  Observable#takeWhile zero

    ✔ Expected: [OnCompleted()@205] Actual: [OnCompleted()@205]
    ✔ Expected: [(200, 205)] Actual: [(200, 205)]
    ✔ should be equal

  Observable#takeWhile throw

    ✔ Expected: [OnNext(2)@210,OnNext(5)@260,OnError(Error)@290] Actual: [OnNext(2)@210,OnNext(5)@260,OnError(Error)@290]
    ✔ Expected: [(200, 290)] Actual: [(200, 290)]
    ✔ should be equal

  Observable#takeWhile index

    ✔ Expected: [OnNext(100)@205,OnNext(2)@210,OnNext(5)@260,OnNext(13)@290,OnNext(3)@320,OnCompleted()@350] Actual: [OnNext(100)@205,OnNext(2)@210,OnNext(5)@260,OnNext(13)@290,OnNext(3)@320,OnCompleted()@350]
    ✔ Expected: [(200, 350)] Actual: [(200, 350)]

  Observable#tap should see all values

    ✔ should be equal
    ✔ should be equal

  Observable#tap plain action

    ✔ should be equal

  Observable#tap next completed

    ✔ should be equal
    ✔ should be equal
    ✔ (unnamed assert)

  Observable#tap next completed never

    ✔ should be equal
    ✔ (unnamed assert)

  Observable#tap next error

    ✔ should be equal
    ✔ should be equal
    ✔ (unnamed assert)

  Observable#tap next error not

    ✔ should be equal
    ✔ should be equal
    ✔ (unnamed assert)

  Observable#tap next error completed

    ✔ should be equal
    ✔ should be equal
    ✔ (unnamed assert)
    ✔ (unnamed assert)

  Observable#tap next completed error

    ✔ should be equal
    ✔ should be equal
    ✔ (unnamed assert)
    ✔ (unnamed assert)

  Observable#tap next error completed never

    ✔ should be equal
    ✔ (unnamed assert)
    ✔ (unnamed assert)

  Observable#tap observer some data with error

    ✔ should be equal
    ✔ should be equal
    ✔ (unnamed assert)
    ✔ (unnamed assert)

  Observable#tap next throws

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#tap next completed next throws

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#tap next competed completed throws

    ✔ Expected: [OnNext(2)@210,OnError(Error)@250] Actual: [OnNext(2)@210,OnError(Error)@250]

  Observable#tap next error next throws

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#tap next error error throws

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#tap next error completed next throws

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#tap next error completed error throws

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#tap next error completed completed throws

    ✔ Expected: [OnNext(2)@210,OnError(Error)@250] Actual: [OnNext(2)@210,OnError(Error)@250]

  Observable#tap observer next throws

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#tap observer error throws

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#tap observer completed throws

    ✔ Expected: [OnNext(2)@210,OnError(Error)@250] Actual: [OnNext(2)@210,OnError(Error)@250]

  Observable#throttle completed

    ✔ Expected: [OnNext(2)@210,OnNext(6)@410,OnCompleted()@500] Actual: [OnNext(2)@210,OnNext(6)@410,OnCompleted()@500]
    ✔ Expected: [(200, 500)] Actual: [(200, 500)]

  Observable#throttle never

    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  Observable#throttle empty

    ✔ Expected: [OnCompleted()@500] Actual: [OnCompleted()@500]
    ✔ Expected: [(200, 500)] Actual: [(200, 500)]

  Observable#throttle error

    ✔ Expected: [OnNext(2)@210,OnError(Error)@410] Actual: [OnNext(2)@210,OnError(Error)@410]
    ✔ Expected: [(200, 410)] Actual: [(200, 410)]

  Observable#throttle no end

    ✔ Expected: [OnNext(2)@210,OnNext(6)@410] Actual: [OnNext(2)@210,OnNext(6)@410]
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  Observable.throw basic

    ✔ Expected: [OnError(Error)@201] Actual: [OnError(Error)@201]

  Observable.throw disposed

    ✔ Expected: [] Actual: []

  Observable.throw observer throws

    ✔ should throw

  Observable#timeInterval regular

    ✔ Expected: [OnNext([object Object])@210,OnNext([object Object])@230,OnNext([object Object])@260,OnNext([object Object])@300,OnNext([object Object])@350,OnCompleted()@400] Actual: [OnNext([object Object])@210,OnNext([object Object])@230,OnNext([object Object])@260,OnNext([object Object])@300,OnNext([object Object])@350,OnCompleted()@400]

  Observable#timeInterval empty

    ✔ Expected: [OnCompleted()@201] Actual: [OnCompleted()@201]

  Observable#timeInterval error

    ✔ Expected: [OnError(Error)@201] Actual: [OnError(Error)@201]

  Observable#timeInterval never

    ✔ Expected: [] Actual: []

  Observable.timer one shot relative time basic

    ✔ Expected: [OnNext(0)@500,OnCompleted()@500] Actual: [OnNext(0)@500,OnCompleted()@500]

  Observable.timer one shot relative time zero

    ✔ Expected: [OnNext(0)@201,OnCompleted()@201] Actual: [OnNext(0)@201,OnCompleted()@201]

  Observable.timer one shot relative time negative

    ✔ Expected: [OnNext(0)@201,OnCompleted()@201] Actual: [OnNext(0)@201,OnCompleted()@201]

  Observable.timer one shot relative time disposed

    ✔ Expected: [] Actual: []

  Observable.timer one shot relative time observer throws

    ✔ should throw
    ✔ should throw

  Observable.timer relative start and periodically repeat

    ✔ Expected: [OnNext(0)@500,OnNext(1)@600,OnNext(2)@700,OnNext(3)@800,OnNext(4)@900] Actual: [OnNext(0)@500,OnNext(1)@600,OnNext(2)@700,OnNext(3)@800,OnNext(4)@900]

  Observable#timestamp regular

    ✔ Expected: [OnNext([object Object])@210,OnNext([object Object])@230,OnNext([object Object])@260,OnNext([object Object])@300,OnNext([object Object])@350,OnCompleted()@400] Actual: [OnNext([object Object])@210,OnNext([object Object])@230,OnNext([object Object])@260,OnNext([object Object])@300,OnNext([object Object])@350,OnCompleted()@400]

  Observable#timestamp empty

    ✔ Expected: [OnCompleted()@201] Actual: [OnCompleted()@201]

  Observable#timestamp error

    ✔ Expected: [OnError(Error)@201] Actual: [OnError(Error)@201]

  Observable#timestamp never

    ✔ Expected: [] Actual: []

  Observable#toArray completed

    ✔ Expected: [OnNext(2,3,4,5)@660,OnCompleted()@660] Actual: [OnNext(2,3,4,5)@660,OnCompleted()@660]
    ✔ Expected: [(200, 660)] Actual: [(200, 660)]

  Observable#toArray error

    ✔ Expected: [OnError(Error)@660] Actual: [OnError(Error)@660]
    ✔ Expected: [(200, 660)] Actual: [(200, 660)]

  Observable#toArray disposed

    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  Observable#toMap completed

    ✔ Expected: [OnNext(4,8,6,12,8,16,10,20)@660,OnCompleted()@660] Actual: [OnNext(4,8,6,12,8,16,10,20)@660,OnCompleted()@660]
    ✔ Expected: [(200, 660)] Actual: [(200, 660)]

  Observable#toMap error

    ✔ Expected: [OnError(Error)@660] Actual: [OnError(Error)@660]
    ✔ Expected: [(200, 660)] Actual: [(200, 660)]

  Observable#toMap key selector throws

    ✔ Expected: [OnError(Error)@440] Actual: [OnError(Error)@440]
    ✔ Expected: [(200, 440)] Actual: [(200, 440)]

  Observable#toMap element selector throws

    ✔ Expected: [OnError(Error)@440] Actual: [OnError(Error)@440]
    ✔ Expected: [(200, 440)] Actual: [(200, 440)]

  Observable#toMap disposed

    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  Observable#toSet completed

    ✔ Expected: [OnNext(2,3,4,5)@660,OnCompleted()@660] Actual: [OnNext(2,3,4,5)@660,OnCompleted()@660]
    ✔ Expected: [(200, 660)] Actual: [(200, 660)]

  Observable#toSet error

    ✔ Expected: [OnError(Error)@660] Actual: [OnError(Error)@660]
    ✔ Expected: [(200, 660)] Actual: [(200, 660)]

  Observable#toSet disposed

    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  Observable#when then 1

    ✔ Expected: [OnNext(1)@210,OnCompleted()@220] Actual: [OnNext(1)@210,OnCompleted()@220]

  Observable#when then 1 error

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#when then 1 throws

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#when and 2

    ✔ Expected: [OnNext(2)@210,OnCompleted()@220] Actual: [OnNext(2)@210,OnCompleted()@220]

  Observable#when and 2 error

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#when then 2 throws

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#when and 3

    ✔ Expected: [OnNext(3)@210,OnCompleted()@220] Actual: [OnNext(3)@210,OnCompleted()@220]

  Observable#when and 3 error

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#when then 3 throws

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#when and 4

    ✔ Expected: [OnNext(4)@210,OnCompleted()@220] Actual: [OnNext(4)@210,OnCompleted()@220]

  Observable#when and 4 error

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#when then 4 throws

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#when and 5

    ✔ Expected: [OnNext(5)@210,OnCompleted()@220] Actual: [OnNext(5)@210,OnCompleted()@220]

  Observable#when and 5 error

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#when then 5 throws

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#when and 6

    ✔ Expected: [OnNext(6)@210,OnCompleted()@220] Actual: [OnNext(6)@210,OnCompleted()@220]

  Observable#when and 6 error

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#when then 6 throws

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#when and 7

    ✔ Expected: [OnNext(7)@210,OnCompleted()@220] Actual: [OnNext(7)@210,OnCompleted()@220]

  Observable#when and 7 error

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#when then 7 throws

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#when and 8

    ✔ Expected: [OnNext(8)@210,OnCompleted()@220] Actual: [OnNext(8)@210,OnCompleted()@220]

  Observable#when and 8 error

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#when then 8 throws

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#when and 9

    ✔ Expected: [OnNext(9)@210,OnCompleted()@220] Actual: [OnNext(9)@210,OnCompleted()@220]

  Observable#when and 9 error

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]
    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#when then 9 throws

    ✔ Expected: [OnError(Error)@210] Actual: [OnError(Error)@210]

  Observable#when when multiple data symmetric

    ✔ Expected: [OnNext(5)@240,OnNext(7)@250,OnNext(9)@260,OnCompleted()@270] Actual: [OnNext(5)@240,OnNext(7)@250,OnNext(9)@260,OnCompleted()@270]

  Observable#when when multiple data asymmetric

    ✔ Expected: [OnNext(5)@240,OnNext(7)@250,OnCompleted()@270] Actual: [OnNext(5)@240,OnNext(7)@250,OnCompleted()@270]

  Observable#when when empty empty

    ✔ Expected: [OnCompleted()@270] Actual: [OnCompleted()@270]

  Observable#when when never never

    ✔ Expected: [] Actual: []

  Observable#when when throw non-empty

    ✔ Expected: [OnError(Error)@240] Actual: [OnError(Error)@240]

  Observable#when complicated when

    ✔ Expected: [OnNext(7)@220,OnNext(16)@230,OnNext(7)@240,OnNext(-4)@250,OnCompleted()@300] Actual: [OnNext(7)@220,OnNext(16)@230,OnNext(7)@240,OnNext(-4)@250,OnCompleted()@300]

  Observable#window closings basic

    ✔ Expected: [OnNext(0 3)@250,OnNext(0 4)@260,OnNext(1 5)@310,OnNext(1 6)@340,OnNext(1 7)@410,OnNext(1 8)@420,OnNext(1 9)@470,OnNext(2 10)@550,OnCompleted()@590] Actual: [OnNext(0 3)@250,OnNext(0 4)@260,OnNext(1 5)@310,OnNext(1 6)@340,OnNext(1 7)@410,OnNext(1 8)@420,OnNext(1 9)@470,OnNext(2 10)@550,OnCompleted()@590]
    ✔ Expected: [(200, 590)] Actual: [(200, 590)]

  Observable#window closings Dispose

    ✔ Expected: [OnNext(0 3)@250,OnNext(0 4)@260,OnNext(1 5)@310,OnNext(1 6)@340] Actual: [OnNext(0 3)@250,OnNext(0 4)@260,OnNext(1 5)@310,OnNext(1 6)@340]
    ✔ Expected: [(200, 400)] Actual: [(200, 400)]

  Observable#window closings Error

    ✔ Expected: [OnNext(0 3)@250,OnNext(0 4)@260,OnNext(1 5)@310,OnNext(1 6)@340,OnNext(1 7)@410,OnNext(1 8)@420,OnNext(1 9)@470,OnNext(2 10)@550,OnError(Error)@590] Actual: [OnNext(0 3)@250,OnNext(0 4)@260,OnNext(1 5)@310,OnNext(1 6)@340,OnNext(1 7)@410,OnNext(1 8)@420,OnNext(1 9)@470,OnNext(2 10)@550,OnError(Error)@590]
    ✔ Expected: [(200, 590)] Actual: [(200, 590)]

  Observable#window closings Throw

    ✔ Expected: [OnError(Error)@200] Actual: [OnError(Error)@200]
    ✔ Expected: [(200, 200)] Actual: [(200, 200)]

  Observable#window closings window close error

    ✔ Expected: [OnError(Error)@201] Actual: [OnError(Error)@201]
    ✔ Expected: [(200, 201)] Actual: [(200, 201)]

  Observable#window closings default

    ✔ Expected: [OnNext(0 3)@250,OnNext(0 4)@260,OnNext(1 5)@310,OnNext(1 6)@340,OnNext(1 7)@410,OnNext(1 8)@420,OnNext(1 9)@470,OnNext(2 10)@550,OnCompleted()@590] Actual: [OnNext(0 3)@250,OnNext(0 4)@260,OnNext(1 5)@310,OnNext(1 6)@340,OnNext(1 7)@410,OnNext(1 8)@420,OnNext(1 9)@470,OnNext(2 10)@550,OnCompleted()@590]
    ✔ Expected: [(200, 590)] Actual: [(200, 590)]

  Observable#window opening closings basic

    ✔ Expected: [OnNext(0 4)@260,OnNext(1 6)@340,OnNext(1 7)@410,OnNext(3 7)@410,OnNext(1 8)@420,OnNext(3 8)@420,OnNext(3 9)@470,OnCompleted()@900] Actual: [OnNext(0 4)@260,OnNext(1 6)@340,OnNext(1 7)@410,OnNext(3 7)@410,OnNext(1 8)@420,OnNext(3 8)@420,OnNext(3 9)@470,OnCompleted()@900]
    ✔ Expected: [(200, 900)] Actual: [(200, 900)]
    ✔ Expected: [(200, 900)] Actual: [(200, 900)]

  Observable#window opening closings throw

    ✔ Expected: [OnError(Error)@255] Actual: [OnError(Error)@255]
    ✔ Expected: [(200, 255)] Actual: [(200, 255)]
    ✔ Expected: [(200, 255)] Actual: [(200, 255)]

  Observable#window opening closings dispose

    ✔ Expected: [OnNext(0 4)@260,OnNext(1 6)@340,OnNext(1 7)@410,OnNext(3 7)@410] Actual: [OnNext(0 4)@260,OnNext(1 6)@340,OnNext(1 7)@410,OnNext(3 7)@410]
    ✔ Expected: [(200, 415)] Actual: [(200, 415)]
    ✔ Expected: [(200, 415)] Actual: [(200, 415)]

  Observable#window opening closings data error

    ✔ Expected: [OnNext(0 4)@260,OnNext(1 6)@340,OnNext(1 7)@410,OnNext(3 7)@410,OnError(Error)@415] Actual: [OnNext(0 4)@260,OnNext(1 6)@340,OnNext(1 7)@410,OnNext(3 7)@410,OnError(Error)@415]
    ✔ Expected: [(200, 415)] Actual: [(200, 415)]
    ✔ Expected: [(200, 415)] Actual: [(200, 415)]

  Observable#window opening closings window error

    ✔ Expected: [OnNext(0 4)@260,OnNext(1 6)@340,OnNext(1 7)@410,OnNext(3 7)@410,OnError(Error)@415] Actual: [OnNext(0 4)@260,OnNext(1 6)@340,OnNext(1 7)@410,OnNext(3 7)@410,OnError(Error)@415]
    ✔ Expected: [(200, 415)] Actual: [(200, 415)]
    ✔ Expected: [(200, 415)] Actual: [(200, 415)]

  Observable#window_Boundaries_Simple

    ✔ Expected: [OnNext(0 3)@250,OnNext(1 4)@260,OnNext(1 5)@310,OnNext(2 6)@340,OnNext(4 7)@410,OnNext(4 8)@420,OnNext(4 9)@470,OnNext(5 10)@550,OnCompleted()@590] Actual: [OnNext(0 3)@250,OnNext(1 4)@260,OnNext(1 5)@310,OnNext(2 6)@340,OnNext(4 7)@410,OnNext(4 8)@420,OnNext(4 9)@470,OnNext(5 10)@550,OnCompleted()@590]
    ✔ Expected: [(200, 590)] Actual: [(200, 590)]
    ✔ Expected: [(200, 590)] Actual: [(200, 590)]

  Observable#window boundaries onCompleted boundaries

    ✔ Expected: [OnNext(0 3)@250,OnNext(1 4)@260,OnNext(1 5)@310,OnNext(2 6)@340,OnCompleted()@400] Actual: [OnNext(0 3)@250,OnNext(1 4)@260,OnNext(1 5)@310,OnNext(2 6)@340,OnCompleted()@400]
    ✔ Expected: [(200, 400)] Actual: [(200, 400)]
    ✔ Expected: [(200, 400)] Actual: [(200, 400)]

  Observable#window boundaries onError source

    ✔ Expected: [OnNext(0 3)@250,OnNext(1 4)@260,OnNext(1 5)@310,OnNext(2 6)@340,OnNext(3 7)@380,OnError(Error)@400] Actual: [OnNext(0 3)@250,OnNext(1 4)@260,OnNext(1 5)@310,OnNext(2 6)@340,OnNext(3 7)@380,OnError(Error)@400]
    ✔ Expected: [(200, 400)] Actual: [(200, 400)]
    ✔ Expected: [(200, 400)] Actual: [(200, 400)]

  Observable#window boundaries onError boundaries

    ✔ Expected: [OnNext(0 3)@250,OnNext(1 4)@260,OnNext(1 5)@310,OnNext(2 6)@340,OnError(Error)@400] Actual: [OnNext(0 3)@250,OnNext(1 4)@260,OnNext(1 5)@310,OnNext(2 6)@340,OnError(Error)@400]
    ✔ Expected: [(200, 400)] Actual: [(200, 400)]
    ✔ Expected: [(200, 400)] Actual: [(200, 400)]

  Observable#windowCount basic

    ✔ Expected: [OnNext(0 2)@210,OnNext(0 3)@240,OnNext(0 4)@280,OnNext(1 4)@280,OnNext(1 5)@320,OnNext(1 6)@350,OnNext(2 6)@350,OnNext(2 7)@380,OnNext(2 8)@420,OnNext(3 8)@420,OnNext(3 9)@470,OnCompleted()@600] Actual: [OnNext(0 2)@210,OnNext(0 3)@240,OnNext(0 4)@280,OnNext(1 4)@280,OnNext(1 5)@320,OnNext(1 6)@350,OnNext(2 6)@350,OnNext(2 7)@380,OnNext(2 8)@420,OnNext(3 8)@420,OnNext(3 9)@470,OnCompleted()@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]

  Observable#windowCount disposed

    ✔ Expected: [OnNext(0 2)@210,OnNext(0 3)@240,OnNext(0 4)@280,OnNext(1 4)@280,OnNext(1 5)@320,OnNext(1 6)@350,OnNext(2 6)@350] Actual: [OnNext(0 2)@210,OnNext(0 3)@240,OnNext(0 4)@280,OnNext(1 4)@280,OnNext(1 5)@320,OnNext(1 6)@350,OnNext(2 6)@350]
    ✔ Expected: [(200, 370)] Actual: [(200, 370)]

  Observable#windowCount error

    ✔ Expected: [OnNext(0 2)@210,OnNext(0 3)@240,OnNext(0 4)@280,OnNext(1 4)@280,OnNext(1 5)@320,OnNext(1 6)@350,OnNext(2 6)@350,OnNext(2 7)@380,OnNext(2 8)@420,OnNext(3 8)@420,OnNext(3 9)@470,OnError(Error)@600] Actual: [OnNext(0 2)@210,OnNext(0 3)@240,OnNext(0 4)@280,OnNext(1 4)@280,OnNext(1 5)@320,OnNext(1 6)@350,OnNext(2 6)@350,OnNext(2 7)@380,OnNext(2 8)@420,OnNext(3 8)@420,OnNext(3 9)@470,OnError(Error)@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]

  Observable#windowTime basic

    ✔ Expected: [OnNext(0 2)@210,OnNext(0 3)@240,OnNext(0 4)@270,OnNext(0 end)@300,OnNext(1 5)@320,OnNext(1 6)@360,OnNext(1 7)@390,OnNext(1 end)@400,OnNext(2 8)@410,OnNext(2 9)@460,OnNext(2 10)@470,OnNext(2 end)@490,OnCompleted()@490] Actual: [OnNext(0 2)@210,OnNext(0 3)@240,OnNext(0 4)@270,OnNext(0 end)@300,OnNext(1 5)@320,OnNext(1 6)@360,OnNext(1 7)@390,OnNext(1 end)@400,OnNext(2 8)@410,OnNext(2 9)@460,OnNext(2 10)@470,OnNext(2 end)@490,OnCompleted()@490]
    ✔ Expected: [(200, 490)] Actual: [(200, 490)]

  Observable#windowTime basic both

    ✔ Expected: [OnNext(0 2)@210,OnNext(0 3)@240,OnNext(0 4)@270,OnNext(1 4)@270,OnNext(0 end)@300,OnNext(1 5)@320,OnNext(2 5)@320,OnNext(1 end)@350,OnNext(2 6)@360,OnNext(3 6)@360,OnNext(2 7)@390,OnNext(3 7)@390,OnNext(2 end)@400,OnNext(3 8)@410,OnNext(4 8)@410,OnNext(3 end)@450,OnNext(4 9)@460,OnNext(5 9)@460,OnNext(4 10)@470,OnNext(5 10)@470,OnNext(4 end)@490,OnNext(5 end)@490,OnCompleted()@490] Actual: [OnNext(0 2)@210,OnNext(0 3)@240,OnNext(0 4)@270,OnNext(1 4)@270,OnNext(0 end)@300,OnNext(1 5)@320,OnNext(2 5)@320,OnNext(1 end)@350,OnNext(2 6)@360,OnNext(3 6)@360,OnNext(2 7)@390,OnNext(3 7)@390,OnNext(2 end)@400,OnNext(3 8)@410,OnNext(4 8)@410,OnNext(3 end)@450,OnNext(4 9)@460,OnNext(5 9)@460,OnNext(4 10)@470,OnNext(5 10)@470,OnNext(4 end)@490,OnNext(5 end)@490,OnCompleted()@490]
    ✔ Expected: [(200, 490)] Actual: [(200, 490)]

  Observable#windowTime basic

    ✔ Expected: [OnNext(0 2)@210,OnNext(0 3)@240,OnNext(0 4)@280,OnNext(1 4)@280,OnNext(1 5)@320,OnNext(1 6)@350,OnNext(2 6)@350,OnNext(2 7)@380,OnNext(2 8)@420,OnNext(3 8)@420,OnNext(3 9)@470,OnCompleted()@600] Actual: [OnNext(0 2)@210,OnNext(0 3)@240,OnNext(0 4)@280,OnNext(1 4)@280,OnNext(1 5)@320,OnNext(1 6)@350,OnNext(2 6)@350,OnNext(2 7)@380,OnNext(2 8)@420,OnNext(3 8)@420,OnNext(3 9)@470,OnCompleted()@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]

  Observable#windowTime Error

    ✔ Expected: [OnNext(0 2)@210,OnNext(0 3)@240,OnNext(0 4)@280,OnNext(1 4)@280,OnNext(1 5)@320,OnNext(1 6)@350,OnNext(2 6)@350,OnNext(2 7)@380,OnNext(2 8)@420,OnNext(3 8)@420,OnNext(3 9)@470,OnError(Error)@600] Actual: [OnNext(0 2)@210,OnNext(0 3)@240,OnNext(0 4)@280,OnNext(1 4)@280,OnNext(1 5)@320,OnNext(1 6)@350,OnNext(2 6)@350,OnNext(2 7)@380,OnNext(2 8)@420,OnNext(3 8)@420,OnNext(3 9)@470,OnError(Error)@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]

  Observable#windowTime disposed

    ✔ Expected: [OnNext(0 2)@210,OnNext(0 3)@240,OnNext(0 4)@280,OnNext(1 4)@280,OnNext(1 5)@320,OnNext(1 6)@350,OnNext(2 6)@350] Actual: [OnNext(0 2)@210,OnNext(0 3)@240,OnNext(0 4)@280,OnNext(1 4)@280,OnNext(1 5)@320,OnNext(1 6)@350,OnNext(2 6)@350]
    ✔ Expected: [(200, 370)] Actual: [(200, 370)]

  Observable#windowTime basic same

    ✔ Expected: [OnNext(0 2)@210,OnNext(0 3)@240,OnNext(0 4)@280,OnNext(1 5)@320,OnNext(1 6)@350,OnNext(1 7)@380,OnNext(2 8)@420,OnNext(2 9)@470,OnCompleted()@600] Actual: [OnNext(0 2)@210,OnNext(0 3)@240,OnNext(0 4)@280,OnNext(1 5)@320,OnNext(1 6)@350,OnNext(1 7)@380,OnNext(2 8)@420,OnNext(2 9)@470,OnCompleted()@600]
    ✔ Expected: [(200, 600)] Actual: [(200, 600)]

  Observable#withLatestFrom never never

    ✔ Expected: [] Actual: []

  Observable#withLatestFrom never empty

    ✔ Expected: [] Actual: []

  Observable#withLatestFrom empty never

    ✔ Expected: [OnCompleted()@210] Actual: [OnCompleted()@210]

  Observable#withLatestFrom emptyempty

    ✔ Expected: [OnCompleted()@210] Actual: [OnCompleted()@210]

  Observable#withLatestFrom empty return

    ✔ Expected: [OnCompleted()@210] Actual: [OnCompleted()@210]

  Observable#withLatestFrom return empty

    ✔ Expected: [OnCompleted()@220] Actual: [OnCompleted()@220]

  Observable#withLatestFrom never return

    ✔ Expected: [OnCompleted()@220] Actual: [OnCompleted()@220]

  Observable#withLatestFrom return never

    ✔ Expected: [] Actual: []

  Observable#withLatestFrom return return

    ✔ Expected: [OnNext(5)@220,OnCompleted()@230] Actual: [OnNext(5)@220,OnCompleted()@230]

  Observable#withLatestFrom empty error

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  Observable#withLatestFrom error empty

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  Observable#withLatestFrom return throw

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  Observable#withLatestFrom throw return

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  Observable#withLatestFrom throw throw

    ✔ Expected: [OnError(Error: error1)@220] Actual: [OnError(Error: error1)@220]

  Observable#withLatestFrom error throw

    ✔ Expected: [OnError(Error: error1)@220] Actual: [OnError(Error: error1)@220]

  Observable#withLatestFrom throw error

    ✔ Expected: [OnError(Error: error1)@220] Actual: [OnError(Error: error1)@220]

  Observable#withLatestFrom never throw

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  Observable#withLatestFrom throw never

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  Observable#withLatestFrom some throw

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  Observable#withLatestFrom throw some

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  Observable#withLatestFrom throw after complete left

    ✔ Expected: [OnCompleted()@220] Actual: [OnCompleted()@220]

  Observable#withLatestFrom throw after complete right

    ✔ Expected: [OnError(Error)@230] Actual: [OnError(Error)@230]

  Observable#withLatestFrom interleaved with tail

    ✔ Expected: [OnNext(5)@220,OnNext(9)@230,OnNext(10)@235,OnNext(11)@240,OnCompleted()@250] Actual: [OnNext(5)@220,OnNext(9)@230,OnNext(10)@235,OnNext(11)@240,OnCompleted()@250]

  Observable#withLatestFrom consecutive

    ✔ Expected: [OnNext(10)@235,OnCompleted()@240] Actual: [OnNext(10)@235,OnCompleted()@240]

  Observable#withLatestFrom consecutive array

    ✔ Expected: [OnNext(4,6)@235,OnCompleted()@240] Actual: [OnNext(4,6)@235,OnCompleted()@240]

  Observable#withLatestFrom consecutive end with error left

    ✔ Expected: [OnError(Error)@230] Actual: [OnError(Error)@230]

  Observable#withLatestFrom consecutive end with error right

    ✔ Expected: [OnNext(10)@235,OnNext(11)@240,OnError(Error)@245] Actual: [OnNext(10)@235,OnNext(11)@240,OnError(Error)@245]

  Observable#withLatestFrom consecutive end with error right array

    ✔ Expected: [OnNext(6,4)@235,OnNext(7,4)@240,OnError(Error)@245] Actual: [OnNext(6,4)@235,OnNext(7,4)@240,OnError(Error)@245]

  Observable#withLatestFrom selector throws

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  Observable.zip n-ary symmetric

    ✔ Expected: [OnNext(1,2,3)@230,OnNext(4,5,6)@260,OnCompleted()@420] Actual: [OnNext(1,2,3)@230,OnNext(4,5,6)@260,OnCompleted()@420]
    ✔ Expected: [(200, 420)] Actual: [(200, 420)]
    ✔ Expected: [(200, 420)] Actual: [(200, 420)]
    ✔ Expected: [(200, 420)] Actual: [(200, 420)]

  Observable.zip n-ary symmetric selector

    ✔ Expected: [OnNext(1,2,3)@230,OnNext(4,5,6)@260,OnCompleted()@420] Actual: [OnNext(1,2,3)@230,OnNext(4,5,6)@260,OnCompleted()@420]
    ✔ Expected: [(200, 420)] Actual: [(200, 420)]
    ✔ Expected: [(200, 420)] Actual: [(200, 420)]
    ✔ Expected: [(200, 420)] Actual: [(200, 420)]

  Observable.zip n-ary array symmetric

    ✔ Expected: [OnNext(1,2,3)@230,OnNext(4,5,6)@260,OnCompleted()@420] Actual: [OnNext(1,2,3)@230,OnNext(4,5,6)@260,OnCompleted()@420]
    ✔ Expected: [(200, 420)] Actual: [(200, 420)]
    ✔ Expected: [(200, 420)] Actual: [(200, 420)]
    ✔ Expected: [(200, 420)] Actual: [(200, 420)]

  Observable.zip n-ary symmetric array selector

    ✔ Expected: [OnNext(1,2,3)@230,OnNext(4,5,6)@260,OnCompleted()@420] Actual: [OnNext(1,2,3)@230,OnNext(4,5,6)@260,OnCompleted()@420]
    ✔ Expected: [(200, 420)] Actual: [(200, 420)]
    ✔ Expected: [(200, 420)] Actual: [(200, 420)]
    ✔ Expected: [(200, 420)] Actual: [(200, 420)]

  Observable.zip never never

    ✔ Expected: [] Actual: []

  Observable.zip never empty

    ✔ Expected: [] Actual: []

  Observable.zip empty empty

    ✔ Expected: [OnCompleted()@210] Actual: [OnCompleted()@210]

  Observable.zip empty non-empty

    ✔ Expected: [OnCompleted()@215] Actual: [OnCompleted()@215]

  Observable.zip non-empty empty

    ✔ Expected: [OnCompleted()@215] Actual: [OnCompleted()@215]

  Observable.zip never non-empty

    ✔ Expected: [] Actual: []

  Observable.zip non-empty never

    ✔ Expected: [] Actual: []

  Observable.zip non-empty non-empty

    ✔ Expected: [OnNext(5)@220,OnCompleted()@240] Actual: [OnNext(5)@220,OnCompleted()@240]

  Observable.zip empty error

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  Observable.zip error empty

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  Observable.zip never error

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  Observable.zip error never

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  Observable.zip error error

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  Observable.zip some error

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  Observable.zip error some

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]

  Observable.zip some data asymmetric 1

    ✔ should be equal
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)

  Observable.zip some data asymmetric 2

    ✔ should be equal
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)

  Observable.zip some data symmetric

    ✔ should be equal
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)
    ✔ (unnamed assert)

  Observable.zip selector throws

    ✔ Expected: [OnNext(5)@220,OnError(Error)@230] Actual: [OnNext(5)@220,OnError(Error)@230]

  Observable.zip right completes first

    ✔ Expected: [OnNext(6)@215,OnCompleted()@225] Actual: [OnNext(6)@215,OnCompleted()@225]
    ✔ Expected: [(200, 225)] Actual: [(200, 225)]
    ✔ Expected: [(200, 225)] Actual: [(200, 225)]

  Observable.zipIterable never empty

    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  Observable.zipIterable empty empty

    ✔ Expected: [OnCompleted()@210] Actual: [OnCompleted()@210]
    ✔ Expected: [(200, 210)] Actual: [(200, 210)]

  Observable.zipIterable empty non-empty

    ✔ Expected: [OnCompleted()@210] Actual: [OnCompleted()@210]
    ✔ Expected: [(200, 210)] Actual: [(200, 210)]

  Observable.zipIterable non-empty empty

    ✔ Expected: [OnCompleted()@215] Actual: [OnCompleted()@215]
    ✔ Expected: [(200, 215)] Actual: [(200, 215)]

  Observable.zipIterable never non-empty

    ✔ Expected: [] Actual: []
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  Observable.zipIterable non-empty non-empty

    ✔ Expected: [OnNext(5)@215,OnCompleted()@230] Actual: [OnNext(5)@215,OnCompleted()@230]
    ✔ Expected: [(200, 230)] Actual: [(200, 230)]

  Observable.zipIterable error empty

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]
    ✔ Expected: [(200, 220)] Actual: [(200, 220)]

  Observable.zipIterable error some

    ✔ Expected: [OnError(Error)@220] Actual: [OnError(Error)@220]
    ✔ Expected: [(200, 220)] Actual: [(200, 220)]

  Observable.zipIterable some data both sides

    ✔ Expected: [OnNext(7)@210,OnNext(7)@220,OnNext(7)@230,OnNext(7)@240] Actual: [OnNext(7)@210,OnNext(7)@220,OnNext(7)@230,OnNext(7)@240]
    ✔ Expected: [(200, 1000)] Actual: [(200, 1000)]

  Observable.zipIterable selector throws

    ✔ Expected: [OnNext(5)@215,OnError(Error)@225] Actual: [OnNext(5)@215,OnError(Error)@225]
    ✔ Expected: [(200, 225)] Actual: [(200, 225)]


  total:     2026
  passing:   2026
  duration:  1.5s


